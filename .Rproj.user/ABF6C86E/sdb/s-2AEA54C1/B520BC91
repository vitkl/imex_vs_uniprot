{
    "collab_server" : "",
    "contents" : "##============================================================================##\n## swissprot_vs_imex_protein_properties\n\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\")\n\nSPECIES_NAME = \"Homo sapiens\"\n\n## ## Use all Uniprot if reviewed == 1, only Swissprot data if reviewed == 2, \n## ## TrEMBL data if reviewed == 3\n## only reviewed = 2 is relevant for this analysis\nreviewed = 2\n## ## Distinguish between isoforms or use only generic Uniprot IDs: TRUE / FALSE?\n## only isoforms = FALSE is relevant for this analysis\nisoforms = FALSE\n\ndate = Sys.Date()\n## Please specify the date for which you want to perform analysis (if not today)\ndate = as.Date(\"2016-12-01\")\n##============================================================================##\n\nsource(\"SPECIES_NAME_TO_ID.R\")\nlibrary(dplyr)\n#for (r in reviewed) {\n#  for (i in isoforms) {\n#    for (n in SPECIES_NAME) {\nr = reviewed\ni = isoforms\nn = SPECIES_NAME\n     ##============================================================================##\n      ## querying Uniprot for the list of proteins (only mapped to Uniprot)\n      ## downolading length, mass, SNPs, isoforms, annotation score, existence attribute\n      SPECIES_IDs = SPECIES_NAME_TO_ID(n)\n      SPECIES_ID = SPECIES_IDs$SPECIES_ID\n      ## reading logic table and getting list of proteins\n      if(SPECIES_NAME != \"strain K12\"){\n      filename_vs_3 = paste(\"./analysis/\",\"proteome_vs_interactome_vs_BioGRID_f_\", SPECIES_ID,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")}\n      if(SPECIES_NAME == \"strain K12\"){\n      filename_vs_3 = paste(\"./analysis/\",\"proteome_vs_interactome_f_\", SPECIES_ID,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")}\n      biogrid_from_mentha_vs_proteome_vs_imex_f = as.data.frame(read.delim(filename_vs_3, stringsAsFactors = F))\n      IDs = dplyr::filter(biogrid_from_mentha_vs_proteome_vs_imex_f, whole_proteome_Uniprot==1)%>% dplyr::select(whole_proteome_IDs)\n      filename_perl = paste0(\"./Data/IDs_for_PERL_\",date,\".txt\")\n      filename_out_of_perl = paste0(\"./Data/Swissprot_list_from_proteome_vs_interactome_vs_BioGRID_f_\", SPECIES_ID,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\"\")\n      file.create(filename_out_of_perl)\n      write(IDs$whole_proteome_IDs, file = filename_perl)\n      \n      ## querying the list of proteins\n      # system(\"./scripts/up_query.pl <YOUR INPUT FILE HERE> > <YOUR OUTPUT FILE HERE>\")\n      #system(paste0(\"perl ./scripts/up_query.pl \",filename_perl,\" > \", filename_out_of_perl))\n      #uniprot_query = read.delim(filename_out_of_perl, header = F, stringsAsFactors = F)\n      #str(uniprot_query,1)\n      source(\"download_whole_proteome.R\")\n      whole_proteome_query = download_whole_proteome(SPECIES_ID, date = \"2016-12-14\")\n      uniprot_query = dplyr::filter(whole_proteome_query, Status == \"reviewed\")\n      #system.time({\n      #uniprot_query = data.frame()\n      #for (id in 1:length(IDs)) {\n      #    url = paste0(\"http://www.uniprot.org/uniprot/?query=id:\",IDs[id],\"&format=tab&columns=id,reviewed,length,organism,organism-id,mass,database(dbSNP),comment(ALTERNATIVE%20PRODUCTS),annotation%20score,existence,protein%20names\")\n      #    url = paste0(\"http://www.uniprot.org/uniprot/?query=id:\",IDs[id],\"&format=tab&columns=id,reviewed,length,organism,organism-id,mass,annotation%20score,existence\")\n      #              uniprot_query_temp = UniProtLIST = as.data.frame(read.delim(url,stringsAsFactors = F, quote = \"\"))\n      #    uniprot_query = rbind(uniprot_query, uniprot_query_temp)\n      #}\n      #})\n      ##============================================================================##\n      ## merging information from Uniprot to the logic table\n      proteome_vs_imex_details_f = merge(filter(biogrid_from_mentha_vs_proteome_vs_imex_f, whole_proteome_Uniprot==1), \n                                         uniprot_query, \n                                         by.x = \"whole_proteome_IDs\",\n                                         by.y = \"Entry\")\n      proteome_vs_imex_details_f$Mass = gsub(\",\",\"\",proteome_vs_imex_details_f$Mass)\n      proteome_vs_imex_details_f$Mass = as.numeric(proteome_vs_imex_details_f$Mass)\n      ## creating a factor variable for presence_in_Uniprot.presence_in_IMEx (1_0/1_1)\n      proteome_vs_imex_details_f[,length(proteome_vs_imex_details_f)+1] = interaction(proteome_vs_imex_details_f$whole_proteome_Uniprot, proteome_vs_imex_details_f$IMEx, sep = \"_\")\n      colnames(proteome_vs_imex_details_f)[length(proteome_vs_imex_details_f)] = paste0(colnames(proteome_vs_imex_details_f)[2], \"_\",\"IMEx\")\n      levels(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx) = c(\"SwissProt_not_IMEX\", \"SwissProt_and_IMEX\")\n      ##============================================================================##\n      ## saving combined logic table + protein properties from Uniprot\n      filename_vs_2 = paste(\"./analysis/\",\"proteome_vs_interactome_protein_properties_f_\", n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")\n      write.table(proteome_vs_imex_details_f,filename_vs_2,col.names=T,row.names=F,sep=\"\\t\",quote=F)\n      ##============================================================================##\n      ## Analysis\n      # read the saved table\n      filename_vs_2 = paste(\"./analysis/\",\"proteome_vs_interactome_protein_properties_f_\", n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")\n      proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=\"\"))\n      proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)\n      ## the distribution of mass\n            ## plotting the distribution of mass\n      library(ggplot2)\n      ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_density()+ scale_x_log10()\n      ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) + scale_x_log10() + geom_histogram(position = \"identity\", bins = 50)\n      ## removing olfactory receptors:\n      proteome_vs_imex_details_f_minus_odor = proteome_vs_imex_details_f[-grep(\"Odor\", proteome_vs_imex_details_f$Protein.names),]\n      proteome_vs_imex_details_f_minus_odor_olf = proteome_vs_imex_details_f_minus_odor[-grep(\"Olfactory\", proteome_vs_imex_details_f$Protein.names),]\n      ## density without olfactory receptors:\n      ggplot(proteome_vs_imex_details_f_minus_odor_olf, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_density()+ scale_x_log10()\n      # protein mass vs Protein.existence status\n      # ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = Protein.existence, alpha =0.5)) +geom_density() + facet_wrap(~whole_proteome_Uniprot_IMEx) + scale_x_log10()\n      # ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = Protein.existence, alpha =0.5)) +geom_histogram(position = \"identity\", bins = 50) + facet_wrap(~whole_proteome_Uniprot_IMEx) + scale_x_log10()\n      # ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_density() + facet_wrap(~Protein.existence) + scale_x_log10()\n      ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_histogram(position = \"identity\", bins = 50) + facet_wrap(~Protein.existence) + scale_x_log10()\n            ## testing the difference in protein mass distributions\n            ##of proteins absent/present in IMEx using Wilcox rank test\n      SwissProt_not_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx==\"SwissProt_not_IMEX\"]\n      SwissProt_and_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx==\"SwissProt_and_IMEX\"]\n      wilcox.test.r = wilcox.test(SwissProt_not_IMEX, SwissProt_and_IMEX, conf.int = T)\n      wilcox.test.r\n            ## is the distibution of mass or log(mass) normal?\n      library(rafalib)\n      mypar(2,2)\n      qqnorm(log10(SwissProt_not_IMEX), main = \"SwissProt_not_IMEX, log(protein mass)\")\n      qqline(log10(SwissProt_not_IMEX))\n      qqnorm(log10(SwissProt_and_IMEX), main = \"SwissProt_and_IMEX, log(protein mass)\")\n      qqline(log10(SwissProt_and_IMEX))\n      qqnorm((SwissProt_not_IMEX), main = \"SwissProt_not_IMEX, protein mass\")\n      qqline((SwissProt_not_IMEX))\n      qqnorm((SwissProt_and_IMEX), main = \"SwissProt_and_IMEX, protein mass\")\n      qqline((SwissProt_and_IMEX))\n      \n      mean(log10(SwissProt_not_IMEX))\n      popsd(log10(SwissProt_not_IMEX))\n      median(log10(SwissProt_not_IMEX))\n      mad(log10(SwissProt_not_IMEX))\n            ## it indeed is\n      \n            ## Monte-Carlo simulation\n            ## is there a significant difference in protein mass?\n      # code can be used for things other than mass\n      set.seed(1)\n      # sample size\n      Ns <- seq(5, 350, 20)\n      lengthNs = length(Ns)\n      # number of simulations\n      B = 100\n      # function which takes samples and does Wilcox test\n      simulation = function(n){  \n        wilcox.test.rr = matrix(0, 1, 3)\n        x = sample(SwissProt_not_IMEX, n)\n        y = sample(SwissProt_and_IMEX, n)\n        wilcox.test.rr[1,c(1,2)] = wilcox.test(x, y, conf.int = T)$conf.int\n        wilcox.test.rr[1,3] = wilcox.test(x, y, conf.int = T)$p.value\n        return(wilcox.test.rr)\n      }\n      wilcox.test.rr = matrix(0, lengthNs, 3)\n      # looping Monte-Carlo over samples sizes ]\n      for (n in 1:lengthNs) {\n        z =replicate(B, simulation(Ns[n]), simplify = T)\n        wilcox.test.rr[n,] = rowMeans(z)\n      }\n      xx =cbind(wilcox.test.rr, Ns)\n      plot(xx[,4], xx[,3], ylab = \"p-val\", xlab = \"N\")\n      ##============================================================================##\n      ## Analysis\n      ## the distribution of variants\n      \n      ## how to count variants\n      variants= numeric()\n      source(\"variant_id_extractor_Uniprot.R\")\n      for (i in 1:nrow(proteome_vs_imex_details_f)) {\n        variants[i] = variant_id_extractor_Uniprot(proteome_vs_imex_details_f[i,])\n      }\n      ## adding variant number to the logic table, 1 is added to make counting 0s \n      ## in histogram possible\n      proteome_vs_imex_details_f.var = cbind(proteome_vs_imex_details_f,variants)\n      proteome_vs_imex_details_f.var = cbind(proteome_vs_imex_details_f,variants_1 = variants+1)\n      ## plotting the histogram of variants\n      ggplot(proteome_vs_imex_details_f.var, aes(x = variants_1, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_histogram(position = \"identity\", bins = 100) +xlim(0,50) +ylim(0,5800)\n      ggplot(proteome_vs_imex_details_f.var, aes(x = variants_1, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_density() +xlim(0,50)\n      table(proteome_vs_imex_details_f.var$variants_1)\n      ## testing the difference in the natural variant distribution using Wilcox rank test\n      SwissProt_not_IMEX.var = proteome_vs_imex_details_f.var$variants_1[proteome_vs_imex_details_f.var$whole_proteome_Uniprot_IMEx==\"1.0\"]\n      SwissProt_and_IMEX.var = proteome_vs_imex_details_f.var$variants_1[proteome_vs_imex_details_f.var$whole_proteome_Uniprot_IMEx==\"1.1\"]\n      wilcox.test(SwissProt_not_IMEX.var, SwissProt_and_IMEX.var)\n      ##============================================================================##\n      ## Analysis\n      ## uniprot annotation score (1-5)\n      proteome_vs_imex_details_f.var$Annotation = as.numeric(substr(proteome_vs_imex_details_f.var$Annotation, 1,1))\n      ggplot(proteome_vs_imex_details_f.var, aes(x = Annotation, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_histogram(position = \"identity\", bins = 100) +xlim(0,6)# +ylim(0,5800)\n      ## testing the difference in the annotation score distribution using Wilcox rank test\n      SwissProt_not_IMEX.ann = proteome_vs_imex_details_f.var$Annotation[proteome_vs_imex_details_f.var$whole_proteome_Uniprot_IMEx==\"1.0\"]\n      SwissProt_and_IMEX.ann = proteome_vs_imex_details_f.var$Annotation[proteome_vs_imex_details_f.var$whole_proteome_Uniprot_IMEx==\"1.1\"]\n      wilcox.test(SwissProt_not_IMEX.ann, SwissProt_and_IMEX.ann)\n      ##============================================================================##\n#    }\n#  }\n#}\n\n##============================================================================##\n## disordered proteins\n      ## reading downloaded data (from blob:http://www.disprot.org/90b4c112-691e-4fbd-9895-cf60dc9cc68b)\nfilename_dis = \"./Data/disordered_proteins_2016-12-06\"\ntable(disordered_proteins$organism) = read.csv(filename_dis, stringsAsFactors = F)\nSpecies_ids_disorder = c(\"Mouse\", \"Human\", \"Baker's yeast\", \"Escherichia coli (strain K12)\")\nSPECIES_NAMEs = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\")\nSpecies_id_disorder = Species_ids_disorder[SPECIES_NAME ==SPECIES_NAMEs]\ndisordered_proteins_uniprotac = disordered_proteins$uniprot_accession[disordered_proteins$organism==Species_id_disorder]\n## Saving uniprot accessions to check if they map - they indeed do\nwrite(disordered_proteins_uniprotac, file = \"disordered_proteins_2016-12-06_UniprotAC.txt\")\n## removing isoform ids\ndisordered_proteins_uniprotac.noisof =  data.frame(Entry = isoform_id_all_remover(disordered_proteins_uniprotac), disordered_proteins = 1)\n## merging disordered protein list to the logic table\nproteome_vs_imex_details_disordered_f = merge(proteome_vs_imex_details_f.var, \n                                   disordered_proteins_uniprotac.noisof, \n                                   by.x = \"whole_proteome_IDs\",\n                                   by.y = \"Entry\", all = T)\nproteome_vs_imex_details_disordered_f[is.na(proteome_vs_imex_details_disordered_f)] = 0\n\nproteome_vs_imex_details_disordered_f$IMEx = proteome_vs_imex_details_disordered_f\n\n\n## draft code\n##============================================================================##\n#url = \"http://www.uniprot.org/uniprot/?query=id:Q5S007&format=tab&columns=id,reviewed,length,organism,organism-id,mass,database(dbSNP),comment(ALTERNATIVE%20PRODUCTS),annotation%20score,existence\"\n#UniProtLIST_filename <- paste(\"./Data/\",\"Reference_proteome_speciesID\",\"5364_\",\"_\",\"_\", sep = \"\")\n#downloader::download(url, destfile = UniProtLIST_filename) \n#print(\"Querying Uniprot for the reference proteome...loaded from uniprot\")\n\n## read the reference proteome, some columns may include quotes\n#UniProtLIST = as.data.frame(read.delim(UniProtLIST_filename,stringsAsFactors = F, quote = \"\"))\n#UniProtLIST = as.data.frame(read.delim(url,stringsAsFactors = F, quote = \"\"))",
    "created" : 1481112883615.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3038247141",
    "id" : "B520BC91",
    "lastKnownWriteTime" : 1481741466,
    "last_content_update" : 1481741466344,
    "path" : "~/Desktop/VItalii_EBI/imex_vs_uniprot/swissprot_vs_imex_protein_properties.R",
    "project_path" : "swissprot_vs_imex_protein_properties.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}