{
    "collab_server" : "",
    "contents" : "intact_vs_uniprot = function(SPECIES_NAME, reviewed, isoforms, missing_proteins = TRUE, date = Sys.Date()) {\n  ## The function below downloads reference proteome list from Uniprot, saves it,\n  ## finds and returns Proteome_ID and SPECIES_ID for given SPECIES_NAME\n\n  source(\"SPECIES_NAME_TO_ID.R\")\n  SPECIES_IDs = SPECIES_NAME_TO_ID(SPECIES_NAME)\n  \n  SPECIES_ID = SPECIES_IDs$SPECIES_ID;\n  Proteome_ID = SPECIES_IDs$Proteome_ID;\n  \n  ## type in exact database names (the list below is default for the function)\n  databases <- c(\"IntAct\", \"MINT\", \"bhf-ucl\", \"MPIDB\", \"MatrixDB\", \n                 \"HPIDb\",\"I2D-IMEx\",\"InnateDB-IMEx\", \"MolCon\", \"UniProt\", \"MBInfo\")\n  \n  ## Query PSICQUIC for interactions, get MI-TAB-2.5, save, return\n  source(\"query_PSICQUIC_for_interactions.R\")\n  all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID, SPECIES_NAME = SPECIES_NAME, databases = databases, date)\n  if(nrow(all_interactions) > 0){\n  \n  ## Download the reference proteome from Uniprot for SPECIES_ID, gunzip, read\n  #source(\"download_reference_proteome.R\")\n  #reference_proteome_ftp = download_reference_proteome(SPECIES_ID, Proteome_ID)\n  \n  ## Query Uniprot for the reference proteome for SPECIES_ID\n  source(\"download_reference_proteome_q.R\")\n  reference_proteome_query = download_reference_proteome_q(SPECIES_ID, Proteome_ID, date)\n  \n  ## Use only Swissprot data if reviewed == 2 \n  if(reviewed == 2) {\n    reference_proteome_query = dplyr::filter(reference_proteome_query, Status == \"reviewed\")\n  }\n  ## Use only TrEMBL data if reviewed == 3 \n  if(reviewed == 3) {\n    reference_proteome_query = dplyr::filter(reference_proteome_query, Status == \"unreviewed\")\n  }\n  if(nrow(reference_proteome_query) > 0){  \n  \n  ## Query Uniprot for the whole proteome for SPECIES_ID\n  source(\"download_whole_proteome.R\")\n  whole_proteome_query = download_whole_proteome(SPECIES_ID, date)\n  \n  ## Use only Swissprot data if reviewed == 2\n  if(reviewed == 2) {\n    whole_proteome_query = dplyr::filter(whole_proteome_query, Status == \"reviewed\")\n  }\n  ## Use only TrEMBL data if reviewed == 3\n  if(reviewed == 3) {\n    whole_proteome_query = dplyr::filter(whole_proteome_query, Status == \"unreviewed\")\n  }\n  \n  if(nrow(whole_proteome_query) > 0){\n  \n  #============================================================================#\n  ## cleaning data\n  \n  ## In case isoform argument to the function is TRUE  - to extract isoform IDs \n  ## from queried proteomes and merge with generic IDs\n  if(isoforms == TRUE){\n  source(\"isoform_id_extractor_Uniprot.R\")\n  reference_proteome_isoforms = isoform_id_extractor_Uniprot(reference_proteome_query)\n  reference_proteome = as.character(c(reference_proteome_isoforms, reference_proteome_query$Entry))\n  whole_proteome_isoforms = isoform_id_extractor_Uniprot(whole_proteome_query)\n  whole_proteome = as.character(c(whole_proteome_isoforms, whole_proteome_query$Entry))\n  }\n  \n  ## In case isoform argument to the function is FALSE  - to extract generic IDs \n  ## from queried proteomes\n  if(isoforms == FALSE){\n    reference_proteome = reference_proteome_query$Entry\n    whole_proteome = whole_proteome_query$Entry\n  }\n  \n  ## the function extracts interactor IDs from interaction databases\n  source(\"interactions_to_interactors.R\")\n  all_interactors = interactions_to_interactors(all_interactions)\n  \n  ## filter interactor for uniprotkb only indentifiers \n  ## filter for SPECIES_ID only proteins\n  source(\"uniprotkb_and_SPECIES_ID_interactor_selector.R\")\n  all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(all_interactors, SPECIES_ID)\n  \n  ## In case isoform argument to the function is TRUE - REMOVE \"-1\" XXXXXX-1 from IDs\n  if(isoforms == TRUE){\n    source(\"isoform_id_1_remover.R\")\n    all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_1_remover(all_interactors_SPECIES_ID_only$interactor_IDs)\n    reference_proteome = isoform_id_1_remover(reference_proteome)\n    whole_proteome = isoform_id_1_remover(whole_proteome)\n  }\n  \n  ## In case isoform argument to the function is FALSE - REMOVE All isoform IDs (XXXXXX-X+) from IDs\n  if(isoforms == FALSE){\n    source(\"isoform_id_all_remover.R\")\n    all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(all_interactors_SPECIES_ID_only$interactor_IDs)\n  }\n  \n  ## select unique IDs only\n  reference_proteome_unique = data.frame(Reference_proteome_IDs = unique(reference_proteome),stringsAsFactors = F)\n  whole_proteome_unique = data.frame(whole_proteome_IDs = unique(whole_proteome),stringsAsFactors = F)\n  all_interactors_SPECIES_ID_only = unique(all_interactors_SPECIES_ID_only)\n  \n  ## unique interactors - excluding overlap between databases\n  unique_interactors_SPECIES_ID_only = unique(all_interactors_SPECIES_ID_only[c(\"interactor_IDs\",\"interactor_IDs_databases\", \"interactor_SPECIES_ID\")])\n  \n  ## Print what have been loaded\n  source(\"summary_intact_vs_uniprot1.R\")\n  summary_intact_vs_uniprot1 = summary_intact_vs_uniprot1(whole_proteome_unique, reference_proteome_unique, reference_proteome_ftp, all_interactors_SPECIES_ID_only)\n  \n  #============================================================================#\n  ## proteins missing protein evidence\n  library(dplyr)\n  if(missing_proteins == FALSE){\n  reference_proteome_existence = data.frame(Entry = reference_proteome_query$Entry, Protein.existence = reference_proteome_query$Protein.existence,stringsAsFactors = F)\n  reference_proteome_existence = filter(reference_proteome_existence, Protein.existence == \"Evidence at protein level\")\n  whole_proteome_existence = data.frame(Entry = whole_proteome_query$Entry, Protein.existence = whole_proteome_query$Protein.existence,stringsAsFactors = F)\n  whole_proteome_existence = filter(whole_proteome_existence, Protein.existence == \"Evidence at protein level\")\n  }\n  if(missing_proteins == TRUE){\n    reference_proteome_existence = data.frame(Entry = reference_proteome_query$Entry, Protein.existence = reference_proteome_query$Protein.existence,stringsAsFactors = F)\n    reference_proteome_existence = filter(reference_proteome_existence, Protein.existence != \"Evidence at protein level\")\n    whole_proteome_existence = data.frame(Entry = whole_proteome_query$Entry, Protein.existence = whole_proteome_query$Protein.existence,stringsAsFactors = F)\n    whole_proteome_existence = filter(whole_proteome_existence, Protein.existence != \"Evidence at protein level\")\n  }\n  \n  #============================================================================#\n  ## Data transformations\n  #============================================================================#\n  ## take list of proteins in databases (IMEx and Uniprot) and convert into the logic table\n  ### logic table has a 1 when protein(by rows) is present in a database (by columns)\n  ### logic table has a 0 when protein(by rows) is absent in a database (by columns)\n  source(\"proteome_vs_interactome_logic_table_generator.R\")\n  proteome_vs_interactome_f = proteome_vs_interactome_logic_table_generator(reference_proteome_unique, whole_proteome_unique, all_interactors_SPECIES_ID_only, unique_interactors_SPECIES_ID_only)\n  #============================================================================#\n  ## adding protein existence to the logic table\n  if(nrow(reference_proteome_existence)>0){\n  reference_proteome_prot.exist = data.frame(Entry = reference_proteome_existence$Entry, ref.protein_evidence = 1,stringsAsFactors = F)\n  if(missing_proteins == FALSE){\n    colnames(reference_proteome_prot.exist)[2] = \"protein_evidence\"\n  }\n  if(missing_proteins == TRUE){\n    colnames(reference_proteome_prot.exist)[2] = \"missing_protein_evidence\"\n  }\n  ## Add reference_proteome - protein evidence exists - to the logic table\n  reference_proteome_prot.exist.f = merge(x = proteome_vs_interactome_f, \n                                          y = reference_proteome_prot.exist, by.x=\"whole_proteome_IDs\", \n                                          by.y=\"Entry\", \n                                          all.x = T, all.y = T)\n  }\n  if(nrow(whole_proteome_existence)>0){\n  whole_proteome_prot.exist = data.frame(Entry = whole_proteome_existence$Entry, protein_evidence = 1,stringsAsFactors = F)\n  if(missing_proteins == FALSE){\n    colnames(whole_proteome_prot.exist)[2] = \"protein_evidence\"\n  }\n  if(missing_proteins == TRUE){\n    colnames(whole_proteome_prot.exist)[2] = \"missing_protein_evidence\"\n  }\n  ## Add whole_proteome - protein evidence exists - column of ones\n  proteome_vs_interactome_f = merge(x = proteome_vs_interactome_f, \n                                  y = whole_proteome_prot.exist, by.x=\"whole_proteome_IDs\", \n                                  by.y=\"Entry\", \n                                  all.x = T, all.y = T)\n  }\n  ## substitute NAs for zeros in whole proteome-containing data.frame\n  proteome_vs_interactome_f[is.na(proteome_vs_interactome_f)] <- 0\n  #============================================================================#\n  ## Saving logic table\n  filename_vs_2 = paste(\"./analysis/\",\"proteome_vs_interactome_f_\", SPECIES_ID,\"_reviewed_\",reviewed,\"_isoforms_\",isoforms,\"_\", date,\".txt\", sep = \"\")\n  write.table(proteome_vs_interactome_f,filename_vs_2,col.names=T,row.names=F,sep=\"\\t\",quote=F)\n  \n  \n  #============================================================================#\n  ### Summaries\n  \n  ## Summary of how many interactors have non-Uniprot identifiers \n  ## and how many interactors come from the species other than queried\n  source(\"uniprotkb_and_SPECIES_ID_interactor_summary.R\")\n  uniprotkb_and_SPECIES_ID_interactor_summary = uniprotkb_and_SPECIES_ID_interactor_summary(all_interactors, SPECIES_ID, SPECIES_NAME)\n  filename = paste(\"./summaries/\",\"uniprotKB_IDs_and_\",SPECIES_NAME,\"_interactors_summary\", \"_isoforms_\",isoforms,\"_\", date,\".txt\", sep = \"\")\n  write.table(uniprotkb_and_SPECIES_ID_interactor_summary,filename,col.names=T,row.names=F,sep=\"\\t\",quote=F)\n  \n\n  print(uniprotkb_and_SPECIES_ID_interactor_summary)\n  return(SPECIES_NAME)\n  }\n  }\n  }\n}",
    "created" : 1481107357975.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2981929886",
    "id" : "DEF77762",
    "lastKnownWriteTime" : 1480690019,
    "last_content_update" : 1480690019,
    "path" : "~/Desktop/VItalii_EBI/imex_vs_uniprot/intact_vs_uniprot.R",
    "project_path" : "intact_vs_uniprot.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}