{
    "collab_server" : "",
    "contents" : "## swissprot_vs_imex_interaction_properties\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\")\n\nSPECIES_NAME = \"Homo sapiens\"\n\n## ## Use all Uniprot if reviewed == 1, only Swissprot data if reviewed == 2, \n## ## TrEMBL data if reviewed == 3\n## only reviewed = 2 is relevant for this analysis\nreviewed = 2\n## ## Distinguish between isoforms or use only generic Uniprot IDs: TRUE / FALSE?\n## only isoforms = FALSE is relevant for this analysis\nisoforms = FALSE\n\ndate = Sys.Date()\n## Please specify the date for which you want to perform analysis (if not today)\ndate = as.Date(\"2016-12-01\")\nprint(date)\n##============================================================================##\n\nsource(\"SPECIES_NAME_TO_ID.R\")\nlibrary(dplyr)\n#for (r in reviewed) {\n#  for (i in isoforms) {\n#    for (n in SPECIES_NAME) {\nr = reviewed\ni = isoforms\nn = SPECIES_NAME\n##============================================================================##\nSPECIES_IDs = SPECIES_NAME_TO_ID(n)\nSPECIES_ID = SPECIES_IDs$SPECIES_ID\n##============================================================================##\n# interations from PSICQUIC\n## detmethod:MI:0232 - transcriptional complementation assay, includes different two-hybrids\n# http://www.ebi.ac.uk/ols/ontologies/mi/terms?iri=http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FMI_0232\n## detmethod:MI:0090 - protein complementation assay, includes transcriptional \n# complementation assay and bimolecular fluorescence complementation, enzyme complementations\n# http://www.ebi.ac.uk/ols/ontologies/mi/terms?iri=http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FMI_0090\n\n## both detmethod and pmethod are required for specifying AP-MS\n## detmethod:MI:0004 - affinity chromatography technology, co-IP and pulldowns\n# http://www.ebi.ac.uk/ols/ontologies/mi/terms?iri=http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FMI_0004\n## pmethod:MI:0433 - partial identification of protein sequence\n# http://www.ebi.ac.uk/ols/ontologies/mi/terms?iri=http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FMI_0433\n\n## type in exact database names (the list below is default for the function)\ndatabases <- c(\"IntAct\", \"MINT\", \"bhf-ucl\", \"MPIDB\", \"MatrixDB\", \n               \"HPIDb\",\"I2D-IMEx\",\"InnateDB-IMEx\", \"MolCon\", \"UniProt\", \"MBInfo\")\nsource(\"query_PSICQUIC_for_interactions.R\")\ntwohybrids_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID, \n                                                   SPECIES_NAME = SPECIES_NAME, \n                                                   databases = databases, date,\n                                                   detmethod = \"transcriptional complementation assay\")\ncomplementation_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID, \n                                                              SPECIES_NAME = SPECIES_NAME, \n                                                              databases = databases, date,\n                                                              detmethod = \"protein complementation assay\")\nap_ms_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID, \n                                                         SPECIES_NAME = SPECIES_NAME, \n                                                         databases = databases, date,\n                                                         detmethod = \"affinity chromatography technology\",\n                                                         pmethod = \"partial identification of protein sequence\")\n##============================================================================##\n## Transforming data\n## the function extracts interactor IDs from interactions\nsource(\"interactions_to_interactors.R\")\ntwohybrids_all_interactors = interactions_to_interactors(twohybrids_all_interactions)\ncomplementation_all_interactors = interactions_to_interactors(complementation_all_interactions)\nap_ms_all_interactors = interactions_to_interactors(ap_ms_all_interactions)\n\n## filter interactor for uniprotkb only indentifiers \n## filter for SPECIES_ID only proteins\nsource(\"uniprotkb_and_SPECIES_ID_interactor_selector.R\")\ntwohybrids_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(twohybrids_all_interactors, SPECIES_ID)\ncomplementation_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(complementation_all_interactors, SPECIES_ID)\nap_ms_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(ap_ms_all_interactors, SPECIES_ID)\n## In case isoform argument to the function is FALSE - REMOVE All isoform IDs (XXXXXX-X+) from IDs\nif(isoforms == FALSE){\n  source(\"isoform_id_all_remover.R\")\n  twohybrids_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(twohybrids_all_interactors_SPECIES_ID_only$interactor_IDs)\n  complementation_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(complementation_all_interactors_SPECIES_ID_only$interactor_IDs)\n  ap_ms_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(ap_ms_all_interactors_SPECIES_ID_only$interactor_IDs)\n}\n##============================================================================##\n## preparing for logic table: selecting unique and adding the column of ones\nunique_twohybrids_interactors_SPECIES_ID_only = unique(cbind(twohybrids_all_interactors_SPECIES_ID_only[c(\"interactor_IDs\")], 1))\ncolnames(unique_twohybrids_interactors_SPECIES_ID_only)[2] = \"two_hybrid\"\nunique_complementation_interactors_SPECIES_ID_only = unique(cbind(complementation_all_interactors_SPECIES_ID_only[c(\"interactor_IDs\")], 1))\ncolnames(unique_complementation_interactors_SPECIES_ID_only)[2] = \"all_protein_complementation\"\nunique_ap_ms_interactors_SPECIES_ID_only = unique(cbind(ap_ms_all_interactors_SPECIES_ID_only[c(\"interactor_IDs\")], 1))\ncolnames(unique_ap_ms_interactors_SPECIES_ID_only)[2] = \"AP_MS\"\n##============================================================================##\n## loading saved logic table from swissprot_vs_imex_protein_properties\nfilename_vs_2 = paste(\"./analysis/\",\"proteome_vs_interactome_protein_properties_f_\", n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")\nproteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=\"\"))\nproteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)\n##============================================================================##\n## merging new results to the logic table\nproteome_vs_imex_interaction_details_t1 = merge(proteome_vs_imex_details_f, \n                                   unique_twohybrids_interactors_SPECIES_ID_only, \n                                   by.x = \"whole_proteome_IDs\",\n                                   by.y = \"interactor_IDs\",\n                                   all.x = T, all.y = F)\nproteome_vs_imex_interaction_details_t2 = merge(proteome_vs_imex_interaction_details_t1, \n                                               unique_complementation_interactors_SPECIES_ID_only, \n                                               by.x = \"whole_proteome_IDs\",\n                                               by.y = \"interactor_IDs\",\n                                               all.x = T, all.y = F)\nproteome_vs_imex_interaction_details_f = merge(proteome_vs_imex_interaction_details_t2, \n                                               unique_ap_ms_interactors_SPECIES_ID_only, \n                                                by.x = \"whole_proteome_IDs\",\n                                                by.y = \"interactor_IDs\",\n                                                all.x = T, all.y = F)\nproteome_vs_imex_interaction_details_f[is.na(proteome_vs_imex_interaction_details_f)] = 0\n##============================================================================##\n## adding some variables\nproteome_vs_imex_interaction_details_f[,length(proteome_vs_imex_interaction_details_f)+1] = interaction(proteome_vs_imex_interaction_details_f$two_hybrid, proteome_vs_imex_interaction_details_f$AP_MS, sep = \"_\")\ncolnames(proteome_vs_imex_interaction_details_f)[length(proteome_vs_imex_interaction_details_f)] = paste0(\"two_hybrid\", \"_vs_\",\"AP_MS\")\nlevels(proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS) = c(\"not_two_hybrid_and_not_AP_MS\", \"two_hybrid_not_AP_MS\",\"not_two_hybrid_but_AP_MS\", \"two_hybrid_and_AP_MS\")\nproteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS = as.character(proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS)\nproteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS[proteome_vs_imex_interaction_details_f$IMEx!=1] = \"not_in_IMEx\"\n\n##============================================================================##\n## saving combined logic table + protein properties from Uniprot\nfilename = paste(\"./analysis/\",\"proteome_vs_interactome_interaction_properties_f_\", n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")\nwrite.table(proteome_vs_imex_interaction_details_f,filename,col.names=T,row.names=F,sep=\"\\t\",quote=F)\n##============================================================================##\n## Analysis\n# read the saved table\nfilename = paste(\"./analysis/\",\"proteome_vs_interactome_interaction_properties_f_\", n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")\nproteome_vs_imex_interaction_details_f = as.data.frame(read.delim(filename, header = T, stringsAsFactors = F,quote=\"\"))\nproteome_vs_imex_interaction_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_interaction_details_f$whole_proteome_Uniprot_IMEx, ordered =F)\nproteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS = factor(proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS, ordered =F)\n\n## The density and the histogram of the protein mass (overlay for different levels)\nlibrary(ggplot2)\nggplot(proteome_vs_imex_interaction_details_f, aes(x = Mass, color =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +geom_density(alpha =0.2) + scale_x_log10() #+facet_grid(two_hybrid_vs_AP_MS~Organism)\nggplot(proteome_vs_imex_interaction_details_f, aes(x = Mass,color = two_hybrid_vs_AP_MS)) + scale_x_log10() + geom_histogram(position = \"identity\", bins = 50,alpha =0.1) #+facet_grid(two_hybrid_vs_AP_MS~Organism)\n\n## Vioilin plot of the protein mass\nlibrary(dplyr)\nlibrary(scales) \n## adding two_hybrid and AP_MS levels to show non-combinatory relationship (not \n## excluding proteins present in both)\ntwo_hybrid = filter(proteome_vs_imex_interaction_details_f, two_hybrid == 1)\ntwo_hybrid$two_hybrid_vs_AP_MS = \"two_hybrid\"\nAP_MS = filter(proteome_vs_imex_interaction_details_f, AP_MS == 1)\nAP_MS$two_hybrid_vs_AP_MS = \"AP_MS\"\nfor_plot = rbind(proteome_vs_imex_interaction_details_f, two_hybrid, AP_MS)\nfor_plot$two_hybrid_vs_AP_MS = factor(for_plot$two_hybrid_vs_AP_MS, ordered = F)\nlevels(for_plot$two_hybrid_vs_AP_MS)\n## Calculating protein median protein mass for each group\nyy = split(for_plot, for_plot$two_hybrid_vs_AP_MS)\nMass_median = sapply(yy, function(x){median(log10(x$Mass))})\n## Violin plot\nggplot(for_plot, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +\n  geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = \"count\", alpha =0.7) +\n  scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                labels = trans_format(\"log10\", math_format(10^.x))) +\n  geom_abline(slope = 0, intercept = Mass_median, alpha =0.1) +\n  ylab(\"Mass, Da\") #+facet_grid(two_hybrid_vs_AP_MS~Organism)\n\n",
    "created" : 1481191236112.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4184971134",
    "id" : "A1C51852",
    "lastKnownWriteTime" : 1481625123,
    "last_content_update" : 1481625123551,
    "path" : "~/Desktop/VItalii_EBI/imex_vs_uniprot/swissprot_vs_imex_interaction_properties.R",
    "project_path" : "swissprot_vs_imex_interaction_properties.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}