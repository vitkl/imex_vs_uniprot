{
    "collab_server" : "",
    "contents" : "--- \ntitle: Characterisation of model species interactome available from \n  primary molecular interaction databases \nauthor: \"Vitalii Kleshchevnikov\" \ndate: \"21 December 2016\" \noutput: html_document \n--- \n \n```{r setup, include=FALSE} \nknitr::opts_chunk$set(echo = FALSE, results = \"hide\", warning = FALSE, message = FALSE, fig.keep = \"all\") \n``` \n\nThe report was published on `r Sys.Date()`\n\n# Outline\n\n1. Abstract\n2. Introduction\n3. Methods\n4. Results and discussion\n    - how available interactome covers the proteome\n    - IMEx(IntAct) vs Biogrid\n    - which proteins are missing\n    - do intrinsically disordered proteins have more interactions?\n    - interaction detection biases\n    - proteins well researched but not present in IntAct\n5. Conclusion  \n\n# Abstract\n\n\n# Introduction \n \nThe structure and the function of the cell arise from interactions between molecules inside and outside it. Though proteins, nucleic acids, lipids and small molecules can all form important interactions, studies and literature focus mainly on interactions between proteins and other macromolecules. We can discover and study these molecular interactions using a number of experimental and computational techniques. This study focuses on molecular interactions identified in the experimental setting, most of which are represented in the literature and databases by protein-protein interactions (also protein-DNA interactions obtained, for example, by ChIP-Seq, but those are traditionally incorporated into genomic databases).  \n \nDue to the nature of detection methods used, interactions come in two flavors: binary interactions and associations. Binary interactions are the interactions between two components, for example, two specific proteins, some detection methods (e.g. two-hybrid) identify those. To understand associations, we need to imagine we know proteins A, B and C constitute a complex and interact as shown in a figure 1 A. When we conduct an experiment, we choose the bait (the molecule experimentally treated to capture its interacting partners - called preys) to be protein A, and by detection method (e.g. affinity-purification mass spectrometry) we get both protein B and protein C detected as preys. Next step is to translate bait-prey relationship into a model of reality like the one shown in the figure 1 A. We call interactions between A-B and A-C associations because we cannot infer the true relationship between A, B, and C from this experiment design. In the other words, establishing that proteins are in direct physical contact is really challenging. However, to represent associations in a tabular format with each row corresponding to one interaction (e.g. A-B) we need to expand those. Two ways are commonly used to expand interactions, hub and spoke expansion, both shown in the figure 1 B. \n\n#### Defining interactome\n\nThe aggregation of all components and their interactions into a single network result in what we call interactome, the whole of all molecular interactions. You can also look into the subset of this network, for example, you can select only proteins, only those proteins that are expressed in the brain, and only the interactions between this protein identified experimentally in the brain cells. This example reflects the complexity and the diversity of the interactome - which is what you would expect from a system underlying the complexity and the diversity of the cell types, cellular behaviors, and functions. For the same reason, only by studying these interactions and how they change in specific cell types and under specific circumstances in combination with the functional analysis we can decipher cellular regulatory networks. The ultimate goal of the research in the field would be to capture all physical interactions and thoroughly describe them while avoiding false discoveries. \n\n#### Experimental approaches for discovering interactions\n\nExperimental protein interaction detection methods can be classified into 3 main categories based on the evidence they provide and whether they can be used in a high-throughput manner:\nThe first category is formed by methods using affinity purification of the bait and all the prey associated with it. Following that, preys can be identified using western-blotting and specific antibodies or using mass-spectrometry, which can be done in a high-throughput manner [Mann, ]. The main advantage of these methods is the ability to quantitatively characterize interactions [Mann, ] and capture many prey proteins per bait - the latter, however, presents the disadvantage of dealing with associations. The main disadvantage of these techniques is that for the reliable result it requires all interacting proteins to be soluble []. \nThe second category is formed by protein complementation techniques which include two-hybrid (transcription factor complementation), the most widely used interaction detection method (including high-throughput experiments). In this method, pairs of proteins are tested for interaction and therefore all discovered interactions are binary (the main advantage of this method). Classic implementation of two-hybrid requires proteins to be soluble as well [], however, two-hybrid for membrane proteins was also developed []. The main disadvantage of two-hybrid methods are that they allow only qualitative characterisation of interactions [], are usually performed in yeast (thus, have a lower sensitivity) and are highly prone to false-positive results [].\nFinal category consists of methods based on the structure of the protein complex. They can provide valuable information on how exactly physical interaction occurs but as for now are extremely labor-intensive and will always need complementary experiments showing if the proteins actually interact in the cellular context.\n\n#### Challenges of interactomics\n\nFour big challenges substantially complicate the study of molecular interactions, especially on the whole organism scale. The first being that we don't know the true nature of underlying our experimental results (all assays provide evidence that interaction is possible and some can provide quantitative description, but all are prone to error and the problem described in the figure 1 A) which lead to the necessity of combining interaction data from multiple experiments and complex statistical evaluation of how probable the interaction is based on that data (Bayesian approach [1]) rather than receiving confident yes-or-no result from single experiment. Interaction databases make an effort to score the interactions based on supporting evidence, however, this is usually done with non-probabilistic heuristic approaches, like MI score [PMCID: PMC4316181]. \n\nThe second big challenge is the problem of \"noise\" - or false positives. Different interaction detection experiments are prone to these errors for different reasons, for example, in-vitro experiments (e.g. TAP-MS) may allow the interaction between proteins which are normally included in separate cellular compartments. Specific groups of proteins (based on their physical or chemical properties) may have a higher susceptibility to false positives, for example, intermediate filaments (e.g. nuclear lamins) have low solubility under non-denaturing conditions necessary for affinity-purification based techniques, which may lead to artifactual results. However plausible, this particular problem lacks empirical evidence and requires more investigation. A more general problem of noise will be adressed by more proteome-scale interactomics experiments (which can include enough samples to guarantee low false positive rate while still identifying interactions).\n\nThe third big challenge is that our knowledge of interactome is incomplete and arises from the fact that experimental approaches have low statistical power and often miss out some real interactions. Also, many proteins, especially for non-popular model species, were not researched for protein interactions.\n\nThe final challenge contributes to the \"incomplete interactome\" problem but is grounded in the fact that not all protein interaction discovered and published are included in protein interaction databases. In the other words, this is database curation problem. More than 100 public databases containing protein interactions are available now. These databases differ:\n- by the types of data they include (e.g. computational prediction, manual curation from experimental articles - primary, aggregated data from many primary databases - secondary),  \n- the level of detail captured from articles to describe interactions,  \n- how often and if they are updated with new data.  \nThe level of detail ranges from only mentioning the pairs of interactors and heuristic score assigned to them (STRING, updated once in 2 years) to the ones containing experiment details (detection method, bait/prey status, if available - quantitative data, experiment setup, protein variants), such as IntAct [PMCID: PMC3703241]. \nThe amounts of interaction data generated per year is growing exponentially making manual curation of all this data into primary databases a daunting task. To prioritise curation efforts and reduce redundancy between databases (to curate different data using the same standards) IMEx consortium was formed in 2012 [PMCID: PMC3703241]. IMEx-compliant databases include all big primary databases excluding only BioGRID (which curates at the lower level of detail) and not active legacy databases.\n\n#### Motivation for this study\n\nSolving some of these challenges may be easier than the others. In particular, to solve the last challenge we can prioritize curation efforts for already published interactions to cover unrepresented proteins and we can encourage authors to submit their results to the databases prior to publishing. We can also encourage research of underrepresented parts of the interactome. However, for both of those aims, we need to characterize the interactome already present in interaction databases. Specifically, to learn how available interactome covers the proteome of main model species, if there are any biases to proteins with no available interactions and if any major protein interaction detection methods exhibit any biases towards specific groups of proteins. \nThe other helpful to look at the problem is to search for underrepresented in interaction databases but in general well-researched proteins.\n\n# Aims of the study\n\n1. Find out how available interactome covers the proteome of main model species. Considering either all UniProtKB or SwissProt entries only as the proteome (canonical identifiers as well as protein isoforms). Consider all interactions from IMEx-compliant databases as interactome.  \n2. Compare the coverage of proteome by interactome from IMEx to the interactome from BioGRID (the other major primary database).\n\n3. Find out if proteins with no available interactions stand out by specific functions (Gene Ontology, GO: biological process and molecular function), cellular localization (GO), molecular mass, or protein evidence status from SwissProt\n\n4. Are proteins with high fraction of intrinsically disordered domains more likely to have interactions available and do they have more interactions (if normalized for how well-studied proteins are?\n\n4. Find out if major protein interaction detection methods (two-hybrid and AP-MS, AP-WB?) exhibit any bias towards biochemical properties of the proteins involved (mass, disordered regions, hydropathy, the fraction of charged residues)\n\n### 5. Find out if there are any proteins which are in general well researched (many associated publications or manual GO annotations) but underrepresented in IntAct (low MI score)\n5. What is the relationship between the number of interactions or MI score and the number of publicationions or GO terms per protein?\n\n6. If that is possible to measure: do intermediate filaments (or other highly insoluble proteins) really have higher rates of false-discovered interactions?\n\n# Methods - data processing and analysis\n\n### Getting proteome from UniProtKB\n\nWhole proteome (all UniProtKB) for each species was downloaded programmatically in R using UniProt rest API. SwissProt-proteome was subset from whole proteome by reviewed status column. UniProt identifies proteins by UniProtKB/AC (e.g. P04637, accession) which does not distinguish between protein isoforms. UniProt aggregates isoform information and identifiers (e.g. P04637-4) in a separate column with zero to many isoforms per each UniProtKB accession. To generate proteome list which includes protein isoforms, isoform accessions were extracted and combined with the list of generic accessions. In this analysis, protein evidence status and protein mass are only attributed to generic accessions. \n\n### Getting and transforming interactome data from IMEx databases and BioGRID\n\nInteractome from all IMEx databases was downloaded programmatically in R using PSIQUIC package from Bioconductor [Paul Shannon (2015). PSICQUIC]. IMEx databases include IntAct, MINT, bhf-ucl, MPIDB, MatrixDB, HPIDb, I2D-IMEx, InnateDB-IMEx, MolCon, UniProt, MBInfo. The list of interactions (pairs of interactors) was transformed into the list of interactors preserving interactor identifiers, the type of interactor identifier, species information and the database interaction originates from. Only unique proteins wereIMEx databases contain interactions between proteins, RNA, DNA and small molecules, moreover, these interaction may involve molecules originating from different species. Therefore, to perform by species interactome/proteome comparison there is a need to remove non-UniProtKB/AC molecule identifiers (which removes non-protein molecules, although, may also remove small fraction of proteins which have no UniprotKB/AC) and there is a need to remove proteins originating from other species. Also, entries in IMEx databases has to be cleaned of tags and textual descriptions (\"taxid:9606(human-h1299)|taxid:9606(Homo sapiens lung lymph node carcinoma)\" to \"9606\") to make further analysis easier and cleaner.\nNext, when provided in the research articles protein isoform information is always included in IMEx databases, so to perform analysis excluding isoform information UniProtKB/AC were cleaned of -N suffix (P04637-4 to P04637).\n\n\n### Disordered regions and biochemical properties\n### Gene ontology enrichment analysis\n\n```{r IMEx_vs_Uniprot_processing, cache=F}\n\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\n\ndate = Sys.Date()\n## Please specify the date for which you want to perform analysis (if not today)\ndate = as.Date(\"2017-01-06\")\n\n## ## Use all Uniprot if reviewed == 1, only Swissprot data if reviewed == 2, \n## ## TrEMBL data if reviewed == 3\nreviewed = c(1, 2)\n\n## ## Distinguish between isoforms or use only generic Uniprot IDs: TRUE / FALSE?\nisoforms = c(TRUE, FALSE)\n\n## missing_proteins = TRUE => proteins missing protein evidence are shown\n## missing_proteins = FALSE => proteins for which protein evidence exists are shown\nmissing_proteins = TRUE\n\n## The code below queries databases, saves and processes results, \n## gives summary on how many interactors have Uniprot IDs or belong to the SPECIES_NAME\n## generates table with 0 and 1 for the combination of SPECIES_NAME, reviewed, isoforms\nsource(\"intact_vs_uniprot.R\")\nfor (i in isoforms) {\n  for (r in reviewed) {\n    for (n in SPECIES_NAME) {\n      intact_vs_uniprot(SPECIES_NAME = n, reviewed = r, isoforms = i, missing_proteins = TRUE, date = date)\n      message(paste(\"- \",n,\" -  reviewed\", r, \" -  isoforms included\", i))\n    }\n  }\n}\n\n## The code below does overlap comparisons and saves summaries\nsource(\"intact_vs_uniprot_overlap.R\")\nsource(\"SPECIES_NAME_TO_ID.R\")\nfor (r in reviewed) {\n  for (i in isoforms) {\n    for (n in SPECIES_NAME) {\n      SPECIES_IDs = SPECIES_NAME_TO_ID(n)\n      SPECIES_ID = SPECIES_IDs$SPECIES_ID\n      intact_vs_uniprot_overlap(SPECIES_NAME = n, SPECIES_ID = SPECIES_ID, reviewed = r, isoforms = i, date)\n      message(paste(\"- \",n,\" -  reviewed\", r, \" -  isoforms included\", i))\n    }\n  }\n}\n\n### combine the summaries for multiple species\nproteome_vs_interactome_summary.all = data.frame()\nwhole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all = data.frame()\nwhole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all = data.frame()\nfor (r in reviewed) {\n  for (i in isoforms) {\n    for(n in SPECIES_NAME) {\n      #=====================================\n      filename.summary = paste(\"./summaries/\",\"proteome_vs_interactome_summary_\",n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\",date,\".txt\", sep = \"\")\n      if(!file.exists(filename.summary)) {\n        proteome_vs_interactome_summary.all\n      }\n      if(file.exists(filename.summary)) {\n        proteome_vs_interactome_summary_o = as.data.frame(read.delim(filename.summary, stringsAsFactors = F))\n        proteome_vs_interactome_summary.all = rbind(proteome_vs_interactome_summary.all, proteome_vs_interactome_summary_o)\n      }\n      #=====================================\n      filename.summary2 = paste(\"./summaries/\",\"whole_proteome_Uniprot_vs_IMEx_vs_protein.exist_summary_\",n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\",date,\".txt\", sep = \"\")\n      if(!file.exists(filename.summary2)) {\n        whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all\n      }\n      if(file.exists(filename.summary2)) {\n        whole_proteome_Uniprot_vs_IMEx_vs_protein.exist = as.data.frame(read.delim(filename.summary2, stringsAsFactors = F))\n        whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all = rbind(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all, whole_proteome_Uniprot_vs_IMEx_vs_protein.exist)\n      }\n      #=====================================\n      filename.summary3 = paste(\"./summaries/\",\"whole_proteome_Uniprot_vs_IntAct_vs_protein.exist_summary_\",n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\",date,\".txt\", sep = \"\")\n      if(!file.exists(filename.summary3)) {\n        whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all\n      }\n      if(file.exists(filename.summary3)) {\n        whole_proteome_Uniprot_vs_IntAct_vs_protein.exist = as.data.frame(read.delim(filename.summary3, stringsAsFactors = F))\n        whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all = rbind(whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all, whole_proteome_Uniprot_vs_IntAct_vs_protein.exist)\n      }\n  }\n}\n}\n## save all species summary\nfilename.summary.all = paste(\"./results/\",\"proteome_vs_interactome_summary_\",date,\".txt\", sep = \"\")\nwrite.table(proteome_vs_interactome_summary.all, filename.summary.all, col.names=T,row.names=F,sep=\"\\t\",quote=F)\nfilename.summary.all2 = paste(\"./results/\",\"whole_proteome_Uniprot_vs_IMEx_vs_protein.exist_summary_\",date,\".txt\", sep = \"\")\nwrite.table(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all, filename.summary.all2, col.names=T,row.names=F,sep=\"\\t\",quote=F)\nfilename.summary.all3 = paste(\"./results/\",\"whole_proteome_Uniprot_vs_IntAct_vs_protein.exist_summary_\",date,\".txt\", sep = \"\")\nwrite.table(whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all, filename.summary.all3, col.names=T,row.names=F,sep=\"\\t\",quote=F)\n\n### combine the summaries for multiple species of how many interactors have non-uniprot and non-given-species identifiers\ninteractome_identifiers_summary.all = data.frame()\n  for (i in isoforms) {\n    for(n in SPECIES_NAME) {\n      filename.summary = paste(\"./summaries/\",\"uniprotKB_IDs_and_\",n,\"_interactors_summary_isoforms_\",i,\"_\",date,\".txt\", sep = \"\")\n      if(!file.exists(filename.summary)) {\n        interactome_identifiers_summary.all\n      }\n      if(file.exists(filename.summary)) {\n        interactome_identifiers_summary.o = as.data.frame(read.delim(filename.summary, stringsAsFactors = F))\n        interactome_identifiers_summary.all = rbind(interactome_identifiers_summary.all, interactome_identifiers_summary.o)\n      }\n    }\n  }\ninteractome_identifiers_summary.all = unique(interactome_identifiers_summary.all)\n## save all species summary\nfilename.summary.all = paste(\"./results/\",\"interactome_identifiers_summary_\",date,\".txt\", sep = \"\")\nwrite.table(interactome_identifiers_summary.all, filename.summary.all, col.names=T,row.names=F,sep=\"\\t\",quote=F)\n\n## Plotting the number of interactors which have UniprotKB identifiers and belong to the species queried\ninteractome_identifiers_summary.all.s = interactome_identifiers_summary.all[,c(3,4,5,6,7)]\n## Transform table for plotting with ggplot2\nlibrary(reshape2)\ninteractome_identifiers_summary.all.s.m= melt(data = interactome_identifiers_summary.all.s,\n                                              id.vars = c(\"SPECIES_NAME\", \"SPECIES_ID\"),\n                                              variable.name = \"decription\",\n                                              value.name = \"number\")\n## rename yeast and E.coli\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"strain K12\", \"E. coli, strain K12\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"Caenorhabditis elegans\", \"C. elegans\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"Drosophila melanogaster\", \"D. melanogaster\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\n```\n\n# Results\n\n## how well available interactome covers the proteome\n\n### Available interactome covers substantial fraction of the reviewed proteome of main model species\n\n```{r IMEx_vs_Uniprot_venndiagram, cache=F, fig.width=8, fig.height=8, fig.cap=\"Figure 2\"}\n## Plotting with venn.diagram - Uniprot vs IMEx (or IntAct)\n# code to be modified for different graphs\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\nreviewed_venn = 2                 # 1 or 2\nIMExdatabase = \"IMEx\"    # \"X0469.IntAct.\" or \"IMEx\"\n### ======================================================================== ###\n# non-modifyable code\nproteome_vs_interactome_summary.all$species.name = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", proteome_vs_interactome_summary.all$species.name)\nproteome_vs_interactome_summary.all$species.name = gsub(\"strain K12\", \"Escherichia coli, strain K12\", proteome_vs_interactome_summary.all$species.name)\nSPECIES_NAME = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", SPECIES_NAME)\nSPECIES_NAME = gsub(\"strain K12\", \"Escherichia coli, strain K12\", SPECIES_NAME)\nlibrary(dplyr)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == TRUE)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, database == IMExdatabase)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, database == IMExdatabase)\n\nlibrary(VennDiagram)\n{\ngrid.newpage()\n\nif(reviewed_venn == 2){plotname = paste0(\"Proteome (SwissProt) coverage by interaction databases(\",IMExdatabase,\")\")\ndatabasename = \"SwissProt\"}\nif(reviewed_venn == 1){plotname = paste0(\"Proteome (all UniprotKB) coverage by interaction databases(\",IMExdatabase,\")\")\ndatabasename = \"UniprotKB\"}\n\npushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), \"npc\"), \n                                         heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), \"npc\"))))\n\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))\nx =grid.text(plotname, x = unit(0.7, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))\nx =grid.text(\"isoforms included\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))\nx =grid.text(\"isoforms excluded\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\n\nfor (i in 1:length(SPECIES_NAME)) {\n  \n  pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))\n  x =grid.text(SPECIES_NAME[i], x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))\n  source(\"double.venn.prot.R\")\n  venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))\n  source(\"double.venn.prot.R\")\n  venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)\n  popViewport()\n}\npopViewport()\n}\n```\n\nOverall - the best interactome annotated by IMEx databases is baker’s yeast, 2nd best interactome is *E.coli*. All other interactomes cover less than the half of their respective proteome (all UniprotKB, supplementary figure 1). Overlap between the interactome and reviewed proteome (SwissProt) looks much better. A large fraction of human, mouse, arabidopsis proteins-interactors and more than a half of drosophila and *C.elegans* proteins-interactors are absent in SwissProt – under-annotation by Uniprot. \nProtein isoforms (in multicellular model organisms) are almost not annotated in the interactome. Human is the exception – 2452 protein isoforms out of 21957. For most organisms in this list (with the exception of mouse) IntAct overlaps to a large extent with the other IMEx databases (supplementary figure 1).\n\n### Mouse and human proteins are commonly combined for interaction experiments\n\nThe fact that researchers tend to put proteins from other species (mostly human) into mouse experiments or tend to put mouse proteins into cell from other species (mostly human) is also common for interaction detection experiments and is clearly seen in the figure 3: half of the mouse interactors are from the other species. This holds true both for IMEx databases (figure 3) and for BioGRID. However, this analysis doesn't show which proteins (mouse or human) where used as bait to capture interactions in which cells (mouse or human).\n\nFigure 3 also displays how many interactors do not have Uniprot indentifiers - those are small molecules, RNA, DNA or a small fraction of proteins not mapped to Uniprot. Big fraction of *C.elegans* interactors are coming from single experiment mapping trascrition factors to their sites []\n\n```{r IMEx_vs_Uniprot_N_Uniprot&Species, cache=F, fig.width=8, fig.height=8, fig.cap=\"Figure 3\" }\n# plot how many interactors have non-uniprot and non-given-species identifiers\nlibrary(ggplot2)\nlibrary(dplyr)\nproteome_vs_interactome_plot <- ggplot(interactome_identifiers_summary.all.s.m, aes(x=SPECIES_NAME, y=number, fill=decription)) + geom_bar(width = 0.9, stat = \"identity\", position = \"stack\") + geom_label(aes(label=number), position = \"stack\", size = 4, label.padding = unit(0.08, \"lines\")) +\n  ggtitle(\"The number of interacting molecules (interactors) which have UniprotKB identifiers \\n and belong to the species of interest\") + theme(axis.text.x=element_text(angle = 20), axis.title.x = element_text(size = 0)) + ylab(\"number of proteins\")\nproteome_vs_interactome_plot\n# save plot\n# filename=paste(\"./results/\", \"interactome_identifiers_summary_plot_SMALL\",date,\".png\", sep = \"\")\n# ggsave(filename, proteome_vs_interactome_plot, width = 12, height = 12)\n```\n\nInterchangable use of mouse and human proteins generates interaction data which is extremely hard to reuse due to the fact that it requires mapping between homologous proteins. However, this may not be the biggest problem with studying the interactions between mouse and human proteins and trying to correctly intrepret results. Recent studies of intrinsically disordered proteins show that linear amino acid motifs located in disordered regions frequently mediate protein-protein interactions [], for example, disordered region of p53 mediates its ability to recruit transcription-activating proteins to the promoter []. More importantily, these linear amino acid motifs can evolve quickly, for example, allowing cancer cells to escape control by P53 []. So, while the interaction between mouse protein A and human protein B can exist, that might not be true for the interaction bewteen human protein A and human protein B, and vice-verse.\n\n```{r dowlnload_all_IntAct, cache=F, fig.width=8}\n# IntAct FTP contains the following databases = c(\"IntAct\", \"MINT\", \"bhf-ucl\", \"MPIDB\", \"MatrixDB\", \n#               \"HPIDb\",\"I2D-IMEx\",\"InnateDB-IMEx\", \"MolCon\", \"UniProt\", \"MBInfo\")\n# this will take time and data traffic ~ 2.5GB\n\nurl_intact = \"ftp://ftp.ebi.ac.uk/pub/databases/intact/current/psimitab/intact.txt\"\nfilename_intact = paste0(\"./Data/IntAct_MITAB27_release_\", format(Sys.Date(), \"%m-%Y.txt\"))\nif(!file.exists(filename_intact)) {\n  downloader::download(url_intact, filename_intact)\n  gitignore = c(substr(filename_intact, 2, nchar(filename_intact)), readLines(\".gitignore\"))\n  write(gitignore, \".gitignore\")\n  }\n# Read all IntAct - do not attemp without 2.5 GB of free RAM\nlibrary(data.table)\nall.IntAct = fread(filename_intact)\n# changing column names to data.table-compatible format\n{\n(colnames_IntAct = colnames(all.IntAct))\ncolnames(all.IntAct) = gsub(\" \",\"_\",colnames(all.IntAct))\ncolnames(all.IntAct) = gsub(\"\\\\(|\\\\)\",\"\",colnames(all.IntAct))\ncolnames(all.IntAct) = gsub(\"#\",\"\",colnames(all.IntAct))\n}\n# cleaning Taxid \"taxid:9606(human)|taxid:9606(Homo sapiens)\" to 9606\n{\ngsub(\"taxid:|\\\\(.*$\",\"\",x)\nall.IntAct[, Taxid_interactor_A := gsub(\"taxid:|\\\\(.*$\",\"\",Taxid_interactor_A)]\nall.IntAct[, Taxid_interactor_B := gsub(\"taxid:|\\\\(.*$\",\"\",Taxid_interactor_B)]\nall.IntAct[, Host_organisms := gsub(\"taxid:|\\\\(.*$\",\"\",Host_organisms)]\n# saving identifier types and cleaning interactor ids\nall.IntAct[, interactor_IDs_databases_A := gsub(\":.*$\",\"\",IDs_interactor_A)]\nall.IntAct[, interactor_IDs_databases_B := gsub(\":.*$\",\"\",IDs_interactor_B)]\nall.IntAct[, IDs_interactor_A := gsub(\"^.*:\",\"\",IDs_interactor_A)]\nall.IntAct[, IDs_interactor_B := gsub(\"^.*:\",\"\",IDs_interactor_B)]\nall.IntAct[, bait_prey_status_A := gsub(\"^.*\\\\(|\\\\)\",\"\",Experimental_roles_interactor_A)]\nall.IntAct[, bait_prey_status_B := gsub(\"^.*\\\\(|\\\\)\",\"\",Experimental_roles_interactor_B)]\nall.IntAct[, Publication_Identifiers := gsub(\"^.*pubmed:|\\\\|.*$\",\"\",Publication_Identifiers)]\nall.IntAct[, Confidence_values := gsub(\"^intact-miscore:\",\"\",Confidence_values)]\n}\ngsub(\"^.*pubmed:|\\\\|.*$\", \"\", x)\nall.IntAct[,head]\n# checking mixed mouse / human interactions\n{\nthe_host_for_mouse_human_pairs = all.IntAct[((Taxid_interactor_A == \"9606\" & Taxid_interactor_B == \"10090\")  | \n                                               (Taxid_interactor_A == \"10090\" & Taxid_interactor_B == \"9606\")) &\n             interactor_IDs_databases_A == \"uniprotkb\" & interactor_IDs_databases_B == \"uniprotkb\"\n           , table(Host_organisms)]\nthe_host_for_mouse_human_pairs_mouse_as_bait = all.IntAct[((Taxid_interactor_A == \"9606\" & Taxid_interactor_B == \"10090\")  | \n                                               (Taxid_interactor_A == \"10090\" & Taxid_interactor_B == \"9606\")) &\n             interactor_IDs_databases_A == \"uniprotkb\" & interactor_IDs_databases_B == \"uniprotkb\" &\n            ((bait_prey_status_A == \"prey\" & bait_prey_status_B == \"bait\")  | \n                                               (bait_prey_status_A == \"bait\" & bait_prey_status_B == \"prey\"))\n           , table(Host_organisms)]\nmouse_as_bait = all.IntAct[((Taxid_interactor_A == \"9606\" & Taxid_interactor_B == \"10090\")  | \n                                               (Taxid_interactor_A == \"10090\" & Taxid_interactor_B == \"9606\")) &\n             interactor_IDs_databases_A == \"uniprotkb\" & interactor_IDs_databases_B == \"uniprotkb\" &\n            ((bait_prey_status_A == \"prey\" & bait_prey_status_B == \"bait\")  | \n                                               (bait_prey_status_A == \"bait\" & bait_prey_status_B == \"prey\")) &\n              Host_organisms == \"9606\"\n           ,.(IDs_interactor_A, IDs_interactor_B, Taxid_interactor_A, Taxid_interactor_B)]\nmouse_as_bait_human_preys = length(unique(c(mouse_as_bait[(Taxid_interactor_A == \"9606\"), IDs_interactor_A], \n                mouse_as_bait[(Taxid_interactor_B == \"9606\"), IDs_interactor_B])))\nmouse_as_bait_mouse_baits = length(unique(c(mouse_as_bait[(Taxid_interactor_A == \"10090\"), IDs_interactor_A], \n                mouse_as_bait[(Taxid_interactor_B == \"10090\"), IDs_interactor_B])))\nN_pmid_mouse_as_bait_in_human = all.IntAct[((Taxid_interactor_A == \"9606\" & Taxid_interactor_B == \"10090\")  | \n                                               (Taxid_interactor_A == \"10090\" & Taxid_interactor_B == \"9606\")) &\n             interactor_IDs_databases_A == \"uniprotkb\" & interactor_IDs_databases_B == \"uniprotkb\" &\n            ((bait_prey_status_A == \"prey\" & bait_prey_status_B == \"bait\")  | \n                                               (bait_prey_status_A == \"bait\" & bait_prey_status_B == \"prey\")) &\n              Host_organisms == \"9606\"\n           ,length(unique(Publication_Identifiers))]\nall.IntAct[Taxid_interactor_A == \"9606\" & Taxid_interactor_B == \"9606\", table(Host_organisms)]\n}\n\n```\n\nSurprisingly, `r the_host_for_mouse_human_pairs[[\"9606\"]]` interactions between mouse and human proteins were discovered in human rather than mouse cells (only `r the_host_for_mouse_human_pairs[[\"10090\"]]`) suggesting that researchers use mouse proteins as baits (`r mouse_as_bait_mouse_baits` mouse baits total, `r mouse_as_bait_human_preys` human preys total, including isoforms, from `r N_pmid_mouse_as_bait_in_human` publications) to find interactions directly relevant to human interactome research, including human disease.\n\n\n### BioGRID database (as obtained from Mentha) overlaps significantly with IMEx databases\n\n```{r biogrid_vs_IMEx_vs_Uniprot_processing}\n## Enter SPECIES_NAME \nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\n## !! no \"E.coli strain K12\" in BioGRID from Mentha\n## ## Use all Uniprot if reviewed == 1, only Swissprot data if reviewed == 2, \n## ## TrEMBL data if reviewed == 3\nreviewed = c(1, 2)\n## ## Distinguish between isoforms or use only generic Uniprot IDs: TRUE / FALSE?\nisoforms = c(FALSE) # not possible to distinguish isoforms for BioGRID\n\n#============================================================================#\nsource(\"biogrid_from_mentha_vs_proteome_vs_imex.R\")\nfor (r in reviewed) {\n  for (i in isoforms) {\n    for (n in SPECIES_NAME) {\n        biogrid_from_mentha_vs_proteome_vs_imex(SPECIES_NAME = n, reviewed = r, isoforms = i, date = date)\n    }\n  }\n}\n\nwhole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = data.frame()\nreference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = data.frame()\nwhole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha = data.frame()\nsource(\"SPECIES_NAME_TO_ID.R\")\nfor (r in reviewed) {\n  for (i in isoforms) {\n    for (n in SPECIES_NAME) {\n      SPECIES_IDs = SPECIES_NAME_TO_ID(n)\n      SPECIES_ID = SPECIES_IDs$SPECIES_ID\n      filename_vs_3 = paste(\"./analysis/\",\"proteome_vs_interactome_vs_BioGRID_f_\", SPECIES_ID,\"_reviewed_\",reviewed = r,\"_isoforms_\",isoforms = i,\"_\", date,\".txt\", sep = \"\")\n      biogrid_from_mentha_vs_proteome_vs_imex_f = as.data.frame(read.delim(filename_vs_3, stringsAsFactors = F))\n\n#============================================================================#\n## Calculating overlaps\n\nsource(\"A_vs_B_vs_C_overlap.R\")\nwhole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_temp = A_vs_B_vs_C_overlap(biogrid_from_mentha_vs_proteome_vs_imex_f, \n                    A = \"whole_proteome_Uniprot\", \n                    B = \"IMEx\", \n                    C = \"BioGRID_from_Mentha\", \n                    SPECIES_NAME = n, reviewed = r, isoforms = i)\nwhole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = rbind(whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_temp)\n\nwhole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha_temp = A_vs_B_vs_C_overlap(biogrid_from_mentha_vs_proteome_vs_imex_f, \n                                                                                 A = \"whole_proteome_Uniprot\", \n                                                                                 B = \"X0469.IntAct.\", \n                                                                                 C = \"BioGRID_from_Mentha\", \n                                                                                 SPECIES_NAME = n, reviewed = r, isoforms = i)\nwhole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha = rbind(whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha, whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha_temp)\n\nreference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_temp = A_vs_B_vs_C_overlap(biogrid_from_mentha_vs_proteome_vs_imex_f, \n                                                                                 A = \"reference_proteome_Uniprot\", \n                                                                                 B = \"IMEx\", \n                                                                                 C = \"BioGRID_from_Mentha\", \n                                                                                 SPECIES_NAME = n, reviewed = r, isoforms = i)\nreference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = rbind(reference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, reference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_temp)\n    }\n  }\n}\n```\n\n```{r biogrid_vs_IMEx_vs_Uniprot_venndiagram, cache=F, fig.width=8, fig.height=8, fig.cap=\"Figure 4\" }\n## Plotting overlaps - Uniprot IMEx BioGRID\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\nIMExdatabase = \"IMEx\"    # \"X0469.IntAct.\" or \"IMEx\"\n### ======================================================================== ###\n# non-modifyable code\nif(IMExdatabase == \"IMEx\"){\nwhole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha$species_name = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha$species_name)\nlibrary(dplyr)\nproteome_vs_interactome_summary.all_isof = filter(whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, reviewed == 1)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == FALSE)\nproteome_vs_interactome_summary.all_noisof = filter(whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, reviewed == 2)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)\n}\nif(IMExdatabase == \"X0469.IntAct.\"){\n  whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha$species_name = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha$species_name)\n  library(dplyr)\n  proteome_vs_interactome_summary.all_isof = filter(whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha, reviewed == 1)\n  proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == FALSE)\n  proteome_vs_interactome_summary.all_noisof = filter(whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha, reviewed == 2)\n  proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)\n}\nlibrary(VennDiagram)\n{\ngrid.newpage()\n\nplotname = paste0(\"Proteome coverage by interaction databases, overlap between \", IMExdatabase,\" and BioGRID\")\n\npushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), \"npc\"), \n                                         heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), \"npc\"))))\n\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))\nx =grid.text(plotname, x = unit(0.7, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))\nx =grid.text(\"UniprotKB, isoforms excluded\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))\nx =grid.text(\"SwissProt, isoforms excluded\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\n\nfor (i in 1:length(SPECIES_NAME)) {\n  \n  pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))\n  x =grid.text(SPECIES_NAME[i], x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))\n  source(\"triple.venn.prot.R\")\n  venn = triple.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = TRUE)\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))\n  source(\"triple.venn.prot.R\")\n  venn = triple.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = TRUE)\n  popViewport()\n}\npopViewport()\n}\n```\n\n## Which proteins are missing?\n\n```{r human_not_in_IMEx_protein_properties_processing}\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\")\nSPECIES_NAME = \"Homo sapiens\"\n## only reviewed = 2 is relevant for this analysis\nreviewed = 2\nisoforms = FALSE\n##============================================================================##\nsource(\"SPECIES_NAME_TO_ID.R\")\nlibrary(dplyr)\n#for (r in reviewed) {\n#  for (i in isoforms) {\n#    for (n in SPECIES_NAME) {\nr = reviewed\ni = isoforms\nn = SPECIES_NAME\n     ##============================================================================##\n      ## querying Uniprot for the list of proteins (only mapped to Uniprot)\n      ## downolading length, mass, SNPs, isoforms, annotation score, existence attribute\n      SPECIES_IDs = SPECIES_NAME_TO_ID(n)\n      SPECIES_ID = SPECIES_IDs$SPECIES_ID\n      ## reading logic table and getting list of proteins\n      if(SPECIES_NAME != \"strain K12\"){\n      filename_vs_3 = paste(\"./analysis/\",\"proteome_vs_interactome_vs_BioGRID_f_\", SPECIES_ID,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")}\n      if(SPECIES_NAME == \"strain K12\"){\n      filename_vs_3 = paste(\"./analysis/\",\"proteome_vs_interactome_f_\", SPECIES_ID,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")}\n      biogrid_from_mentha_vs_proteome_vs_imex_f = as.data.frame(read.delim(filename_vs_3, stringsAsFactors = F))\n      IDs = dplyr::filter(biogrid_from_mentha_vs_proteome_vs_imex_f, whole_proteome_Uniprot==1)%>% dplyr::select(whole_proteome_IDs)\n      filename_perl = paste0(\"./Data/IDs_for_PERL_\",date,\".txt\")\n      filename_out_of_perl = paste0(\"./Data/Swissprot_list_from_proteome_vs_interactome_vs_BioGRID_f_\", SPECIES_ID,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\"\")\n      file.create(filename_out_of_perl)\n      write(IDs$whole_proteome_IDs, file = filename_perl)\n      source(\"download_whole_proteome.R\")\n      whole_proteome_query = download_whole_proteome(SPECIES_ID, date = \"2016-12-14\")\n      uniprot_query = dplyr::filter(whole_proteome_query, Status == \"reviewed\")\n      ##============================================================================##\n      ## merging information from Uniprot to the logic table\n      proteome_vs_imex_details_f = merge(filter(biogrid_from_mentha_vs_proteome_vs_imex_f, whole_proteome_Uniprot==1), \n                                         uniprot_query, \n                                         by.x = \"whole_proteome_IDs\",\n                                         by.y = \"Entry\")\n      proteome_vs_imex_details_f$Mass = gsub(\",\",\"\",proteome_vs_imex_details_f$Mass)\n      proteome_vs_imex_details_f$Mass = as.numeric(proteome_vs_imex_details_f$Mass)\n      ## creating a factor variable for presence_in_Uniprot.presence_in_IMEx (1_0/1_1)\n      proteome_vs_imex_details_f[,length(proteome_vs_imex_details_f)+1] = interaction(proteome_vs_imex_details_f$whole_proteome_Uniprot, proteome_vs_imex_details_f$IMEx, sep = \"_\")\n      colnames(proteome_vs_imex_details_f)[length(proteome_vs_imex_details_f)] = paste0(colnames(proteome_vs_imex_details_f)[2], \"_\",\"IMEx\")\n      levels(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx) = c(\"SwissProt_not_IMEX\", \"SwissProt_and_IMEX\")\n      ##============================================================================##\n      ## saving combined logic table + protein properties from Uniprot\n      filename_vs_2 = paste(\"./analysis/\",\"proteome_vs_interactome_protein_properties_f_\", n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")\n      write.table(proteome_vs_imex_details_f,filename_vs_2,col.names=T,row.names=F,sep=\"\\t\",quote=F)\n```\n\n### Olfactory receptors are a major group of proteins not represented in IntAct\n\n```{r human_not_in_IMEx_protein_properties_GOenrichment}\n\n```\n\n### Human proteins with no available interactions (from IMEx) are on average shorter than the proteins with interactions available  \n\n```{r human_not_in_IMEx_proteins_are_shorter_density, fig.width=8, fig.height=5, fig.cap=\"Figure 5\" }\n      ##============================================================================##\n      ## Analysis\n      # read the saved table\n      filename_vs_2 = paste(\"./analysis/\",\"proteome_vs_interactome_protein_properties_f_\", n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")\n      proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=\"\"))\n      proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)\n                  ## plotting the distribution of mass\n      library(ggplot2)\n      # ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_density()+ scale_x_log10()\n      # ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) + scale_x_log10() + geom_histogram(position = \"identity\", bins = 50)\n      \n      ## removing olfactory receptors:\n      {proteome_vs_imex_details_f_minus_odor = proteome_vs_imex_details_f[-grep(\"Odor\", \n                                                                                proteome_vs_imex_details_f$Protein.names),]\n      proteome_vs_imex_details_f_minus_odor_olf = proteome_vs_imex_details_f_minus_odor[-grep(\"Olfactory\",\n                                                                                              proteome_vs_imex_details_f$Protein.names),]\n      proteome_vs_imex_details_f_minus_odor_olf.c = rbind(cbind(proteome_vs_imex_details_f, olfac = \n                                                              rep(\"all SwissProt\", nrow(proteome_vs_imex_details_f))),\n                                                        cbind(proteome_vs_imex_details_f_minus_odor_olf, olfac = rep(\"SwissProt excluding \\n olfactory receptors\",nrow(proteome_vs_imex_details_f_minus_odor_olf))))}\n          ## density with and without olfactory receptors:\n      ggplot(proteome_vs_imex_details_f_minus_odor_olf.c, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = olfac)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(olfac~.) + theme(strip.text.y = element_text(angle = 0)) +xlab(\"protein mass, Da, log10 scale\") + ggtitle(\"the distribution of protein mass for proteins with and without interaction evidence\")\n```\n\nThe difference in protein mass between proteins present and absent in the interactome is highly unlikely to be attributed to chance. Wilcox rank test on the whole population of proteins and Monte-Carlo sampling support this statement.\n\n```{r human_not_in_IMEx_proteins_are_shorter_Wilcox}\n           ## testing the difference in protein mass distributions\n            ##of proteins absent/present in IMEx using Wilcox rank test\n      SwissProt_not_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx==\"SwissProt_not_IMEX\"]\n      SwissProt_and_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx==\"SwissProt_and_IMEX\"]\n      wilcox.test.r = wilcox.test(SwissProt_not_IMEX, SwissProt_and_IMEX, conf.int = T)\n      wilcox.test.r\n                 ## testing the difference in protein mass distributions\n            ##of proteins absent/present in IMEx using Wilcox rank test excluding olfactory receptors\n      SwissProt_not_IMEX = proteome_vs_imex_details_f_minus_odor_olf$Mass[proteome_vs_imex_details_f_minus_odor_olf$whole_proteome_Uniprot_IMEx==\"SwissProt_not_IMEX\"]\n      SwissProt_and_IMEX = proteome_vs_imex_details_f_minus_odor_olf$Mass[proteome_vs_imex_details_f_minus_odor_olf$whole_proteome_Uniprot_IMEx==\"SwissProt_and_IMEX\"]\n      wilcox.test.r = wilcox.test(SwissProt_not_IMEX, SwissProt_and_IMEX, conf.int = T)\n      wilcox.test.r\n      \n                 ## is the distibution of mass or log(mass) normal?\n      library(rafalib)\n      mypar(2,2)\n          \n      \n      popsd(log10(SwissProt_not_IMEX))\n      median(log10(SwissProt_not_IMEX))\n      mad(log10(SwissProt_not_IMEX))\n      {\n      qqnorm(log10(SwissProt_not_IMEX), main = \"SwissProt_not_IMEX, log(protein mass)\")\n      qqline(log10(SwissProt_not_IMEX))\n      qqnorm(log10(SwissProt_and_IMEX), main = \"SwissProt_and_IMEX, log(protein mass)\")\n      qqline(log10(SwissProt_and_IMEX))\n      qqnorm((SwissProt_not_IMEX), main = \"SwissProt_not_IMEX, protein mass\")\n      qqline((SwissProt_not_IMEX))\n      qqnorm((SwissProt_and_IMEX), main = \"SwissProt_and_IMEX, protein mass\")\n      qqline((SwissProt_and_IMEX))\n      }\n\n            ## it indeed is\n      \n                  ## Monte-Carlo simulation\n            ## is there a significant difference in protein mass?\n      # code can be used for things other than mass\n      set.seed(1)\n      # sample size\n      Ns <- seq(5, 350, 20)\n      lengthNs = length(Ns)\n      # number of simulations\n      B = 1000\n      # function which takes samples and does Wilcox test\n      simulation = function(n){  \n       # x = cbind( matrix(sample(SwissProt_not_IMEX, B*n),B,n)\n       # y = matrix(sample(SwissProt_and_IMEX, B*n),B,n)\n       # genefilter::rowttests()\n        wilcox.test.rr = matrix(0, 1, 3)\n        x = sample(SwissProt_not_IMEX, n)\n        y = sample(SwissProt_and_IMEX, n)\n        wilcox.test.rr[1,c(1,2)] = wilcox.test(x, y, conf.int = T)$conf.int\n        wilcox.test.rr[1,3] = wilcox.test(x, y, conf.int = T)$p.value\n        return(wilcox.test.rr)\n      }\n      wilcox.test.rr = matrix(0, lengthNs, 3)\n      # looping Monte-Carlo over samples sizes ]\n     # for (n in 1:lengthNs) {\n     #   z =replicate(B, simulation(Ns[n]), simplify = T)\n     #   wilcox.test.rr[n,] = rowMeans(z)\n     # }\n      xx =cbind(wilcox.test.rr, Ns)\n      qplot(xx[,4], xx[,3], ylab = \"Wilcox test p-val\", xlab = \"proteins sampled, N\")\n\n```\n\n## What is the relationship between the number of interactions or MI score and the number of publicationions or GO terms per protein?\n\n```{r N_interactions_vs_research, fig.height=10, fig.width=8}\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\n## Converting UniprotAC to geneID\n## Converting UniprotAC isoforms to generic\n## copy all.IntAct (data.table doesn't make an explicit copy while assigning DT = data.table())\nall.IntAct[,c(\"IDs_interactor_A_isoforms\",\"IDs_interactor_B_isoforms\") := .(IDs_interactor_A,IDs_interactor_B)]\nsource(\"isoform_id_all_remover.R\")\nall.IntAct[interactor_IDs_databases_A == \"uniprotkb\", IDs_interactor_A := isoform_id_all_remover(IDs_interactor_A)]\nall.IntAct[interactor_IDs_databases_B == \"uniprotkb\", IDs_interactor_B := isoform_id_all_remover(IDs_interactor_B)]\nall.IntAct.modif = copy(all.IntAct)\n## downloading the content of the folder containing species specific ID mapping\n# genereting filenames\nlibrary(RCurl)\nuniprotAC2geneID_url = \"ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/by_organism/\"\nfilenames <- getURL(uniprotAC2geneID_url,dirlistonly = TRUE) \nfilenames = unlist(strsplit(filenames,\"\\n\"))\nfilenames = filenames[grep(\"idmapping.dat.gz\",filenames)]\nuniprotAC2geneID_filename = paste0(\"./Data/uniprotAC2geneID\",\"release_\", format(Sys.Date(), \"%m-%Y\"),\"_\", filenames)\nuniprotAC2geneID_filename.dat = substr(uniprotAC2geneID_filename, 1, nchar(uniprotAC2geneID_filename)-3)\n# downloading and unzipping files\nfor(i in 1:length(uniprotAC2geneID_filename.dat)){\n  if(!file.exists(uniprotAC2geneID_filename.dat[i])) {\n    downloader::download(paste0(uniprotAC2geneID_url,filenames[i]), uniprotAC2geneID_filename[i])\n  R.utils::gunzip(uniprotAC2geneID_filename[i])\n  # make git ignore big files \n  gitignore = c(substr(uniprotAC2geneID_filename.dat[i], 2, nchar(uniprotAC2geneID_filename.dat[i])),\n                readLines(\".gitignore\"))\n  write(gitignore, \".gitignore\")\n}\n}\n# reading files for uniprotAC to geneID mapping\nuniprotAC2geneID = data.table()\nfor(i in 1:length(uniprotAC2geneID_filename.dat)){\n  temp = fread(uniprotAC2geneID_filename.dat[i], header = F)\n  temp = temp[V2 == \"GeneID\", .(V1, V3)]\n  uniprotAC2geneID = rbind(uniprotAC2geneID,temp)\n  rm(list = \"temp\")\n}\n\n## map GeneIDs for IDs_interactor_A\n{\ncolnames(uniprotAC2geneID)[2] = \"IDs_interactor_A_GeneID\"\nall.IntAct.modif = merge(all.IntAct.modif, uniprotAC2geneID, by.x = \"IDs_interactor_A\", by.y = \"V1\", all.x=TRUE)\n# colnames(all.IntAct.modif)\n# sum(!is.na(all.IntAct.modif$IDs_interactor_A_GeneID))\n}\n## map GeneIDs for IDs_interactor_B\n{\ncolnames(uniprotAC2geneID)[2] = \"IDs_interactor_B_GeneID\"\nall.IntAct.modif = merge(all.IntAct.modif, uniprotAC2geneID, by.x = \"IDs_interactor_B\", by.y = \"V1\", all.x=TRUE)\n# colnames(all.IntAct.modif)\n# sum(!is.na(all.IntAct.modif$IDs_interactor_B_GeneID))\n}\nrm(list = \"uniprotAC2geneID\")\n\n## getting the publication ID for each gene\ngeneID2pubmed_url = \"ftp://ftp.ncbi.nih.gov/gene/DATA/gene2pubmed.gz\"\ngeneID2pubmed_filename = paste0(\"./Data/geneID2pubmed_release_\", format(Sys.Date(), \"%m-%Y.gz\"))\ngeneID2pubmed_filename_txt = substr(geneID2pubmed_filename, 1, nchar(geneID2pubmed_filename)-3)\nif(!file.exists(geneID2pubmed_filename_txt)) {\n  downloader::download(geneID2pubmed_url, geneID2pubmed_filename)\n  R.utils::gunzip(geneID2pubmed_filename)\n  gitignore = c(substr(geneID2pubmed_filename, 2, nchar(geneID2pubmed_filename)-3), readLines(\".gitignore\"))\n  write(gitignore, \".gitignore\")\n}\n\ngeneID2pubmed = fread(geneID2pubmed_filename_txt, colClasses = c(\"character\",\"character\",\"character\"))\ngeneID2pubmed = geneID2pubmed[,.(GeneID, PubMed_ID)]\n\n## count the number of pubmed PMID per GeneIDs for IDs_interactor_A\n{\ngeneID2pubmed[, interactor_A_total_PMID := length(PubMed_ID), by = GeneID]\ngeneID2pubmed = geneID2pubmed[,unique(data.table(GeneID,interactor_A_total_PMID))][,GeneID := as.character(GeneID)]\nall.IntAct.modif = merge(all.IntAct.modif, geneID2pubmed, by.x = \"IDs_interactor_A_GeneID\", by.y = \"GeneID\", all.x=TRUE)\ncolnames(geneID2pubmed)[2] = \"interactor_B_total_PMID\"\nall.IntAct.modif = merge(all.IntAct.modif, geneID2pubmed, by.x = \"IDs_interactor_B_GeneID\", by.y = \"GeneID\", all.x=TRUE)\n colnames(all.IntAct.modif)\n}\n\nrm(list = \"uniprotAC2geneID\")\n\n{\n  all.IntAct.proteins = all.IntAct.modif[,data.table(IDs_interactor = c(IDs_interactor_A,IDs_interactor_B),\n                   interactor_total_PMID = c(interactor_A_total_PMID,interactor_B_total_PMID),\n                   Confidence_values = as.numeric(c(Confidence_values,Confidence_values)),\n                   Taxid_interactor = c(Taxid_interactor_A,Taxid_interactor_B),\n                   interactor_IDs_databases = c(interactor_IDs_databases_A, interactor_IDs_databases_B),\n                   interactor_GeneID = c(IDs_interactor_A_GeneID, IDs_interactor_B_GeneID))]\n  all.IntAct.proteins = unique(all.IntAct.proteins)\n  all.IntAct.proteins[,Median_MI_score := median(Confidence_values), by = IDs_interactor]\n  all.IntAct.proteins[,Mean_MI_score := mean(Confidence_values), by = IDs_interactor]\n  all.IntAct.proteins[,Confidence_values := NULL]\n  all.IntAct.proteins = all.IntAct.proteins[Taxid_interactor %in% c(\"9606\", \"10090\", \"559292\",\"83333\",\"7227\", \"6239\",\"3702\") & interactor_IDs_databases == \"uniprotkb\",]\n  # nrow(unique(all.IntAct.proteins[Taxid_interactor %in% c(\"9606\"), ]))\n  # length(unique(all.IntAct.proteins[Taxid_interactor %in% c(\"9606\"), IDs_interactor]))\n  SPECIES_NAME_ID = data.table(SPECIES_ID = c(\"9606\", \"10090\", \"559292\",\"83333\",\"7227\", \"6239\",\"3702\"), SPECIES_NAME)\n  all.IntAct.proteins = merge(all.IntAct.proteins, SPECIES_NAME_ID, by.x = \"Taxid_interactor\", by.y = \"SPECIES_ID\", all=TRUE)\n  str(all.IntAct.proteins)\n}\nlibrary(MASS)\n# Median\nggplot(all.IntAct.proteins, aes(interactor_total_PMID, Median_MI_score))+facet_wrap(~SPECIES_NAME, scales = \"free\") +\n    geom_density_2d(bins = 30,aes(colour=..level..)) + scale_x_log10() + scale_y_log10()+\n     scale_color_gradient(low = \"grey\", high = \"black\", breaks=c(0,10,50,100,200,500))+\n    ggtitle(\"The relationship between the number of publications per gene and median MI score\", subtitle = \"line was fitted using robust linear regression\")+\n    ylab(\"median MI score for the interactions \\n including the protein encoded by the gene\") + xlab(\"the number of publications per gene\") +\n     geom_smooth(method = \"rlm\", se = T) +geom_point(size = 0.1, alpha = 0.05)\n\nggplot(all.IntAct.proteins, aes(interactor_total_PMID, Mean_MI_score))+facet_wrap(~SPECIES_NAME, scales = \"free\") +\n    geom_density_2d(bins = 30,aes(colour=..level..)) + scale_x_log10() + scale_y_log10()+\n     scale_color_gradient(low = \"grey\", high = \"black\", breaks=c(0,10,50,100,200,500))+\n    ggtitle(\"The relationship between the number of publications per gene and mean MI score\", subtitle = \"line was fitted using robust linear regression\")+\n    ylab(\"mean MI score for the interactions \\n including the protein encoded by the gene\") + xlab(\"the number of publications per gene\") +\n     geom_smooth(method = \"rlm\", se = T) +geom_point(size = 0.1, alpha = 0.05)\n\nfit = rlm(Median_MI_score~interactor_total_PMID, data=all.IntAct.proteins)\nsummary(fit)\n\n```\n\n# Supplementary figures\n\nSupplementary figure 1 \n\n```{r Supplementary1_IMEx_vs_Uniprot_venndiagram_all_Uniprot, cache=F, fig.width=8, fig.height=8, fig.cap=\"Supplementary figure 1\"}\n## Plotting with venn.diagram - Uniprot vs IMEx (or IntAct)\n# code to be modified for different graphs\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\nreviewed_venn = 1                 # 1 or 2\nIMExdatabase = \"IMEx\"    # \"X0469.IntAct.\" or \"IMEx\"\n### ======================================================================== ###\n# non-modifyable code\nproteome_vs_interactome_summary.all$species.name = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", proteome_vs_interactome_summary.all$species.name)\nproteome_vs_interactome_summary.all$species.name = gsub(\"strain K12\", \"Escherichia coli, strain K12\", proteome_vs_interactome_summary.all$species.name)\nSPECIES_NAME = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", SPECIES_NAME)\nSPECIES_NAME = gsub(\"strain K12\", \"Escherichia coli, strain K12\", SPECIES_NAME)\nlibrary(dplyr)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == TRUE)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, database == IMExdatabase)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, database == IMExdatabase)\n\nlibrary(VennDiagram)\n{\ngrid.newpage()\n\nif(reviewed_venn == 2){plotname = paste0(\"Proteome (SwissProt) coverage by interaction databases(\",IMExdatabase,\")\")\ndatabasename = \"SwissProt\"}\nif(reviewed_venn == 1){plotname = paste0(\"Proteome (all UniprotKB) coverage by interaction databases(\",IMExdatabase,\")\")\ndatabasename = \"UniprotKB\"}\n\npushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), \"npc\"), \n                                         heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), \"npc\"))))\n\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))\nx =grid.text(plotname, x = unit(0.7, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))\nx =grid.text(\"isoforms included\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))\nx =grid.text(\"isoforms excluded\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\n\nfor (i in 1:length(SPECIES_NAME)) {\n  \n  pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))\n  x =grid.text(SPECIES_NAME[i], x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))\n  source(\"double.venn.prot.R\")\n  venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))\n  source(\"double.venn.prot.R\")\n  venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)\n  popViewport()\n}\npopViewport()\n}\n```\n\nSupplementary figure 2\n\n```{r BioGRID_vs_IMEx_vs_Uniprot_N_Uniprot&Species, cache=F, fig.width=8, fig.height=8, fig.cap=\"Supplementary figure 2\" }\n### combine the summaries for multiple species of how many interactors have non-uniprot identifiers\ninteractome_identifiers_summary.all = data.frame()\nfor (i in isoforms) {\n  for(n in SPECIES_NAME) {\n    filename.summary = paste(\"./summaries/\",\"uniprotKB_IDs_and_\",n,\"_biogrid_from_mentha_interactors_summary\", \"_isoforms_\",i,\"_\", date,\".txt\", sep = \"\")\n    if(!file.exists(filename.summary)) {\n      interactome_identifiers_summary.all\n    }\n    if(file.exists(filename.summary)) {\n      interactome_identifiers_summary.o = as.data.frame(read.delim(filename.summary, stringsAsFactors = F))\n      interactome_identifiers_summary.all = rbind(interactome_identifiers_summary.all, interactome_identifiers_summary.o)\n    }\n  }\n}\ninteractome_identifiers_summary.all = unique(interactome_identifiers_summary.all)\n## save all species summary\nfilename.summary.all = paste(\"./results/\",\"interactome_identifiers_BioGRID_summary_\",date,\".txt\", sep = \"\")\nwrite.table(interactome_identifiers_summary.all, filename.summary.all, col.names=T,row.names=F,sep=\"\\t\",quote=F)\n\n#################\ninteractome_identifiers_summary.all.s = interactome_identifiers_summary.all[,c(3,4,5,6,7)]\n## Transform table for plotting with ggplot2\nlibrary(reshape2)\ninteractome_identifiers_summary.all.s.m= melt(data = interactome_identifiers_summary.all.s,\n                                              id.vars = c(\"SPECIES_NAME\", \"SPECIES_ID\"),\n                                              variable.name = \"decription\",\n                                              value.name = \"number\")\ninteractome_identifiers_summary.all.s.m=unique(interactome_identifiers_summary.all.s.m)\n## rename yeast and E.coli\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"strain K12\", \"E. coli, strain K12\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"Caenorhabditis elegans\", \"C. elegans\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"Drosophila melanogaster\", \"D. melanogaster\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\n\n# plot\nlibrary(ggplot2)\nlibrary(dplyr)\n\nproteome_vs_interactome_plot <- ggplot(interactome_identifiers_summary.all.s.m, aes(x=SPECIES_NAME, y=number, fill=decription,label=number)) + geom_bar(width = 0.9, stat = \"identity\", position = \"stack\") + geom_label(position = \"stack\", size = 4, label.padding = unit(0.08, \"lines\")) +\n  ggtitle(\"The number of interactors which have UniprotKB identifiers \\n and belong to the species queried\") + theme(axis.text.x=element_text(angle = 20), axis.title.x = element_text(size = 0)) + ylab(\"number of proteins\")\nproteome_vs_interactome_plot\n# save plot\n# filename=paste(\"./results/\", \"interactome_identifiers_summary_plot_SMALL\",date,\".png\", sep = \"\")\n# ggsave(filename, proteome_vs_interactome_plot, width = 12, height = 12)\n\n### ======================================================================== ###\n\n```\n",
    "created" : 1484054821001.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1768748527",
    "id" : "95ABBBBE",
    "lastKnownWriteTime" : 1484161507,
    "last_content_update" : 1484161507735,
    "path" : "~/Desktop/VItalii_EBI/imex_vs_uniprot/final_report.Rmd",
    "project_path" : "final_report.Rmd",
    "properties" : {
        "docOutlineVisible" : "1",
        "last_setup_crc32" : "5F6DB60E4e41b43a",
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}