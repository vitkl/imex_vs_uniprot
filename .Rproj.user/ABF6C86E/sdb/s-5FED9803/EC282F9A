{
    "collab_server" : "",
    "contents" : "# intact_vs_uniprot analysis\n\n# SPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"Rattus norvegicus\", \"strain ATCC 204508\", \"strain K12\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Schizosaccharomyces pombe\", \"Arabidopsis thaliana\", \"Tetrahymena thermophila\", \"Neurospora crassa\", \"Chlamydomonas reinhardtii\", \"Gallus gallus\", \"Danio rerio\")\n\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\n\n## \"Heterocephalus glaber\" - naked mole rat - 0 interactions\n## \"strain K12\" is E.coli\n## \"strain ATCC 204508 / S288c\" is Baker's yeast\n\ndate = Sys.Date()\n## Please specify the date for which you want to perform analysis (if not today)\ndate = as.Date(\"2016-12-01\")\n\n\n## ## Use all Uniprot if reviewed == 1, only Swissprot data if reviewed == 2, \n## ## TrEMBL data if reviewed == 3\nreviewed = c(1, 2)\n\n## ## Distinguish between isoforms or use only generic Uniprot IDs: TRUE / FALSE?\nisoforms = c(TRUE, FALSE)\n\n## missing_proteins = TRUE => proteins missing protein evidence are shown\n## missing_proteins = FALSE => proteins for which protein evidence exists are shown\nmissing_proteins = TRUE\n\n## The code below queries databases, saves and processes results, \n## gives summary on how many interactors have Uniprot IDs or belong to the SPECIES_NAME\n## generates table with 0 and 1 for the combination of SPECIES_NAME, reviewed, isoforms\nsource(\"intact_vs_uniprot.R\")\nfor (i in isoforms) {\n  for (r in reviewed) {\n    for (n in SPECIES_NAME) {\n      intact_vs_uniprot(SPECIES_NAME = n, reviewed = r, isoforms = i, missing_proteins = TRUE, date = date)\n      message(paste(\"- \",n,\" -  reviewed\", r, \" -  isoforms included\", i))\n    }\n  }\n}\n\n\n## The code below does overlap comparisons and saves summaries\nsource(\"intact_vs_uniprot_overlap.R\")\nsource(\"SPECIES_NAME_TO_ID.R\")\nfor (r in reviewed) {\n  for (i in isoforms) {\n    for (n in SPECIES_NAME) {\n      SPECIES_IDs = SPECIES_NAME_TO_ID(n)\n      SPECIES_ID = SPECIES_IDs$SPECIES_ID\n      intact_vs_uniprot_overlap(SPECIES_NAME = n, SPECIES_ID = SPECIES_ID, reviewed = r, isoforms = i, date)\n      message(paste(\"- \",n,\" -  reviewed\", r, \" -  isoforms included\", i))\n    }\n  }\n}\n\n## to try if works\n#intact_vs_uniprot(SPECIES_NAME = \"strain K12\", reviewed = 1, isoforms = TRUE)\n\n### combine the summaries for multiple species\nproteome_vs_interactome_summary.all = data.frame()\nwhole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all = data.frame()\nwhole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all = data.frame()\nfor (r in reviewed) {\n  for (i in isoforms) {\n    for(n in SPECIES_NAME) {\n      #=====================================\n      filename.summary = paste(\"./summaries/\",\"proteome_vs_interactome_summary_\",n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\",date,\".txt\", sep = \"\")\n      if(!file.exists(filename.summary)) {\n        proteome_vs_interactome_summary.all\n      }\n      if(file.exists(filename.summary)) {\n        proteome_vs_interactome_summary_o = as.data.frame(read.delim(filename.summary, stringsAsFactors = F))\n        proteome_vs_interactome_summary.all = rbind(proteome_vs_interactome_summary.all, proteome_vs_interactome_summary_o)\n      }\n      #=====================================\n      filename.summary2 = paste(\"./summaries/\",\"whole_proteome_Uniprot_vs_IMEx_vs_protein.exist_summary_\",n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\",date,\".txt\", sep = \"\")\n      if(!file.exists(filename.summary2)) {\n        whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all\n      }\n      if(file.exists(filename.summary2)) {\n        whole_proteome_Uniprot_vs_IMEx_vs_protein.exist = as.data.frame(read.delim(filename.summary2, stringsAsFactors = F))\n        whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all = rbind(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all, whole_proteome_Uniprot_vs_IMEx_vs_protein.exist)\n      }\n      #=====================================\n      filename.summary3 = paste(\"./summaries/\",\"whole_proteome_Uniprot_vs_IntAct_vs_protein.exist_summary_\",n,\"_reviewed_\",r,\"_isoforms_\",i,\"_\",date,\".txt\", sep = \"\")\n      if(!file.exists(filename.summary3)) {\n        whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all\n      }\n      if(file.exists(filename.summary3)) {\n        whole_proteome_Uniprot_vs_IntAct_vs_protein.exist = as.data.frame(read.delim(filename.summary3, stringsAsFactors = F))\n        whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all = rbind(whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all, whole_proteome_Uniprot_vs_IntAct_vs_protein.exist)\n      }\n  }\n}\n}\n## save all species summary\nfilename.summary.all = paste(\"./results/\",\"proteome_vs_interactome_summary_\",date,\".txt\", sep = \"\")\nwrite.table(proteome_vs_interactome_summary.all, filename.summary.all, col.names=T,row.names=F,sep=\"\\t\",quote=F)\nfilename.summary.all2 = paste(\"./results/\",\"whole_proteome_Uniprot_vs_IMEx_vs_protein.exist_summary_\",date,\".txt\", sep = \"\")\nwrite.table(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all, filename.summary.all2, col.names=T,row.names=F,sep=\"\\t\",quote=F)\nfilename.summary.all3 = paste(\"./results/\",\"whole_proteome_Uniprot_vs_IntAct_vs_protein.exist_summary_\",date,\".txt\", sep = \"\")\nwrite.table(whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all, filename.summary.all3, col.names=T,row.names=F,sep=\"\\t\",quote=F)\n\n### ======================================================================== ###\n\n### combine the summaries for multiple species of how many interactors have non-uniprot and non-given-species identifiers\ninteractome_identifiers_summary.all = data.frame()\n  for (i in isoforms) {\n    for(n in SPECIES_NAME) {\n      filename.summary = paste(\"./summaries/\",\"uniprotKB_IDs_and_\",n,\"_interactors_summary_isoforms_\",i,\"_\",date,\".txt\", sep = \"\")\n      if(!file.exists(filename.summary)) {\n        interactome_identifiers_summary.all\n      }\n      if(file.exists(filename.summary)) {\n        interactome_identifiers_summary.o = as.data.frame(read.delim(filename.summary, stringsAsFactors = F))\n        interactome_identifiers_summary.all = rbind(interactome_identifiers_summary.all, interactome_identifiers_summary.o)\n      }\n    }\n  }\ninteractome_identifiers_summary.all = unique(interactome_identifiers_summary.all)\n## save all species summary\nfilename.summary.all = paste(\"./results/\",\"interactome_identifiers_summary_\",date,\".txt\", sep = \"\")\nwrite.table(interactome_identifiers_summary.all, filename.summary.all, col.names=T,row.names=F,sep=\"\\t\",quote=F)\n\n### ======================================================================== ###\n## Plotting the number of interactors which have UniprotKB identifiers and belong to the species queried\ninteractome_identifiers_summary.all.s = interactome_identifiers_summary.all[,c(3,4,5,6,7)]\n## Transform table for plotting with ggplot2\nlibrary(reshape2)\ninteractome_identifiers_summary.all.s.m= melt(data = interactome_identifiers_summary.all.s,\n                                              id.vars = c(\"SPECIES_NAME\", \"SPECIES_ID\"),\n                                              variable.name = \"decription\",\n                                              value.name = \"number\")\n## rename yeast and E.coli\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"strain K12\", \"E. coli, strain K12\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"Caenorhabditis elegans\", \"C. elegans\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\ninteractome_identifiers_summary.all.s.m$SPECIES_NAME = gsub(\"Drosophila melanogaster\", \"D. melanogaster\", interactome_identifiers_summary.all.s.m$SPECIES_NAME)\n\n# plot\nlibrary(ggplot2)\nlibrary(dplyr)\n\nproteome_vs_interactome_plot <- ggplot(interactome_identifiers_summary.all.s.m, aes(x=SPECIES_NAME, y=number, fill=decription)) + geom_bar(width = 0.9, stat = \"identity\", position = \"stack\") + geom_label(aes(label=number), position = \"stack\", size = 4, label.padding = unit(0.08, \"lines\")) +\n  ggtitle(\"The number of interactors which have UniprotKB identifiers and belong to the species queried\")# + theme(text=element_text(size=13,  family=\"serif\"))\nproteome_vs_interactome_plot\n# save plot\nfilename=paste(\"./results/\", \"interactome_identifiers_summary_plot_SMALL\",date,\".png\", sep = \"\")\nggsave(filename, proteome_vs_interactome_plot, width = 12, height = 12)\n### ======================================================================== ###\n\n\n\n### ======================================================================== ###\n## Plotting with venn.diagram - Uniprot vs IMEx (or IntAct)\n# code to be modified for different graphs\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\nreviewed_venn = 2                 # 1 or 2\nIMExdatabase = \"IMEx\"    # \"X0469.IntAct.\" or \"IMEx\"\n### ======================================================================== ###\n# non-modifyable code\nproteome_vs_interactome_summary.all$species.name = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", proteome_vs_interactome_summary.all$species.name)\nproteome_vs_interactome_summary.all$species.name = gsub(\"strain K12\", \"Escherichia coli, strain K12\", proteome_vs_interactome_summary.all$species.name)\nSPECIES_NAME = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", SPECIES_NAME)\nSPECIES_NAME = gsub(\"strain K12\", \"Escherichia coli, strain K12\", SPECIES_NAME)\nlibrary(dplyr)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == TRUE)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, database == IMExdatabase)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, database == IMExdatabase)\n\nlibrary(VennDiagram)\ngrid.newpage()\n\nif(reviewed_venn == 2){plotname = paste0(\"Proteome (SwissProt) coverage by interaction databases(\",IMExdatabase,\")\")\ndatabasename = \"SwissProt\"}\nif(reviewed_venn == 1){plotname = paste0(\"Proteome (all UniprotKB) coverage by interaction databases(\",IMExdatabase,\")\")\ndatabasename = \"UniprotKB\"}\n\npushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), \"npc\"), \n                                         heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), \"npc\"))))\n\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))\nx =grid.text(plotname, x = unit(0.7, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))\nx =grid.text(\"isoforms included\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))\nx =grid.text(\"isoforms excluded\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\n\nfor (i in 1:length(SPECIES_NAME)) {\n  \n  pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))\n  x =grid.text(SPECIES_NAME[i], x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))\n  source(\"double.venn.prot.R\")\n  venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))\n  source(\"double.venn.prot.R\")\n  venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)\n  popViewport()\n}\n\n## code below generates filename\npaste(\"whole_proteome_\", databasename,\"_vs_interactome_\",IMExdatabase,\"_vennD_\", date, sep = \"\")\n\n### ======================================================================== ###\n\n\n\n### ======================================================================== ###\n## Plotting overlaps -Uniprot -IMEx -protein evidence- without numbers\n# code to be modified for different graphs\nSPECIES_NAME = c(\"Homo sapiens\", \"Mus musculus\", \"strain ATCC 204508\", \"strain K12\", \"Drosophila melanogaster\", \"Caenorhabditis elegans\", \"Arabidopsis thaliana\")\nIMExdatabase = \"IMEx\"    # \"X0469.IntAct.\" or \"IMEx\"\n## missing_proteins = TRUE => proteins missing protein evidence are shown\n## missing_proteins = FALSE => proteins for which protein evidence exists are shown\nmissing_proteins = TRUE\n### ======================================================================== ###\n# non-modifyable code\nSPECIES_NAME = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", SPECIES_NAME)\nSPECIES_NAME = gsub(\"strain K12\", \"Escherichia coli, strain K12\", SPECIES_NAME)\n\nif(IMExdatabase == \"IMEx\"){\nwhole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all$species_name = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all$species_name)\nwhole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all$species_name = gsub(\"strain K12\", \"Escherichia coli, strain K12\", whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all$species_name)\nlibrary(dplyr)\nif(missing_proteins == TRUE){whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all$C = rep(\"missing_protein_evidence\",length(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all$C))}\nproteome_vs_interactome_summary.all_isof = filter(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all, reviewed == 1)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == FALSE)\nproteome_vs_interactome_summary.all_noisof = filter(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all, reviewed == 2)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)\n}\nif(IMExdatabase == \"X0469.IntAct.\"){\nwhole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all$species_name = gsub(\"strain ATCC 204508\", \"S. cerevisiae, strain S288c\", whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all$species_name)\nwhole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all$species_name = gsub(\"strain K12\", \"Escherichia coli, strain K12\", whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all$species_name)\nlibrary(dplyr)\nif(missing_proteins == TRUE){whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all$C = rep(\"missing_protein_evidence\",length(whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all$C))}\nproteome_vs_interactome_summary.all_isof = filter(whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all, reviewed == 1)\nproteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == FALSE)\nproteome_vs_interactome_summary.all_noisof = filter(whole_proteome_Uniprot_vs_IntAct_vs_protein.exist.all, reviewed == 2)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)\n}\nlibrary(VennDiagram)\ngrid.newpage()\n\nif(missing_proteins == TRUE){plotname = paste0(\"Proteome coverage by interaction databases (\", IMExdatabase,\"), overlap with missing evidence at the protein level (from Uniprot)\")\ndatabasename = \"UniprotKB\"}\nif(missing_proteins == FALSE){plotname = paste0(\"Proteome coverage by interaction databases (\", IMExdatabase,\"), overlap with evidence at the protein level (from Uniprot)\")\ndatabasename = \"UniprotKB\"}\n\npushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), \"npc\"), \n                                         heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), \"npc\"))))\n\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))\nx =grid.text(plotname, x = unit(0.7, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))\nx =grid.text(\"UniprotKB, isoforms excluded\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\npushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))\nx =grid.text(\"SwissProt, isoforms excluded\", x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\npopViewport()\n\nfor (i in 1:length(SPECIES_NAME)) {\n  \n  pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))\n  x =grid.text(SPECIES_NAME[i], x = unit(0.5, \"npc\"),y= unit(0.5, \"npc\"))\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))\n  source(\"triple.venn.prot.R\")\n  venn = triple.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = TRUE)\n  popViewport()\n  \n  pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))\n  source(\"triple.venn.prot.R\")\n  venn = triple.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = TRUE)\n  popViewport()\n}\n\n## code below generates filename\n# missing_proteins = TRUE => shows proteins missing protein evidence, \n# missing_proteins = FALSE => shows proteins having protein evidence\npaste(\"whole_proteome_vs_interactome_\",IMExdatabase,\"_vs_missing_protein_evidence_isoforms_excluded_vennD_\", date, sep = \"\")\n\n### ======================================================================== ###\nlibrary(dplyr)\nproteome_vs_interactome_summary.all_noisof = filter(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all, reviewed == 2)\nproteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)\nwhole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all.spl = split(proteome_vs_interactome_summary.all_noisof, whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all$species_name)\nfisher.test.missing.proteins = function(y){\nz = data.frame(with_protein_evidence = c(NA, NA), without_protein_evidence = c(NA, NA), row.names = c(\"interactome\", \"no_interactome\"))\nz$with_protein_evidence[1] = y$whole_proteome_Uniprot_and_IMEx_not_missing_protein_evidence\nz$with_protein_evidence[2] = y$whole_proteome_Uniprot_exclusively\nz$without_protein_evidence[1] = y$IMEx_and_missing_protein_evidence\nz$without_protein_evidence[2] = y$whole_proteome_Uniprot_and_missing_protein_evidence_not_IMEx\nz = t(z)\nfisher.test(z)\nchisq.test(z)\nreturn(fisher.test(z)$conf.int)\n}\nprint(\"Confidence interval of odds ratio (exact Fisher test)\")\nprint(\"if a protein doesnt have evidence at the protein level it is more likely to be missing in IntAct\")\nsapply(whole_proteome_Uniprot_vs_IMEx_vs_protein.exist.all.spl, fisher.test.missing.proteins)\n",
    "created" : 1478517285163.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3368363008",
    "id" : "EC282F9A",
    "lastKnownWriteTime" : 1481018355,
    "last_content_update" : 1481018355726,
    "path" : "~/Desktop/VItalii_EBI/imex_vs_uniprot/intact vs uniprot analysis.R",
    "project_path" : "intact vs uniprot analysis.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}