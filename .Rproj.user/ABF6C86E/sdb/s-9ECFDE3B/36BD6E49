{
    "collab_server" : "",
    "contents" : "## the function to query PSICQUIC for interactions given:\n### SPECIES_NAME\n### SPECIES_ID (default NA)\n### databases\n### date - option allows to read already saved files\n### detmethod - optional\n### pmethod - optional\n\nquery_PSICQUIC_for_interactions = function(SPECIES_ID = NA, SPECIES_NAME = NA, databases = NA, date = Sys.Date(), detmethod = NA, pmethod = NA) {\n\n## checks if databases argument was provided, if not - sets default - all IMEX databases\nif(is.na(databases)[1]){ \n  databases = c(\"IntAct\", \"MINT\", \"bhf-ucl\", \"MPIDB\", \"MatrixDB\", \"HPIDb\",\"I2D-IMEx\",\"InnateDB-IMEx\", \"MolCon\", \"UniProt\", \"MBInfo\")\n}\n\n## Converts SPECIES_NAME to SPECIES_ID if SPECIES_ID is not stated\nif(is.na(SPECIES_ID) & !is.na(SPECIES_NAME)) { \n  source(\"SPECIES_NAME_TO_ID.R\")\n  SPECIES_ID = SPECIES_NAME_TO_ID(SPECIES_NAME)$SPECIES_ID }\nelse {SPECIES_ID = SPECIES_ID}\n##============================================================================##\n  ## Constructs database filename and PSICQUIC_query depending on \n  ## whether detmethod and pmethod were provided as arguments\nif(!is.na(detmethod)){\n  if(!is.na(pmethod)){\n    database.name <- paste(\"./Data/\",\"databaseName_\", databases[1], \"...\", databases[length(databases)],\"_\",\"speciesID_\",SPECIES_ID,\"_\",SPECIES_NAME,\"_detmethod_\",detmethod, \"_pmethod_\", pmethod, \"_\", date, sep = \"\")\n    PSICQUIC_query = paste(\"species:\",SPECIES_ID,\" AND \",\"detmethod:\",detmethod,\" AND \",\"pmethod:\",pmethod, sep = \"\")\n  }\n  if(is.na(pmethod)){\n    database.name <- paste(\"./Data/\",\"databaseName_\", databases[1], \"...\", databases[length(databases)],\"_\",\"speciesID_\",SPECIES_ID,\"_\",SPECIES_NAME,\"_detmethod_\",detmethod, \"_\", date, sep = \"\")\n    PSICQUIC_query = paste(\"species:\",SPECIES_ID,\" AND \",\"detmethod:\",detmethod, sep = \"\")\n  }\n}\nif(is.na(detmethod)){\n    database.name <- paste(\"./Data/\",\"databaseName_\", databases[1], \"...\", databases[length(databases)],\"_\",\"speciesID_\",SPECIES_ID,\"_\",SPECIES_NAME,\"_\",date, sep = \"\")\n    PSICQUIC_query = paste(\"species:\",SPECIES_ID, sep = \"\")\n}\n## Checks if databases have been queried today, if not - sends query to the database\nif(!file.exists(database.name)) {\n  print(\"dowloaded using PSICQUIC\")\n## Load PSICQUIC functionality\nlibrary(PSICQUIC)\npsicquic <- PSICQUIC()\nproviders <- providers(psicquic)\n\n# query databases for all known SPECIES_ID protein interactions\nSPECIES_ID_interactome = data.frame()\nNO_SPECIES_ID_interactome = character(length = length(databases))\nfor(indices in 1:length(databases)) {\n  if(databases[indices] %in% providers) {\n    ## Query\n    SPECIES_ID_interactome_d <- rawQuery(psicquic, databases[indices], PSICQUIC_query)\n    ## add query results to the single table if the table format is compatible\n    if(ncol(SPECIES_ID_interactome_d)==ncol(SPECIES_ID_interactome) | (indices==1)) {\n      SPECIES_ID_interactome <- rbind(SPECIES_ID_interactome, SPECIES_ID_interactome_d)\n    }\n    ## if the query finds no proteins or the table format is not compatible\n    ## save that information\n    else {\n      NO_SPECIES_ID_interactome[indices] = databases[indices]\n    }\n  }\n}\n##============================================================================##\n## Save dowloaded query result into file \nsave(SPECIES_ID_interactome, file = database.name)\n##============================================================================##\n## Show what's found\nprint(paste(\"interactions for \",SPECIES_NAME,\", detmethod(\",detmethod,\"), pmethod(\",pmethod,\"): \", sep = \"\"), quote = F)\nprint(paste0(\"total number: \", nrow(SPECIES_ID_interactome)), quote = F)\nprint(paste(\"there is no interactions in the databases: \", sep = \"\"), quote = F)\nprint(NO_SPECIES_ID_interactome, quote = F)\nprint(paste(\"the number of interactions per database \", sep = \"\"), quote = F)\ndbs = as.data.frame(table(SPECIES_ID_interactome$V13, useNA = \"ifany\"))\ncolnames(dbs) = c(\"database\", \"N of interactions\")\nprint(dbs, quote = F)\n##============================================================================##\nquery_log_filename = paste(\"./Data/logs/\",\"there is no interactions for \",SPECIES_NAME,\" in the databases \",date, sep = \"\", \".txt\")\nwrite.table(NO_SPECIES_ID_interactome, query_log_filename, col.names=T,row.names=F,sep=\"\\t\",quote=F)\n##============================================================================##\nreturn(SPECIES_ID_interactome)\n}\n##============================================================================##\n## If file exists  - load, show what's found and return\nif(file.exists(database.name)) {\n  print(\"loaded from file\")\nload(database.name)\n##============================================================================##  \n  query_log_filename = paste(\"./Data/logs/\",\"there is no interactions for \",SPECIES_NAME,\" in the databases \",date, sep = \"\", \".txt\")\n  NO_SPECIES_ID_interactome = read.table(file = query_log_filename, header =T,sep=\"\\t\", stringsAsFactors = F)\n\n  ## Show what's found\n  print(paste(\"interactions for \",SPECIES_NAME,\", detmethod(\",detmethod,\"), pmethod(\",pmethod,\"): \", sep = \"\"), quote = F)\n  print(paste0(\"total number: \", nrow(SPECIES_ID_interactome)), quote = F)\n  print(paste(\"there is no interactions in the databases: \", sep = \"\"), quote = F)\n  print(NO_SPECIES_ID_interactome, quote = F)\n  print(paste(\"the number of interactions per database \", sep = \"\"), quote = F)\n  dbs = as.data.frame(table(SPECIES_ID_interactome$V13, useNA = \"ifany\"))\n  colnames(dbs) = c(\"database\", \"N of interactions\")\n  print(dbs, quote = F)\n##============================================================================##\nreturn(SPECIES_ID_interactome)\n}\n}",
    "created" : 1483473080962.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "261672126",
    "id" : "36BD6E49",
    "lastKnownWriteTime" : 1483725948,
    "last_content_update" : 1483725948,
    "path" : "~/Desktop/VItalii_EBI/imex_vs_uniprot/query_PSICQUIC_for_interactions.R",
    "project_path" : "query_PSICQUIC_for_interactions.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}