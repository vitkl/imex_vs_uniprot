venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
}
### combine the summaries for multiple species of how many interactors have non-uniprot identifiers
interactome_identifiers_summary.all = data.frame()
for (i in isoforms) {
for(n in SPECIES_NAME) {
filename.summary = paste("./summaries/","uniprotKB_IDs_and_",n,"_biogrid_from_mentha_interactors_summary", "_isoforms_",i,"_", date,".txt", sep = "")
if(!file.exists(filename.summary)) {
interactome_identifiers_summary.all
}
if(file.exists(filename.summary)) {
interactome_identifiers_summary.o = as.data.frame(read.delim(filename.summary, stringsAsFactors = F))
interactome_identifiers_summary.all = rbind(interactome_identifiers_summary.all, interactome_identifiers_summary.o)
}
}
}
interactome_identifiers_summary.all = unique(interactome_identifiers_summary.all)
## save all species summary
filename.summary.all = paste("./results/","interactome_identifiers_BioGRID_summary_",date,".txt", sep = "")
write.table(interactome_identifiers_summary.all, filename.summary.all, col.names=T,row.names=F,sep="\t",quote=F)
#################
interactome_identifiers_summary.all.s = interactome_identifiers_summary.all[,c(3,4,5,6,7)]
## Transform table for plotting with ggplot2
library(reshape2)
interactome_identifiers_summary.all.s.m= melt(data = interactome_identifiers_summary.all.s,
id.vars = c("SPECIES_NAME", "SPECIES_ID"),
variable.name = "decription",
value.name = "number")
interactome_identifiers_summary.all.s.m=unique(interactome_identifiers_summary.all.s.m)
## rename yeast and E.coli
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("strain K12", "E. coli, strain K12", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("Caenorhabditis elegans", "C. elegans", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("Drosophila melanogaster", "D. melanogaster", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
# filter out non-uniprot identifiers to make picture clearer
interactome_identifiers_summary.all.s.m$decription = gsub("\\.", " ", interactome_identifiers_summary.all.s.m$decription)
ind = interactome_identifiers_summary.all.s.m$decription != "interacting partners with the other identifier"
interactome_identifiers_summary.all.s.m = interactome_identifiers_summary.all.s.m[ind,]
# plot
library(ggplot2)
library(dplyr)
proteome_vs_interactome_plot <- ggplot(interactome_identifiers_summary.all.s.m, aes(x=SPECIES_NAME, y=number, fill=decription,label=number)) + geom_bar(width = 0.9, stat = "identity", position = "stack") + geom_label(position = "stack", size = 4, label.padding = unit(0.08, "lines")) +
ggtitle("The number of interacting partners which have UniprotKB identifiers \n and belong to the species of interest") + theme(axis.text.x=element_text(angle = 20), axis.title.x = element_text(size = 0)) + ylab("number of proteins")
proteome_vs_interactome_plot
# save plot
# filename=paste("./results/", "interactome_identifiers_summary_plot_SMALL",date,".png", sep = "")
# ggsave(filename, proteome_vs_interactome_plot, width = 12, height = 12)
### ======================================================================== ###
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
proteome_vs_imex_details_f_minus_odor = proteome_vs_imex_details_f[-grep("Odor",
proteome_vs_imex_details_f$Protein.names),]
proteome_vs_imex_details_f_minus_odor_olf = proteome_vs_imex_details_f_minus_odor[-grep("Olfactory",
proteome_vs_imex_details_f_minus_odor$Protein.names),]
SwissProt_not_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx=="SwissProt_not_IMEX"]
SwissProt_and_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx=="SwissProt_and_IMEX"]
## is the distibution of mass or log(mass) normal?
library(rafalib)
mypar(2,2)
popsd(log10(SwissProt_not_IMEX))
median(log10(SwissProt_not_IMEX))
mad(log10(SwissProt_not_IMEX))
{
qqnorm(log10(SwissProt_not_IMEX), main = "SwissProt_not_IMEX, log(protein mass)")
qqline(log10(SwissProt_not_IMEX))
qqnorm(log10(SwissProt_and_IMEX), main = "SwissProt_and_IMEX, log(protein mass)")
qqline(log10(SwissProt_and_IMEX))
qqnorm((SwissProt_not_IMEX), main = "SwissProt_not_IMEX, protein mass")
qqline((SwissProt_not_IMEX))
qqnorm((SwissProt_and_IMEX), main = "SwissProt_and_IMEX, protein mass")
qqline((SwissProt_and_IMEX))
}
## it indeed is
## Monte-Carlo simulation
## is there a significant difference in protein mass?
# code can be used for things other than mass
set.seed(1)
# sample size
Ns <- seq(5, 350, 20)
lengthNs = length(Ns)
# number of simulations
B = 1000
# function which takes samples and does Wilcox test
simulation = function(n){
# x = cbind( matrix(sample(SwissProt_not_IMEX, B*n),B,n)
# y = matrix(sample(SwissProt_and_IMEX, B*n),B,n)
# genefilter::rowttests()
wilcox.test.rr = matrix(0, 1, 3)
x = sample(SwissProt_not_IMEX, n)
y = sample(SwissProt_and_IMEX, n)
wilcox.test.rr[1,c(1,2)] = wilcox.test(x, y, conf.int = T)$conf.int
wilcox.test.rr[1,3] = wilcox.test(x, y, conf.int = T)$p.value
return(wilcox.test.rr)
}
wilcox.test.rr = matrix(0, lengthNs, 3)
# looping Monte-Carlo over samples sizes ]
# for (n in 1:lengthNs) {
#   z =replicate(B, simulation(Ns[n]), simplify = T)
#   wilcox.test.rr[n,] = rowMeans(z)
# }
xx =cbind(wilcox.test.rr, Ns)
qplot(xx[,4], xx[,3], ylab = "Wilcox test p-val", xlab = "proteins sampled, N", main = "this test doesn't make sense - \n why would we do bootstrap rather than \n just to measure how likely is that we get the result \n as extreme if we just sample two groups from general population \n which is exatly what permutation test does?")
# permutations - wilcox test
proteome_vs_imex_details_f_shuffle = as.data.table(proteome_vs_imex_details_f[,c("Mass","whole_proteome_Uniprot_IMEx")])
proteome_vs_imex_details_f_shuffle[,Mass := log10(Mass)]
proteome_vs_imex_details_f_shuffle. = copy(proteome_vs_imex_details_f_shuffle)
set.seed(1)
wilcox.test.r10000 = replicate(10,{
proteome_vs_imex_details_f_shuffle.[,whole_proteome_Uniprot_IMEx := sample(whole_proteome_Uniprot_IMEx)]
wilcox.test.r = wilcox.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f_shuffle.)$statistic
},simplify = T)
# permutations - ttest
ttest.r10000 = replicate(10,{
proteome_vs_imex_details_f_shuffle.[,whole_proteome_Uniprot_IMEx := sample(whole_proteome_Uniprot_IMEx)]
t.test.r = t.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f_shuffle.)$statistic
},simplify = T)
## testing the difference in protein mass distributions
##of proteins absent/present in IMEx using Wilcox rank test
wilcox.test.r = wilcox.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f)
ttest_r = t.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f)
{
library(rafalib)
mypar(1,2)
hist(wilcox.test.r10000, xlim = c(min(wilcox.test.r10000),wilcox.test.r$statistic+wilcox.test.r$statistic/2))
abline(v = wilcox.test.r$statistic, col = "red")
hist(ttest.r10000, xlim = c(min(ttest.r10000),ttest_r$statistic+ttest_r$statistic/2))
abline(v = ttest_r$statistic, col = "red")
}
head(small_scale_MI_score)
gitignore = c("./Data/clustered_scored/large_scale_100_02_17_all_IntAct_cluster_local.txt", "./Data/clustered_scored/small_scale_100_02_17_all_IntAct_cluster_local.txt", readLines(".gitignore"))
write(gitignore, ".gitignore")
scale_of_the_study_MIscore[, Confidence_values := gsub("^intact-miscore:[[:digit:]]\\.[[:digit:]].*\\|miscore:","", V15)]
large_scale_MI_score = fread("./Data/clustered_scored/large_scale_100_02_17_all_IntAct_cluster_local.txt", header = F, stringsAsFactors = F)
large_scale_MI_score = fread("./Data/clustered_scored/large_scale_100_02_17_all_IntAct_cluster_local.txt", header = F, stringsAsFactors = F)
large_scale_MI_score[,scale_of_the_study := "large_scale"]
small_scale_MI_score = fread("./Data/clustered_scored/small_scale_100_02_17_all_IntAct_cluster_local.txt", header = F, stringsAsFactors = F)
small_scale_MI_score[,scale_of_the_study := "small_scale"]
scale_of_the_study_MIscore = rbind(large_scale_MI_score,small_scale_MI_score)
scale_of_the_study_MIscore[, Confidence_values := gsub("^intact-miscore:[[:digit:]]\\.[[:digit:]].*\\|miscore:","", V15)]
head(small_scale_MI_score)
head(scale_of_the_study_MIscore)
large_scale_MI_score = fread("./Data/clustered_scored/large_scale_100_02_17_all_IntAct_cluster_local.txt", header = F, stringsAsFactors = F)
large_scale_MI_score[,scale_of_the_study := "large_scale"]
small_scale_MI_score = fread("./Data/clustered_scored/small_scale_100_02_17_all_IntAct_cluster_local.txt", header = F, stringsAsFactors = F)
small_scale_MI_score[,scale_of_the_study := "small_scale"]
scale_of_the_study_MIscore = rbind(large_scale_MI_score,small_scale_MI_score)
scale_of_the_study_MIscore[, Confidence_values := gsub("^intact-miscore:[[:digit:]]\\.[[:digit:]].*\\|miscore:","", V15)]
scale_of_the_study_MIscore[, Confidence_values := gsub("-","NA",Confidence_values)]
scale_of_the_study_MIscore[, Confidence_values := as.numeric(Confidence_values)]
all.IntAct[, Interaction_identifiers := unlist(gsubfn::strapplyc(V14,"EBI-[[:digit:]]+",simplify = T)), by =V14]
all.IntAct[, Interaction_identifiers := unlist(gsubfn::strapplyc(V14,"EBI-[[:digit:]]+",simplify = T)), by = V14]
scale_of_the_study_MIscore[, Interaction_identifiers := unlist(gsubfn::strapplyc(V14,"EBI-[[:digit:]]+",simplify = T)), by = V14]
dim(scale_of_the_study_MIscore)
dim(all.IntAct)
dim(small_scale_MI_score)
dim(large_scale_MI_score)
large_scale_MI_score = large_scale_MI_score[,.(V14,V15,scale_of_the_study)]
large_scale_MI_score = fread("./Data/clustered_scored/large_scale_100_02_17_all_IntAct_cluster_local.txt", header = F, stringsAsFactors = F)
large_scale_MI_score[,scale_of_the_study := "large_scale"]
large_scale_MI_score = large_scale_MI_score[,.(V14,V15,scale_of_the_study)]
small_scale_MI_score = fread("./Data/clustered_scored/small_scale_100_02_17_all_IntAct_cluster_local.txt", header = F, stringsAsFactors = F)
small_scale_MI_score[,scale_of_the_study := "small_scale"]
small_scale_MI_score = small_scale_MI_score[,.(V14,V15,scale_of_the_study)]
scale_of_the_study_MIscore = rbind(large_scale_MI_score,small_scale_MI_score)
library(compiler)
intact_vs_uniprot <- cmpfun(intact_vs_uniprot)
source("intact_vs_uniprot.R")
library(compiler)
intact_vs_uniprot <- cmpfun(intact_vs_uniprot)
source("intact_vs_uniprot.R")
c = proc.time()
for (i in isoforms) {
for (r in reviewed) {
for (n in SPECIES_NAME) {
intact_vs_uniprot(SPECIES_NAME = n, reviewed = r, isoforms = i, missing_proteins = TRUE, date = date, databases = databases)
message(paste("- ",n," -  reviewed", r, " -  isoforms included", i))
}
}
}
proc.time()-c
library(compiler)
intact_vs_uniprot <- cmpfun(intact_vs_uniprot)
c = proc.time()
for (i in isoforms) {
for (r in reviewed) {
for (n in SPECIES_NAME) {
intact_vs_uniprot(SPECIES_NAME = n, reviewed = r, isoforms = i, missing_proteins = TRUE, date = date, databases = databases)
message(paste("- ",n," -  reviewed", r, " -  isoforms included", i))
}
}
}
proc.time()-c
## Plotting with venn.diagram - Uniprot vs IMEx
# code to be modified for different graphs
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12", "Drosophila melanogaster", "Caenorhabditis elegans", "Arabidopsis thaliana")
reviewed_venn = 2                 # 1 or 2
IMExdatabase = "IMEx"    # "X0469.IntAct." or "IMEx"
### ======================================================================== ###
# non-modifyable code
proteome_vs_interactome_summary.all$species.name = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", proteome_vs_interactome_summary.all$species.name)
proteome_vs_interactome_summary.all$species.name = gsub("strain K12", "Escherichia coli, strain K12", proteome_vs_interactome_summary.all$species.name)
SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", SPECIES_NAME)
SPECIES_NAME = gsub("strain K12", "Escherichia coli, strain K12", SPECIES_NAME)
library(dplyr)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn & isoforms == TRUE & database == IMExdatabase)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, database == IMExdatabase)
library(VennDiagram)
{
grid.newpage()
if(reviewed_venn == 2){plotname = paste0("Proteome (SwissProt) coverage by interaction databases(",IMExdatabase,")")
databasename = "SwissProt"}
if(reviewed_venn == 1){plotname = paste0("Proteome (all UniprotKB) coverage by interaction databases(",IMExdatabase,")")
databasename = "UniprotKB"}
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME)),1/((length(SPECIES_NAME)+1)*4)), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms included", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+1))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+1))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+1))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
}
human_isoform = proteome_vs_interactome_summary.all_isof$whole.proteome..Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$whole.proteome..Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"]
human_isoform_with_interactions = proteome_vs_interactome_summary.all_isof$whole.proteome..interactome.available[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$whole.proteome..interactome.available[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] + (proteome_vs_interactome_summary.all_isof$interactome..but.not.in.Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$interactome..but.not.in.Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"])
## Plotting with venn.diagram - Uniprot vs IMEx
# code to be modified for different graphs
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12", "Drosophila melanogaster", "Caenorhabditis elegans", "Arabidopsis thaliana")
reviewed_venn = 2                 # 1 or 2
IMExdatabase = "IMEx"    # "X0469.IntAct." or "IMEx"
### ======================================================================== ###
# non-modifyable code
proteome_vs_interactome_summary.all$species.name = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", proteome_vs_interactome_summary.all$species.name)
proteome_vs_interactome_summary.all$species.name = gsub("strain K12", "Escherichia coli, strain K12", proteome_vs_interactome_summary.all$species.name)
SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", SPECIES_NAME)
SPECIES_NAME = gsub("strain K12", "Escherichia coli, strain K12", SPECIES_NAME)
library(dplyr)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn & isoforms == TRUE & database == IMExdatabase)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, database == IMExdatabase)
library(VennDiagram)
{
grid.newpage()
if(reviewed_venn == 2){plotname = paste0("Proteome (SwissProt) coverage by interaction databases(",IMExdatabase,")")
databasename = "SwissProt"}
if(reviewed_venn == 1){plotname = paste0("Proteome (all UniprotKB) coverage by interaction databases(",IMExdatabase,")")
databasename = "UniprotKB"}
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME)),1/((length(SPECIES_NAME)+1)*4)), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms included", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+1))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+1))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+1))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
}
human_isoform = proteome_vs_interactome_summary.all_isof$whole.proteome..Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$whole.proteome..Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"]
human_isoform_with_interactions = proteome_vs_interactome_summary.all_isof$whole.proteome..interactome.available[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$whole.proteome..interactome.available[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] + (proteome_vs_interactome_summary.all_isof$interactome..but.not.in.Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$interactome..but.not.in.Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"])
system.time({
grid.newpage()
if(reviewed_venn == 2){plotname = paste0("Proteome (SwissProt) coverage by interaction databases(",IMExdatabase,")")
databasename = "SwissProt"}
if(reviewed_venn == 1){plotname = paste0("Proteome (all UniprotKB) coverage by interaction databases(",IMExdatabase,")")
databasename = "UniprotKB"}
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME)),1/((length(SPECIES_NAME)+1)*4)), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms included", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+1))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+1))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+1))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
})
system.time({
source("double.venn.prot.R")
grid.newpage()
if(reviewed_venn == 2){plotname = paste0("Proteome (SwissProt) coverage by interaction databases(",IMExdatabase,")")
databasename = "SwissProt"}
if(reviewed_venn == 1){plotname = paste0("Proteome (all UniprotKB) coverage by interaction databases(",IMExdatabase,")")
databasename = "UniprotKB"}
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME)),1/((length(SPECIES_NAME)+1)*4)), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms included", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+1))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+1))
venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+1))
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
})
system.time({
source("double.venn.prot.R")
library(compiler)
double.venn.prot <- cmpfun(double.venn.prot)
grid.newpage()
if(reviewed_venn == 2){plotname = paste0("Proteome (SwissProt) coverage by interaction databases(",IMExdatabase,")")
databasename = "SwissProt"}
if(reviewed_venn == 1){plotname = paste0("Proteome (all UniprotKB) coverage by interaction databases(",IMExdatabase,")")
databasename = "UniprotKB"}
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME)),1/((length(SPECIES_NAME)+1)*4)), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms included", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = length(SPECIES_NAME)+2))
x =grid.text("isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+1))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+1))
venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+1))
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
})
scale_of_the_study_MIscore[, Confidence_values := gsub("^intact-miscore:[[:digit:]]\\.[[:digit:]].*\\|miscore:","", V15)]
head(scale_of_the_study_MIscore)
scale_of_the_study_MIscore[, V15 := NULL]
head(scale_of_the_study_MIscore)
scale_of_the_study_MIscore[, grep("-",Confidence_values)]
scale_of_the_study_MIscore[, Confidence_values := gsub("-","NA",Confidence_values)]
inter_id = function(Interaction_identifiers,Confidence_values, scale_of_the_study) {
ids = gsubfn::strapplyc(Interaction_identifiers,"EBI-[[:digit:]]+",simplify = T)
data.table(Interaction_identifiers = ids,
Confidence_values = Confidence_values,
scale_of_the_study = scale_of_the_study)
}
x= scale_of_the_study_MIscore[, inter_id(Interaction_identifiers,Confidence_values, scale_of_the_study), by = Interaction_identifiers]
x= scale_of_the_study_MIscore[, inter_id(V14,Confidence_values, scale_of_the_study), by = Interaction_identifiers]
x= scale_of_the_study_MIscore[, inter_id(V14,Confidence_values, scale_of_the_study), by = V14]
enrichMap(enrichedGOterms, n = 20)
knitr::opts_chunk$set(echo = FALSE, results = "hide", warning = FALSE, message = FALSE, fig.keep = "all")
date = Sys.Date()
## Please specify the date for which you want to perform analysis (if not today)
date = as.Date("2017-02-23")
# git update-index --assume-unchanged .RData
# http://stackoverflow.com/questions/21043132/gitignore-just-doesnt-work-i-cant-get-it-to-ignore-ds-store-gitignore-fil
##====================================================================
suppressPackageStartupMessages({
library(data.table)
library(qvalue)
library(ggplot2)
})
##====================================================================
# read the saved table
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.table(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
##====================================================================
uniprot2enrichedGOterms = function(my_protein_set, reference_set){
suppressPackageStartupMessages({
library(clusterProfiler)
library(org.Hs.eg.db)})
ego <-  enrichGO(gene = my_protein_set, org.Hs.eg.db, keytype = "UNIPROT", ont = "BP",
pvalueCutoff = 1, pAdjustMethod = "BH", universe = reference_set, qvalueCutoff = 1,
minGSSize = 10, maxGSSize = Inf, readable = FALSE)
# ego_sorted = as.data.table(as.data.frame(ego)[order(as.data.frame(ego)$p.adjust),])
}
enrichedGOterms = uniprot2enrichedGOterms(
my_protein_set = proteome_vs_imex_details_f[IMEx == 0 & whole_proteome_Uniprot == 1,whole_proteome_IDs],
reference_set = proteome_vs_imex_details_f[whole_proteome_Uniprot == 1,whole_proteome_IDs]
)
dotplot(enrichedGOterms,showCategory = 20)
set.seed(16)
enrichMap(enrichedGOterms, n = 20)
cnetplot(enrichedGOterms, categorySize="pvalue")
plotGOgraph(enrichedGOterms)
##====================================================================
suppressPackageStartupMessages({
library(data.table)
library(qvalue)
library(ggplot2)
})
##====================================================================
# read the saved table
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.table(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
##====================================================================
uniprot2enrichedGOterms = function(my_protein_set, reference_set){
suppressPackageStartupMessages({
library(clusterProfiler)
library(org.Hs.eg.db)})
ego <-  enrichGO(gene = my_protein_set, org.Hs.eg.db, keytype = "UNIPROT", ont = "BP",
pvalueCutoff = 1, pAdjustMethod = "BH", universe = reference_set, qvalueCutoff = 1,
minGSSize = 10, maxGSSize = Inf, readable = FALSE)
# ego_sorted = as.data.table(as.data.frame(ego)[order(as.data.frame(ego)$p.adjust),])
}
enrichedGOterms = uniprot2enrichedGOterms(
my_protein_set = proteome_vs_imex_details_f[IMEx == 0 & whole_proteome_Uniprot == 1,whole_proteome_IDs],
reference_set = proteome_vs_imex_details_f[whole_proteome_Uniprot == 1,whole_proteome_IDs]
)
dotplot(enrichedGOterms,showCategory = 20)
set.seed(16)
enrichMap(enrichedGOterms, n = 20)
knitr::opts_chunk$set(echo = FALSE, results = "hide", warning = FALSE, message = FALSE, fig.keep = "all")
date = Sys.Date()
## Please specify the date for which you want to perform analysis (if not today)
date = as.Date("2017-02-23")
# git update-index --assume-unchanged .RData
# http://stackoverflow.com/questions/21043132/gitignore-just-doesnt-work-i-cant-get-it-to-ignore-ds-store-gitignore-fil
readLines(open_targets_associations_filename, n = 10)
open_targets_associations_filename = "./Data/16.12_association_data_fixed.json"
readLines(open_targets_associations_filename, n = 10)
js = readLines(open_targets_associations_filename)
?fromJSON
library(jsonlite)
?fromJSON
