### ======================================================================== ###
# non-modifyable code
proteome_vs_interactome_summary.all$species.name = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", proteome_vs_interactome_summary.all$species.name)
proteome_vs_interactome_summary.all$species.name = gsub("strain K12", "Escherichia coli, strain K12", proteome_vs_interactome_summary.all$species.name)
SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", SPECIES_NAME)
SPECIES_NAME = gsub("strain K12", "Escherichia coli, strain K12", SPECIES_NAME)
library(dplyr)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn & isoforms == TRUE & database == IMExdatabase)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn & isoforms == FALSE & database == IMExdatabase)
library(VennDiagram)
{
source("double.venn.prot.R")
grid.newpage()
if(reviewed_venn == 2){plotname = paste0("Proteome (SwissProt) coverage by interaction databases(",IMExdatabase,")")
databasename = "SwissProt"}
if(reviewed_venn == 1){plotname = paste0("Proteome (all UniprotKB) coverage by interaction databases(",IMExdatabase,")")
databasename = "UniprotKB"}
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))
x =grid.text("isoforms included", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))
x =grid.text("isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))
venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
}
human_isoform = proteome_vs_interactome_summary.all_isof$whole.proteome..Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$whole.proteome..Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"]
human_isoform_with_interactions = proteome_vs_interactome_summary.all_isof$whole.proteome..interactome.available[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$whole.proteome..interactome.available[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] + (proteome_vs_interactome_summary.all_isof$interactome..but.not.in.Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"] - proteome_vs_interactome_summary.all_noisof$interactome..but.not.in.Uniprot[proteome_vs_interactome_summary.all_isof["species.name"]=="Homo sapiens"])
filename.summary.all_biog = paste("./results/","whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_summary_",date,".txt", sep = "")
if(!file.exists(filename.summary.all_biog)){
## Enter SPECIES_NAME
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "Drosophila melanogaster", "Caenorhabditis elegans", "Arabidopsis thaliana")
## !! no "E.coli strain K12" in BioGRID from Mentha
## ## Use all Uniprot if reviewed == 1, only Swissprot data if reviewed == 2,
## ## TrEMBL data if reviewed == 3
reviewed = c(1, 2)
## ## Distinguish between isoforms or use only generic Uniprot IDs: TRUE / FALSE?
isoforms = c(FALSE) # not possible to distinguish isoforms for BioGRID
#============================================================================#
source("biogrid_from_mentha_vs_proteome_vs_imex.R")
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
biogrid_from_mentha_vs_proteome_vs_imex(SPECIES_NAME = n, reviewed = r, isoforms = i, date = date)
}
}
}
whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = data.frame()
reference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = data.frame()
whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha = data.frame()
source("SPECIES_NAME_TO_ID.R")
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
filename_vs_3 = paste("./analysis/","proteome_vs_interactome_vs_BioGRID_f_", SPECIES_ID,"_reviewed_",reviewed = r,"_isoforms_",isoforms = i,"_", date,".txt", sep = "")
biogrid_from_mentha_vs_proteome_vs_imex_f = as.data.frame(read.delim(filename_vs_3, stringsAsFactors = F))
#============================================================================#
## Calculating overlaps
source("A_vs_B_vs_C_overlap.R")
whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_temp = A_vs_B_vs_C_overlap(biogrid_from_mentha_vs_proteome_vs_imex_f,
A = "whole_proteome_Uniprot",
B = "IMEx",
C = "BioGRID_from_Mentha",
SPECIES_NAME = n, reviewed = r, isoforms = i)
whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = rbind(whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_temp)
whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha_temp = A_vs_B_vs_C_overlap(biogrid_from_mentha_vs_proteome_vs_imex_f,
A = "whole_proteome_Uniprot",
B = "X0469.IntAct.",
C = "BioGRID_from_Mentha",
SPECIES_NAME = n, reviewed = r, isoforms = i)
whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha = rbind(whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha, whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha_temp)
reference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_temp = A_vs_B_vs_C_overlap(biogrid_from_mentha_vs_proteome_vs_imex_f,
A = "reference_proteome_Uniprot",
B = "IMEx",
C = "BioGRID_from_Mentha",
SPECIES_NAME = n, reviewed = r, isoforms = i)
reference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = rbind(reference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, reference_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha_temp)
}
}
}
write.table(whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, filename.summary.all_biog, col.names=T,row.names=F,sep="\t",quote=F)
}
{
if(file.exists(filename.summary.all_biog)) whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha = fread(filename.summary.all_biog, sep = "\t", stringsAsFactors = F, data.table = F)
}
## Plotting overlaps - Uniprot IMEx BioGRID
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "Drosophila melanogaster", "Caenorhabditis elegans", "Arabidopsis thaliana")
IMExdatabase = "IMEx"    # "X0469.IntAct." or "IMEx"
### ======================================================================== ###
# non-modifyable code
if(IMExdatabase == "IMEx"){
whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha$species_name = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha$species_name)
library(dplyr)
proteome_vs_interactome_summary.all_isof = filter(whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, reviewed == 1)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == FALSE)
proteome_vs_interactome_summary.all_noisof = filter(whole_proteome_Uniprot_vs_IMEx_vs_BioGRID_from_Mentha, reviewed == 2)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)
}
if(IMExdatabase == "X0469.IntAct."){
whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha$species_name = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha$species_name)
library(dplyr)
proteome_vs_interactome_summary.all_isof = filter(whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha, reviewed == 1)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == FALSE)
proteome_vs_interactome_summary.all_noisof = filter(whole_proteome_Uniprot_vs_IntAct_vs_BioGRID_from_Mentha, reviewed == 2)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)
}
library(VennDiagram)
{
grid.newpage()
plotname = paste0("Proteome coverage by interaction databases, overlap between ", IMExdatabase," and BioGRID")
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))
x =grid.text("UniprotKB, isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))
x =grid.text("SwissProt, isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))
source("triple.venn.prot.R")
venn = triple.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = TRUE)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))
source("triple.venn.prot.R")
venn = triple.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = TRUE)
popViewport()
}
popViewport()
}
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12", "Drosophila melanogaster", "Caenorhabditis elegans", "Arabidopsis thaliana")
### combine the summaries for multiple species of how many interactors have non-uniprot and non-given-species identifiers
interactome_identifiers_summary.all = data.frame()
for (i in isoforms) {
for(n in SPECIES_NAME) {
filename.summary = paste("./summaries/","uniprotKB_IDs_and_",n,"_interactors_summary_isoforms_",i,"_",date,".txt", sep = "")
if(!file.exists(filename.summary)) {
interactome_identifiers_summary.all
}
if(file.exists(filename.summary)) {
interactome_identifiers_summary.o = as.data.frame(fread(filename.summary, stringsAsFactors = F, data.table = F))
interactome_identifiers_summary.all = rbind(interactome_identifiers_summary.all, interactome_identifiers_summary.o)
}
}
}
interactome_identifiers_summary.all = unique(interactome_identifiers_summary.all)
## Plotting the number of interactors which have UniprotKB identifiers and belong to the species queried
interactome_identifiers_summary.all.s = interactome_identifiers_summary.all[,c(3,4,5,6,7)]
## Transform table for plotting with ggplot2
library(reshape2)
interactome_identifiers_summary.all.s.m= melt(data = interactome_identifiers_summary.all.s,
id.vars = c("SPECIES_NAME", "SPECIES_ID"),
variable.name = "decription",
value.name = "number")
## rename yeast and E.coli
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("strain K12", "E. coli, strain K12", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("Caenorhabditis elegans", "C. elegans", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("Drosophila melanogaster", "D. melanogaster", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
# filter out non-uniprot identifiers to make picture clearer
interactome_identifiers_summary.all.s.m$decription = gsub("\\.", " ", interactome_identifiers_summary.all.s.m$decription)
ind = interactome_identifiers_summary.all.s.m$decription != "interacting partners with the other identifier"
interactome_identifiers_summary.all.s.m = interactome_identifiers_summary.all.s.m[ind,]
# plot how many interactors have non-uniprot and non-given-species identifiers
library(ggplot2)
library(dplyr)
ggplot(interactome_identifiers_summary.all.s.m, aes(x=SPECIES_NAME, y=number, fill=decription)) + geom_bar(width = 0.9, stat = "identity", position = "stack") + geom_label(aes(label=number), position = "stack", size = 4, label.padding = unit(0.08, "lines")) +
ggtitle("The number of interacting partners which have UniprotKB identifiers \n and belong to the species of interest") + theme(axis.text.x=element_text(angle = 20), axis.title.x = element_text(size = 0)) + ylab("number of proteins")
# save plot
# filename=paste("./results/", "interactome_identifiers_summary_plot_SMALL",date,".png", sep = "")
# ggsave(filename, proteome_vs_interactome_plot, width = 12, height = 12)
# IntAct FTP contains the following databases = c("IntAct", "MINT", "bhf-ucl", "MPIDB", "MatrixDB",
#               "HPIDb","I2D-IMEx","InnateDB-IMEx", "MolCon", "UniProt", "MBInfo")
# this will take time and data traffic ~ 2.5GB
url_intact = "ftp://ftp.ebi.ac.uk/pub/databases/intact/current/psimitab/intact.txt"
filename_intact = paste0("./Data/IntAct_MITAB27_release_", format(Sys.Date(), "%m-%Y.txt"))
if(!file.exists(filename_intact)) {
downloader::download(url_intact, filename_intact)
}
# Read all IntAct
library(data.table)
all.IntAct = fread(filename_intact)
# changing column names to data.table-compatible format
{
(colnames_IntAct = colnames(all.IntAct))
colnames(all.IntAct) = gsub(" ","_",colnames(all.IntAct))
colnames(all.IntAct) = gsub("\\(|\\)","",colnames(all.IntAct))
colnames(all.IntAct) = gsub("#","",colnames(all.IntAct))
}
# cleaning Taxid "taxid:9606(human)|taxid:9606(Homo sapiens)" to 9606
{
all.IntAct[, Taxid_interactor_A := gsub("taxid:|\\(.*$","",Taxid_interactor_A)]
all.IntAct[, Taxid_interactor_B := gsub("taxid:|\\(.*$","",Taxid_interactor_B)]
all.IntAct[, Host_organisms := gsub("taxid:|\\(.*$","",Host_organisms)]
# saving identifier types and cleaning interactor ids
all.IntAct[, interactor_IDs_databases_A := gsub(":.*$","",IDs_interactor_A)]
all.IntAct[, interactor_IDs_databases_B := gsub(":.*$","",IDs_interactor_B)]
all.IntAct[, IDs_interactor_A := gsub("^.*:","",IDs_interactor_A)]
all.IntAct[, IDs_interactor_B := gsub("^.*:","",IDs_interactor_B)]
# cleaning other information
all.IntAct[, bait_prey_status_A := gsub("^.*\\(|\\)","",Experimental_roles_interactor_A)]
all.IntAct[, bait_prey_status_B := gsub("^.*\\(|\\)","",Experimental_roles_interactor_B)]
all.IntAct[, Publication_Identifiers := gsub("^.*pubmed:|\\|.*$","",Publication_Identifiers)]
all.IntAct[, Confidence_values := gsub("^intact-miscore:","",Confidence_values)]
all.IntAct[, Confidence_values := gsub("-","NA",Confidence_values)]
all.IntAct[, Confidence_values := as.numeric(Confidence_values)]
all.IntAct[, Interaction_identifiers := unlist(gsubfn::strapplyc(Interaction_identifiers,"EBI-[[:digit:]]+",simplify = T)), by =Interaction_identifiers]
}
# checking mixed mouse / human interactions
{
the_host_for_mouse_human_pairs = all.IntAct[((Taxid_interactor_A == "9606" & Taxid_interactor_B == "10090")  |
(Taxid_interactor_A == "10090" & Taxid_interactor_B == "9606")) &
interactor_IDs_databases_A == "uniprotkb" & interactor_IDs_databases_B == "uniprotkb"
, table(Host_organisms)]
the_host_for_mouse_human_pairs_mouse_as_bait = all.IntAct[((Taxid_interactor_A == "9606" & Taxid_interactor_B == "10090")  |
(Taxid_interactor_A == "10090" & Taxid_interactor_B == "9606")) &
interactor_IDs_databases_A == "uniprotkb" & interactor_IDs_databases_B == "uniprotkb" &
((bait_prey_status_A == "prey" & bait_prey_status_B == "bait")  |
(bait_prey_status_A == "bait" & bait_prey_status_B == "prey"))
, table(Host_organisms)]
mouse_as_bait = all.IntAct[((Taxid_interactor_A == "9606" & Taxid_interactor_B == "10090")  |
(Taxid_interactor_A == "10090" & Taxid_interactor_B == "9606")) &
interactor_IDs_databases_A == "uniprotkb" & interactor_IDs_databases_B == "uniprotkb" &
((bait_prey_status_A == "prey" & bait_prey_status_B == "bait")  |
(bait_prey_status_A == "bait" & bait_prey_status_B == "prey")) &
Host_organisms == "9606"
,.(IDs_interactor_A, IDs_interactor_B, Taxid_interactor_A, Taxid_interactor_B)]
mouse_as_bait_human_preys = length(unique(c(mouse_as_bait[(Taxid_interactor_A == "9606"), IDs_interactor_A],
mouse_as_bait[(Taxid_interactor_B == "9606"), IDs_interactor_B])))
mouse_as_bait_mouse_baits = length(unique(c(mouse_as_bait[(Taxid_interactor_A == "10090"), IDs_interactor_A],
mouse_as_bait[(Taxid_interactor_B == "10090"), IDs_interactor_B])))
N_pmid_mouse_as_bait_in_human = all.IntAct[((Taxid_interactor_A == "9606" & Taxid_interactor_B == "10090")  |
(Taxid_interactor_A == "10090" & Taxid_interactor_B == "9606")) &
interactor_IDs_databases_A == "uniprotkb" & interactor_IDs_databases_B == "uniprotkb" &
((bait_prey_status_A == "prey" & bait_prey_status_B == "bait")  |
(bait_prey_status_A == "bait" & bait_prey_status_B == "prey")) &
Host_organisms == "9606"
,length(unique(Publication_Identifiers))]
all.IntAct[Taxid_interactor_A == "9606" & Taxid_interactor_B == "9606", table(Host_organisms)]
}
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
##============================================================================##
## querying Uniprot for the list of proteins (only mapped to Uniprot)
## downolading length, mass, SNPs, isoforms, annotation score, existence attribute
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
## reading logic table and getting list of proteins
if(n != "strain K12"){
filename_vs_3 = paste("./analysis/","proteome_vs_interactome_vs_BioGRID_f_", SPECIES_ID,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")}
if(n == "strain K12"){
filename_vs_3 = paste("./analysis/","proteome_vs_interactome_f_", SPECIES_ID,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")}
biogrid_from_mentha_vs_proteome_vs_imex_f = as.data.frame(read.delim(filename_vs_3, stringsAsFactors = F))
source("download_whole_proteome.R")
whole_proteome_query = download_whole_proteome(SPECIES_ID, date = date)
colnames(whole_proteome_query)[2] = "Status"
uniprot_query = dplyr::filter(whole_proteome_query, Status == "reviewed")
##============================================================================##
## merging information from Uniprot to the logic table
proteome_vs_imex_details_f = merge(filter(biogrid_from_mentha_vs_proteome_vs_imex_f, whole_proteome_Uniprot==1),
uniprot_query,
by.x = "whole_proteome_IDs",
by.y = "Entry")
proteome_vs_imex_details_f$Mass = gsub(",","",proteome_vs_imex_details_f$Mass)
proteome_vs_imex_details_f$Mass = as.numeric(proteome_vs_imex_details_f$Mass)
## creating a factor variable for presence_in_Uniprot.presence_in_IMEx (1_0/1_1)
proteome_vs_imex_details_f[,length(proteome_vs_imex_details_f)+1] = interaction(proteome_vs_imex_details_f$whole_proteome_Uniprot, proteome_vs_imex_details_f$IMEx, sep = "_")
colnames(proteome_vs_imex_details_f)[length(proteome_vs_imex_details_f)] = paste0(colnames(proteome_vs_imex_details_f)[2], "_","IMEx")
levels(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx) = c("SwissProt_not_IMEX", "SwissProt_and_IMEX")
##============================================================================##
## saving combined logic table + protein properties from Uniprot
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
write.table(proteome_vs_imex_details_f,filename_vs_2,col.names=T,row.names=F,sep="\t",quote=F)
}
}
}
##====================================================================
suppressPackageStartupMessages({
library(data.table)
library(qvalue)
library(ggplot2)
})
##====================================================================
# read the saved table
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = fread(filename_vs_2, header = T, stringsAsFactors = F,quote="")
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
##====================================================================
uniprot2enrichedGOterms = function(my_protein_set, reference_set){
suppressPackageStartupMessages({
library(clusterProfiler)
library(org.Hs.eg.db)})
ego <-  enrichGO(gene = my_protein_set, org.Hs.eg.db, keytype = "UNIPROT", ont = "BP",
pvalueCutoff = 1, pAdjustMethod = "BH", universe = reference_set, qvalueCutoff = 1,
minGSSize = 10, maxGSSize = Inf, readable = FALSE)
# ego_sorted = as.data.table(as.data.frame(ego)[order(as.data.frame(ego)$p.adjust),])
}
enrichedGOterms = uniprot2enrichedGOterms(
my_protein_set = proteome_vs_imex_details_f[IMEx == 0 & whole_proteome_Uniprot == 1,whole_proteome_IDs],
reference_set = proteome_vs_imex_details_f[whole_proteome_Uniprot == 1,whole_proteome_IDs]
)
dotplot(enrichedGOterms,showCategory = 20)
depletedGOterms = uniprot2enrichedGOterms(
my_protein_set = proteome_vs_imex_details_f[IMEx == 1 & whole_proteome_Uniprot == 1,whole_proteome_IDs],
reference_set = proteome_vs_imex_details_f[whole_proteome_Uniprot == 1,whole_proteome_IDs]
)
dotplot(depletedGOterms,showCategory = 20)
set.seed(6)
library(igraph)
x =enrichMap(enrichedGOterms, n = 40,layout = layout_with_kk, vertex.label.cex = 0.8,vertex.size = 5, rescale=T)
#plot(setting.graph.attributes(x, node.size = 5))
source("GO_enrich_simplify_plot_bioc.R")
set.seed(1546)
new_depleted = GO_enrich_simplify_plot_bioc(protein_set = proteome_vs_imex_details_f[IMEx == 0 & whole_proteome_Uniprot == 1,unique(whole_proteome_IDs)],
reference_protein_set = proteome_vs_imex_details_f[whole_proteome_Uniprot == 1,unique(whole_proteome_IDs)],
identifier_type = "UNIPROT",
ontology = "BP",
pAdjustMethod_ = "fdr",
minSetSize = 50,
maxSetSize = 1000,
simplify_by = "GeneRatio",
simplify_fun = "function(x) eval(parse(text = x))",
similarity_calc_method = "Wang",
similarity_cutoff = 0.65,
visualize_result = "enrichMap",
above_corrected_pval = 0.05)
source("GO_enrich_simplify_plot_bioc.R")
set.seed(1546)
new_depleted = GO_enrich_simplify_plot_bioc(protein_set = proteome_vs_imex_details_f[IMEx == 0 & whole_proteome_Uniprot == 1,unique(whole_proteome_IDs)],
reference_protein_set = proteome_vs_imex_details_f[whole_proteome_Uniprot == 1,unique(whole_proteome_IDs)],
identifier_type = "UNIPROT",
ontology = "BP",
pAdjustMethod_ = "fdr",
minSetSize = 50,
maxSetSize = 1000,
simplify_by = "GeneRatio",
simplify_fun = "function(x) eval(parse(text = x))",
similarity_calc_method = "Wang",
similarity_cutoff = 0.65,
visualize_result = "enrichMap",
above_corrected_pval = 0.05)
source("GO_enrich_simplify_plot_bioc.R")
set.seed(1546)
new_depleted = GO_enrich_simplify_plot_bioc(protein_set = proteome_vs_imex_details_f[IMEx == 0 & whole_proteome_Uniprot == 1,unique(whole_proteome_IDs)],
reference_protein_set = proteome_vs_imex_details_f[whole_proteome_Uniprot == 1,unique(whole_proteome_IDs)],
identifier_type = "UNIPROT",
ontology = "BP",
pAdjustMethod_ = "fdr",
minSetSize = 50,
maxSetSize = 1000,
simplify_by = "GeneRatio",
simplify_fun = "function(x) eval(parse(text = x))",
similarity_calc_method = "Wang",
similarity_cutoff = 0.65,
visualize_result = "enrichMap",
above_corrected_pval = 0.05)
rm(list = ls())
gc()
# IntAct FTP contains the following databases = c("IntAct", "MINT", "bhf-ucl", "MPIDB", "MatrixDB",
#               "HPIDb","I2D-IMEx","InnateDB-IMEx", "MolCon", "UniProt", "MBInfo")
# this will take time and data traffic ~ 2.5GB
url_intact = "ftp://ftp.ebi.ac.uk/pub/databases/intact/current/psimitab/intact.txt"
filename_intact = paste0("./Data/IntAct_MITAB27_release_", format(Sys.Date(), "%m-%Y.txt"))
if(!file.exists(filename_intact)) {
downloader::download(url_intact, filename_intact)
}
# Read all IntAct
library(data.table)
all.IntAct = fread(filename_intact)
# changing column names to data.table-compatible format
{
(colnames_IntAct = colnames(all.IntAct))
colnames(all.IntAct) = gsub(" ","_",colnames(all.IntAct))
colnames(all.IntAct) = gsub("\\(|\\)","",colnames(all.IntAct))
colnames(all.IntAct) = gsub("#","",colnames(all.IntAct))
}
# cleaning Taxid "taxid:9606(human)|taxid:9606(Homo sapiens)" to 9606
all.IntAct[,.(IDs_interactor_A, IDs_interactor_B, Experimental_roles_interactor_A, Experimental_roles_interactor_B,  Taxid_interactor_A, Taxid_interactor_B, Host_organisms, Publication_Identifiers, Confidence_values, Interaction_identifiers)]
{
all.IntAct[, Taxid_interactor_A := gsub("taxid:|\\(.*$","",Taxid_interactor_A)]
all.IntAct[, Taxid_interactor_B := gsub("taxid:|\\(.*$","",Taxid_interactor_B)]
all.IntAct[, Host_organisms := gsub("taxid:|\\(.*$","",Host_organisms)]
# saving identifier types and cleaning interactor ids
all.IntAct[, interactor_IDs_databases_A := gsub(":.*$","",IDs_interactor_A)]
all.IntAct[, interactor_IDs_databases_B := gsub(":.*$","",IDs_interactor_B)]
all.IntAct[, IDs_interactor_A := gsub("^.*:","",IDs_interactor_A)]
all.IntAct[, IDs_interactor_B := gsub("^.*:","",IDs_interactor_B)]
# cleaning other information
all.IntAct[, bait_prey_status_A := gsub("^.*\\(|\\)","",Experimental_roles_interactor_A)]
all.IntAct[, bait_prey_status_B := gsub("^.*\\(|\\)","",Experimental_roles_interactor_B)]
all.IntAct[, Publication_Identifiers := gsub("^.*pubmed:|\\|.*$","",Publication_Identifiers)]
all.IntAct[, Confidence_values := gsub("^intact-miscore:","",Confidence_values)]
all.IntAct[, Confidence_values := gsub("-","NA",Confidence_values)]
all.IntAct[, Confidence_values := as.numeric(Confidence_values)]
all.IntAct[, Interaction_identifiers := unlist(gsubfn::strapplyc(Interaction_identifiers,"EBI-[[:digit:]]+",simplify = T)), by =Interaction_identifiers]
}
# checking mixed mouse / human interactions
{
the_host_for_mouse_human_pairs = all.IntAct[((Taxid_interactor_A == "9606" & Taxid_interactor_B == "10090")  |
(Taxid_interactor_A == "10090" & Taxid_interactor_B == "9606")) &
interactor_IDs_databases_A == "uniprotkb" & interactor_IDs_databases_B == "uniprotkb"
, table(Host_organisms)]
the_host_for_mouse_human_pairs_mouse_as_bait = all.IntAct[((Taxid_interactor_A == "9606" & Taxid_interactor_B == "10090")  |
(Taxid_interactor_A == "10090" & Taxid_interactor_B == "9606")) &
interactor_IDs_databases_A == "uniprotkb" & interactor_IDs_databases_B == "uniprotkb" &
((bait_prey_status_A == "prey" & bait_prey_status_B == "bait")  |
(bait_prey_status_A == "bait" & bait_prey_status_B == "prey"))
, table(Host_organisms)]
mouse_as_bait = all.IntAct[((Taxid_interactor_A == "9606" & Taxid_interactor_B == "10090")  |
(Taxid_interactor_A == "10090" & Taxid_interactor_B == "9606")) &
interactor_IDs_databases_A == "uniprotkb" & interactor_IDs_databases_B == "uniprotkb" &
((bait_prey_status_A == "prey" & bait_prey_status_B == "bait")  |
(bait_prey_status_A == "bait" & bait_prey_status_B == "prey")) &
Host_organisms == "9606"
,.(IDs_interactor_A, IDs_interactor_B, Taxid_interactor_A, Taxid_interactor_B)]
mouse_as_bait_human_preys = length(unique(c(mouse_as_bait[(Taxid_interactor_A == "9606"), IDs_interactor_A],
mouse_as_bait[(Taxid_interactor_B == "9606"), IDs_interactor_B])))
mouse_as_bait_mouse_baits = length(unique(c(mouse_as_bait[(Taxid_interactor_A == "10090"), IDs_interactor_A],
mouse_as_bait[(Taxid_interactor_B == "10090"), IDs_interactor_B])))
N_pmid_mouse_as_bait_in_human = all.IntAct[((Taxid_interactor_A == "9606" & Taxid_interactor_B == "10090")  |
(Taxid_interactor_A == "10090" & Taxid_interactor_B == "9606")) &
interactor_IDs_databases_A == "uniprotkb" & interactor_IDs_databases_B == "uniprotkb" &
((bait_prey_status_A == "prey" & bait_prey_status_B == "bait")  |
(bait_prey_status_A == "bait" & bait_prey_status_B == "prey")) &
Host_organisms == "9606"
,length(unique(Publication_Identifiers))]
all.IntAct[Taxid_interactor_A == "9606" & Taxid_interactor_B == "9606", table(Host_organisms)]
}
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
##============================================================================##
## querying Uniprot for the list of proteins (only mapped to Uniprot)
## downolading length, mass, SNPs, isoforms, annotation score, existence attribute
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
## reading logic table and getting list of proteins
if(n != "strain K12"){
filename_vs_3 = paste("./analysis/","proteome_vs_interactome_vs_BioGRID_f_", SPECIES_ID,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")}
if(n == "strain K12"){
filename_vs_3 = paste("./analysis/","proteome_vs_interactome_f_", SPECIES_ID,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")}
biogrid_from_mentha_vs_proteome_vs_imex_f = as.data.frame(read.delim(filename_vs_3, stringsAsFactors = F))
source("download_whole_proteome.R")
whole_proteome_query = download_whole_proteome(SPECIES_ID, date = date)
colnames(whole_proteome_query)[2] = "Status"
uniprot_query = dplyr::filter(whole_proteome_query, Status == "reviewed")
##============================================================================##
## merging information from Uniprot to the logic table
proteome_vs_imex_details_f = merge(filter(biogrid_from_mentha_vs_proteome_vs_imex_f, whole_proteome_Uniprot==1),
uniprot_query,
by.x = "whole_proteome_IDs",
by.y = "Entry")
proteome_vs_imex_details_f$Mass = gsub(",","",proteome_vs_imex_details_f$Mass)
proteome_vs_imex_details_f$Mass = as.numeric(proteome_vs_imex_details_f$Mass)
## creating a factor variable for presence_in_Uniprot.presence_in_IMEx (1_0/1_1)
proteome_vs_imex_details_f[,length(proteome_vs_imex_details_f)+1] = interaction(proteome_vs_imex_details_f$whole_proteome_Uniprot, proteome_vs_imex_details_f$IMEx, sep = "_")
colnames(proteome_vs_imex_details_f)[length(proteome_vs_imex_details_f)] = paste0(colnames(proteome_vs_imex_details_f)[2], "_","IMEx")
levels(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx) = c("SwissProt_not_IMEX", "SwissProt_and_IMEX")
##============================================================================##
## saving combined logic table + protein properties from Uniprot
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
write.table(proteome_vs_imex_details_f,filename_vs_2,col.names=T,row.names=F,sep="\t",quote=F)
}
}
}
rm(list = ls())
gc()
