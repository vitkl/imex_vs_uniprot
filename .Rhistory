downloader::download(paste0(uniprotAC2geneID_url,filenames[i]), uniprotAC2geneID_filename[i])
R.utils::gunzip(uniprotAC2geneID_filename[i])
# make git ignore big files
gitignore = c(substr(uniprotAC2geneID_filename.dat[i], 2, nchar(uniprotAC2geneID_filename.dat[i])),
readLines(".gitignore"))
write(gitignore, ".gitignore")
}
}
# reading files for uniprotAC to geneID mapping
uniprotAC2geneID = data.table()
for(i in 1:length(uniprotAC2geneID_filename.dat)){
temp = fread(uniprotAC2geneID_filename.dat[i], header = F)
temp = temp[V2 == "GeneID", .(V1, V3)]
uniprotAC2geneID = rbind(uniprotAC2geneID,temp)
rm(list = "temp")
}
## copy all.IntAct (data.table doesn't make an explicit copy while assigning DT = data.table())
all.IntAct.modif = copy(all.IntAct)
## map GeneIDs for IDs_interactor_A
{
colnames(uniprotAC2geneID)[2] = "IDs_interactor_A_GeneID"
all.IntAct.modif = merge(x=all.IntAct.modif, y=uniprotAC2geneID, by.x = "IDs_interactor_A", by.y = "V1", all.x=TRUE, all.y = F)
}
## map GeneIDs for IDs_interactor_B
{
colnames(uniprotAC2geneID)[2] = "IDs_interactor_B_GeneID"
all.IntAct.modif = merge(x=all.IntAct.modif, y=uniprotAC2geneID, by.x = "IDs_interactor_B", by.y = "V1", all.x=TRUE, all.y = F)
rm(list = "uniprotAC2geneID")
}
## getting the publication ID for each gene
{
geneID2pubmed_url = "ftp://ftp.ncbi.nih.gov/gene/DATA/gene2pubmed.gz"
geneID2pubmed_filename = paste0("./Data/geneID2pubmed_release_", format(Sys.Date(), "%m-%Y.gz"))
geneID2pubmed_filename_txt = substr(geneID2pubmed_filename, 1, nchar(geneID2pubmed_filename)-3)
if(!file.exists(geneID2pubmed_filename_txt)) {
downloader::download(geneID2pubmed_url, geneID2pubmed_filename)
R.utils::gunzip(geneID2pubmed_filename)
gitignore = c(substr(geneID2pubmed_filename, 2, nchar(geneID2pubmed_filename)-3), readLines(".gitignore"))
write(gitignore, ".gitignore")
}
}
## count the number of pubmed PMID per GeneIDs for IDs_interactor_A and B
{
geneID2pubmed = fread(geneID2pubmed_filename_txt, colClasses = c("character","character","character"))
geneID2pubmed = geneID2pubmed[,.(GeneID, PubMed_ID)]
geneID2pubmed[, interactor_A_total_PMID := length(PubMed_ID), by = GeneID]
geneID2pubmed = geneID2pubmed[,unique(data.table(GeneID,interactor_A_total_PMID))][,GeneID := as.character(GeneID)]
all.IntAct.modif = merge(all.IntAct.modif, geneID2pubmed, by.x = "IDs_interactor_A_GeneID", by.y = "GeneID", all.x=TRUE)
colnames(geneID2pubmed)[2] = "interactor_B_total_PMID"
all.IntAct.modif = merge(all.IntAct.modif, geneID2pubmed, by.x = "IDs_interactor_B_GeneID", by.y = "GeneID", all.x=TRUE)
colnames(all.IntAct.modif)
rm(list = "geneID2pubmed")
}
# Count the number of interactions per publication
{
all.IntAct.modif[,unique_interactions := apply(data.table(IDs_interactor_A,IDs_interactor_B,stringsAsFactors = F), 1,
function(a) { z = sort(a)
paste0(z[1],"_",z[2]) })]
all.IntAct.modif[,unique_interactions_per_Publication := length(unique(unique_interactions)), by = Publication_Identifiers]
all.IntAct.modif[,interaction_ids_per_Publication := length(unique(Interaction_identifiers)), by = Publication_Identifiers]
all.IntAct.modif[Expansion_methods != "psi-mi:\"MI:1060\"(spoke expansion)",unique_interactions_per_Publication_nospoke := length(unique(unique_interactions)),
by = Publication_Identifiers]
all.IntAct.modif[Expansion_methods != "psi-mi:\"MI:1060\"(spoke expansion)", interaction_ids_per_Publication_nospoke := length(unique(Interaction_identifiers)), by = Publication_Identifiers]
}
# Count the number of interactions (by UniprotID) formed by proteins encoded by GeneID
{
# Counting UniprotID
all.IntAct.modif[,unique_interactions_per_interactor_A := length(unique(grep(IDs_interactor_A, unique_interactions ,value = T))), by = IDs_interactor_A]
all.IntAct.modif[,unique_interactions_per_interactor_B := length(unique(grep(IDs_interactor_B, unique_interactions ,value = T))), by = IDs_interactor_B]
}
# tag interactions by the scale of the study
{
# tagging interactons
all.IntAct.modif[,large_scale := ifelse(interaction_ids_per_Publication > 100, "large_scale", "small_scale")]
}
# interactions to proteins and genes
## tagging interactors by the scale of the study
{
all.IntAct.proteins_scale_l = all.IntAct.modif[,data.table(
IDs_interactor = c(IDs_interactor_A,IDs_interactor_B),
large_scale = c(large_scale, large_scale))]
all.IntAct.proteins_scale_l = unique(all.IntAct.proteins_scale_l)
all.IntAct.proteins_scale = tidyr::spread(all.IntAct.proteins_scale_l, key = large_scale, value = large_scale, fill = "")
all.IntAct.proteins_scale[,large_small_scale := paste0(large_scale," | ",small_scale)]
all.IntAct.proteins_scale = all.IntAct.proteins_scale[!(small_scale ==0 & large_scale ==0), ]
all.IntAct.proteins_scale = unique(all.IntAct.proteins_scale)
}
# Calculating aggregated MI score per GeneID (includes interactions between proteins encoded by that gene)
{
all.IntAct.proteins.score = all.IntAct.modif[,data.table(
IDs_interactor = c(IDs_interactor_A,IDs_interactor_B),
Confidence_values = as.numeric(c(Confidence_values,Confidence_values)),
interactor_GeneID = c(IDs_interactor_A_GeneID, IDs_interactor_B_GeneID))]
all.IntAct.proteins.score = unique(all.IntAct.proteins.score)
all.IntAct.proteins.score[,Median_MI_score := median(Confidence_values, na.rm = T), by = interactor_GeneID]
all.IntAct.proteins.score[,Mean_MI_score := mean(Confidence_values, na.rm = T), by = interactor_GeneID]
all.IntAct.proteins.score[,sum_MI_score := sum(Confidence_values, na.rm = T), by = interactor_GeneID]
all.IntAct.proteins.score[,Confidence_values := NULL]
all.IntAct.proteins.score = unique(all.IntAct.proteins.score)
}
# merging the number of interactions, the scale of the study, and the MIscore tables
{
all.IntAct.proteins = all.IntAct.modif[,data.table(
IDs_interactor = c(IDs_interactor_A,IDs_interactor_B),
interactor_total_PMID = c(interactor_A_total_PMID,interactor_B_total_PMID),
Taxid_interactor = c(Taxid_interactor_A,Taxid_interactor_B),
interactor_IDs_databases = c(interactor_IDs_databases_A, interactor_IDs_databases_B),
unique_interactions_per_interactor = c(unique_interactions_per_interactor_A, unique_interactions_per_interactor_B)
)]
all.IntAct.proteins = unique(all.IntAct.proteins)
all.IntAct.proteins[,unique_interactions_per_interactor := sum(unique_interactions_per_interactor), by = IDs_interactor]
all.IntAct.proteins = unique(all.IntAct.proteins)
all.IntAct.proteins = merge(all.IntAct.proteins,all.IntAct.proteins_scale, by.x = "IDs_interactor", by.y = "IDs_interactor",all = T)
all.IntAct.proteins= unique(all.IntAct.proteins)
all.IntAct.proteins = merge(all.IntAct.proteins,all.IntAct.proteins.score, by.x = "IDs_interactor", by.y = "IDs_interactor",all = T)
all.IntAct.proteins= unique(all.IntAct.proteins)
}
{
# Select only relevant species, only uniprotkb identifiers,
all.IntAct.proteins = all.IntAct.proteins[Taxid_interactor %in% SPECIES_IDs & interactor_IDs_databases == "uniprotkb",]
# filter out proteins not mapped to geneID
all.IntAct.proteins = all.IntAct.proteins[,n_geneid := as.numeric(length(unique(interactor_GeneID))),by = IDs_interactor]
# filter out interactors without gene ids mapped to them
all.IntAct.proteins.with.geneID = copy(all.IntAct.proteins[,n_protid := as.numeric(length(unique(IDs_interactor))),by = interactor_GeneID][n_protid < max(n_protid),])
# tag proteins by the number of mappings - one_to_one or one_to_many
all.IntAct.proteins.with.geneID[n_geneid > 1 | n_protid > 1, gene_id_prot_id := "one_to_many"]
# filter out genes without proteins mapped to them - NA
all.IntAct.proteins.with.geneID[n_geneid == 1 & n_protid == 1, gene_id_prot_id := "one_to_one"]
SPECIES_NAME_ID = data.table(SPECIES_ID = SPECIES_IDs, SPECIES_NAME = SPECIES_NAME)
all.IntAct.proteins.with.geneID = merge(all.IntAct.proteins.with.geneID, SPECIES_NAME_ID, by.x = "Taxid_interactor", by.y = "SPECIES_ID", all=FALSE)
# filter out proteins without publications and proteins without MI score
all.IntAct.proteins.with.geneID = all.IntAct.proteins.with.geneID[complete.cases(all.IntAct.proteins.with.geneID),]
# filter out "one_to_many" and delete unnecessary columns
all.IntAct.proteins.with.geneID = all.IntAct.proteins.with.geneID[gene_id_prot_id == "one_to_one",]
all.IntAct.proteins.with.geneID[,c("Taxid_interactor","interactor_IDs_databases","large_scale","small_scale","interactor_GeneID","Median_MI_score","Mean_MI_score","n_geneid",'n_protid',"gene_id_prot_id") := NULL]
all.IntAct.proteins.with.geneID = unique(all.IntAct.proteins.with.geneID)
}
# plotting unique_interactions_per_interactor as a function of the number of publications
{
ggplot(all.IntAct.proteins.with.geneID, aes(interactor_total_PMID, unique_interactions_per_interactor)) +  scale_x_log10() + scale_y_log10() +
ggtitle("The relationship between the number of publications per gene and \n the number of interactions in which proteins encoded by that gene participate", subtitle = "line was fitted using robust linear regression, \n all UniprotAC were coerced to generic UniprotAC, \n large and small scale experiments")+
ylab("the number of interacting partners (per protein)") + xlab("the number of publications (per gene)") + geom_smooth(method = "rlm", se = T) +
facet_grid(SPECIES_NAME~large_small_scale, scales = "free_y") + geom_point(size = 0.5, alpha = 0.1) +
theme(strip.text.y = element_text(angle = 0)) + geom_smooth(method = "lm", se = T, aes(color = "red"))
}
library(MASS)
# plotting sum_MI_score as a function of the number of publications
library(ggplot2)
{
ggplot(all.IntAct.proteins.with.geneID, aes(interactor_total_PMID, sum_MI_score))+ scale_x_log10() +
#geom_density_2d(bins = 15,aes(colour=..level..)) +
#scale_color_gradient(low = "grey", high = "black")+
ggtitle("The relationship between the number of publications per gene and the sum of MI scores", subtitle = "line was fitted using robust linear regression, large and small scale experiments")+
ylab("the sum of MI scores for the interactions \n including the proteins encoded by that gene") + xlab("the number of publications (per gene)") +     geom_smooth(method = "rlm", se = T) +
facet_grid(SPECIES_NAME~large_small_scale, scales = "free_y") + geom_point(size = 0.5, alpha = 0.1)+
theme(strip.text.y = element_text(angle = 0))+     geom_smooth(method = "lm", se = T, aes(color = "red"))
}
# read the saved table with human_not_in_IMEx_protein_properties_processing chunk
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
proteome_vs_imex_interaction_details_all = data.table()
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_interaction_details_f = as.data.table(read.delim(filename, header = T, stringsAsFactors = F,quote=""))
n = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", n)
n = gsub("strain K12", "Escherichia coli, strain K12", n)
proteome_vs_imex_interaction_details_f[ , c("SPECIES_NAME","reviewed","isoforms", "SPECIES_ID") := list(n,r,i,SPECIES_ID)]
proteome_vs_imex_interaction_details_all = rbind(proteome_vs_imex_interaction_details_all,proteome_vs_imex_interaction_details_f, fill =T)
}}}
all.IntAct.protein_interaction_details_all = merge(x = proteome_vs_imex_interaction_details_all, y=all.IntAct.proteins.with.geneID, by.x = "whole_proteome_IDs", by.y = "IDs_interactor", all.x=T, all.y = F)
all.IntAct.protein_interaction_details_all = all.IntAct.protein_interaction_details_all[two_hybrid_vs_AP_MS != "not in IMEx" & SPECIES_NAME.x %in% c("Homo sapiens", "Mus musculus", "S. cerevisiae, strain S288c", "Escherichia coli, strain K12") & !is.na(large_small_scale),]
all.IntAct.protein_interaction_details_all = unique(all.IntAct.protein_interaction_details_all)
{
ggplot(all.IntAct.protein_interaction_details_all, aes(interactor_total_PMID, unique_interactions_per_interactor, color = two_hybrid_vs_AP_MS))+
scale_x_log10()+ scale_y_log10()  +
ggtitle("The relationship between the number of publications per gene and \n the number of interactions in which proteins encoded by that gene participate", subtitle = "line was fitted using robust linear regression, \n all UniprotAC were coerced to generic UniprotAC, \n divided by interaction detection method (colour), \n large and small scale experiments")+
ylab("the number of interactions(per protein) in which proteins encoded by that gene participate") + xlab("the number of publications per gene") +
geom_smooth(method = "rlm", se = T)+
facet_grid(SPECIES_NAME.x~large_small_scale, scales = "free_y") + geom_point(size = 0.5, alpha = 0.1)+
theme(strip.text.y = element_text(angle = 0))
}
# read the saved table with human_not_in_IMEx_protein_properties_processing chunk
# spoke-expanded included
library(ggplot2)
library(scales)
ggplot(all.IntAct.protein_interaction_details_all, aes(y=unique_interactions_per_interactor, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS))+
ggtitle("the number of interacting partners depends on the protein detection method and the scale of the study", subtitle = "all UniprotAC were coerced to generic UniprotAC, \n divided by interaction detection method (colour), \n large and small scale experiments")+
ylab("the number of interacting partners") + xlab("interaction detection method") +
facet_grid(SPECIES_NAME.x~large_small_scale, scales = "free") + geom_boxplot(alpha =0.7)+scale_y_log10()+
theme(strip.text.y = element_text(angle = 0), axis.text.x = element_text(angle = -35,vjust = 0.65))
# Reading SQL database for information about the disordered proteins
library(RSQLite)
library(data.table)
# connect to the sqlite file
disorder = dbConnect(SQLite(), db = "./Data/Vincent_and_Schnell_2016_v2.db")
# get a list of all tables
alltables = dbListTables(disorder)
# get the everything from CD_counts table as a data.frame
Percent_disorder = dbGetQuery( disorder,'select * from Percent_disorder')
Percent_disorder = as.data.table(Percent_disorder)
# count the areas in the SQLite table
CIDER_data = dbGetQuery( disorder,'select * from CIDER_data')
CIDER_data = as.data.table(CIDER_data)
dbDisconnect(disorder)
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis - "strain K12" Ecoli is not characterised in disorder study
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
proteome_vs_imex_interaction_details_all = data.table()
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_interaction_details_f = as.data.table(read.delim(filename, header = T, stringsAsFactors = F,quote=""))
n = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", n)
n = gsub("strain K12", "Escherichia coli, strain K12", n)
proteome_vs_imex_interaction_details_f[ , c("SPECIES_NAME","reviewed","isoforms", "SPECIES_ID") := list(n,r,i,SPECIES_ID)]
proteome_vs_imex_interaction_details_all = rbind(proteome_vs_imex_interaction_details_all,proteome_vs_imex_interaction_details_f, fill =T)
}}}
all.IntAct.protein_interaction_details_all = merge(x = proteome_vs_imex_interaction_details_all, y=all.IntAct.proteins, by.x = "whole_proteome_IDs", by.y = "IDs_interactor", all.x = T, all.y = F)
proteome_vs_imex_interaction_details_f_Percent_disorder.t = merge(x = all.IntAct.protein_interaction_details_all,
y = Percent_disorder,
by.x = "whole_proteome_IDs",
by.y = "UniProtKB_AC",
all.x = T,
all.y = F)
print(paste0("disorder NAs: ",sum(is.na(proteome_vs_imex_interaction_details_f_Percent_disorder.t$REM465_PD))))
proteome_vs_imex_interaction_details_f_Percent_disorder = merge(x = proteome_vs_imex_interaction_details_f_Percent_disorder.t,
y = CIDER_data,
by.x = "whole_proteome_IDs",
by.y = "UniProtKB_AC",
all.x = T,
all.y = F)
print(paste0("CIDER data NAs: ",sum(is.na(proteome_vs_imex_interaction_details_f_Percent_disorder$Kappa))))
proteome_vs_imex_interaction_details_f_Percent_disorder[is.na(proteome_vs_imex_interaction_details_f_Percent_disorder)] = 0
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution of the fraction of charged residues for proteins with \n and without interacting partners annotated in IMEx")
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_density(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution density of the fraction of charged residues for proteins with \n and without interacting partners annotated in IMEx")
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution of the fraction of charged residues for proteins with \n and without interacting partners annotated in IMEx")
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_density(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution density of the fraction of charged residues for proteins with \n and without interacting partners annotated in IMEx")
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = Hydropathy_m, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution of the mean hydropathy for proteins with \n and without interacting partners annotated in IMEx")
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = Hydropathy_m, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_density(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution of the mean hydropathy for proteins with \n and without interacting partners annotated in IMEx")
## Plotting with venn.diagram - Uniprot vs IMEx (or IntAct)
# code to be modified for different graphs
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12", "Drosophila melanogaster", "Caenorhabditis elegans", "Arabidopsis thaliana")
reviewed_venn = 1                 # 1 or 2
IMExdatabase = "IMEx"    # "X0469.IntAct." or "IMEx"
### ======================================================================== ###
# non-modifyable code
proteome_vs_interactome_summary.all$species.name = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", proteome_vs_interactome_summary.all$species.name)
proteome_vs_interactome_summary.all$species.name = gsub("strain K12", "Escherichia coli, strain K12", proteome_vs_interactome_summary.all$species.name)
SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", SPECIES_NAME)
SPECIES_NAME = gsub("strain K12", "Escherichia coli, strain K12", SPECIES_NAME)
library(dplyr)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == TRUE)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, database == IMExdatabase)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, database == IMExdatabase)
library(VennDiagram)
{
grid.newpage()
if(reviewed_venn == 2){plotname = paste0("Proteome (SwissProt) coverage by interaction databases(",IMExdatabase,")")
databasename = "SwissProt"}
if(reviewed_venn == 1){plotname = paste0("Proteome (all UniprotKB) coverage by interaction databases(",IMExdatabase,")")
databasename = "UniprotKB"}
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))
x =grid.text("isoforms included", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))
x =grid.text("isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
}
### combine the summaries for multiple species of how many interactors have non-uniprot identifiers
interactome_identifiers_summary.all = data.frame()
for (i in isoforms) {
for(n in SPECIES_NAME) {
filename.summary = paste("./summaries/","uniprotKB_IDs_and_",n,"_biogrid_from_mentha_interactors_summary", "_isoforms_",i,"_", date,".txt", sep = "")
if(!file.exists(filename.summary)) {
interactome_identifiers_summary.all
}
if(file.exists(filename.summary)) {
interactome_identifiers_summary.o = as.data.frame(read.delim(filename.summary, stringsAsFactors = F))
interactome_identifiers_summary.all = rbind(interactome_identifiers_summary.all, interactome_identifiers_summary.o)
}
}
}
interactome_identifiers_summary.all = unique(interactome_identifiers_summary.all)
## save all species summary
filename.summary.all = paste("./results/","interactome_identifiers_BioGRID_summary_",date,".txt", sep = "")
write.table(interactome_identifiers_summary.all, filename.summary.all, col.names=T,row.names=F,sep="\t",quote=F)
#################
interactome_identifiers_summary.all.s = interactome_identifiers_summary.all[,c(3,4,5,6,7)]
## Transform table for plotting with ggplot2
library(reshape2)
interactome_identifiers_summary.all.s.m= melt(data = interactome_identifiers_summary.all.s,
id.vars = c("SPECIES_NAME", "SPECIES_ID"),
variable.name = "decription",
value.name = "number")
interactome_identifiers_summary.all.s.m=unique(interactome_identifiers_summary.all.s.m)
## rename yeast and E.coli
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("strain K12", "E. coli, strain K12", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("Caenorhabditis elegans", "C. elegans", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("Drosophila melanogaster", "D. melanogaster", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
# plot
library(ggplot2)
library(dplyr)
proteome_vs_interactome_plot <- ggplot(interactome_identifiers_summary.all.s.m, aes(x=SPECIES_NAME, y=number, fill=decription,label=number)) + geom_bar(width = 0.9, stat = "identity", position = "stack") + geom_label(position = "stack", size = 4, label.padding = unit(0.08, "lines")) +
ggtitle("The number of interactors which have UniprotKB identifiers \n and belong to the species queried") + theme(axis.text.x=element_text(angle = 20), axis.title.x = element_text(size = 0)) + ylab("number of proteins")
proteome_vs_interactome_plot
# save plot
# filename=paste("./results/", "interactome_identifiers_summary_plot_SMALL",date,".png", sep = "")
# ggsave(filename, proteome_vs_interactome_plot, width = 12, height = 12)
### ======================================================================== ###
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
proteome_vs_imex_details_f_minus_odor = proteome_vs_imex_details_f[-grep("Odor",
proteome_vs_imex_details_f$Protein.names),]
proteome_vs_imex_details_f_minus_odor_olf = proteome_vs_imex_details_f_minus_odor[-grep("Olfactory",
proteome_vs_imex_details_f_minus_odor$Protein.names),]
SwissProt_not_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx=="SwissProt_not_IMEX"]
SwissProt_and_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx=="SwissProt_and_IMEX"]
## is the distibution of mass or log(mass) normal?
library(rafalib)
mypar(2,2)
popsd(log10(SwissProt_not_IMEX))
median(log10(SwissProt_not_IMEX))
mad(log10(SwissProt_not_IMEX))
{
qqnorm(log10(SwissProt_not_IMEX), main = "SwissProt_not_IMEX, log(protein mass)")
qqline(log10(SwissProt_not_IMEX))
qqnorm(log10(SwissProt_and_IMEX), main = "SwissProt_and_IMEX, log(protein mass)")
qqline(log10(SwissProt_and_IMEX))
qqnorm((SwissProt_not_IMEX), main = "SwissProt_not_IMEX, protein mass")
qqline((SwissProt_not_IMEX))
qqnorm((SwissProt_and_IMEX), main = "SwissProt_and_IMEX, protein mass")
qqline((SwissProt_and_IMEX))
}
## it indeed is
## Monte-Carlo simulation
## is there a significant difference in protein mass?
# code can be used for things other than mass
set.seed(1)
# sample size
Ns <- seq(5, 350, 20)
lengthNs = length(Ns)
# number of simulations
B = 1000
# function which takes samples and does Wilcox test
simulation = function(n){
# x = cbind( matrix(sample(SwissProt_not_IMEX, B*n),B,n)
# y = matrix(sample(SwissProt_and_IMEX, B*n),B,n)
# genefilter::rowttests()
wilcox.test.rr = matrix(0, 1, 3)
x = sample(SwissProt_not_IMEX, n)
y = sample(SwissProt_and_IMEX, n)
wilcox.test.rr[1,c(1,2)] = wilcox.test(x, y, conf.int = T)$conf.int
wilcox.test.rr[1,3] = wilcox.test(x, y, conf.int = T)$p.value
return(wilcox.test.rr)
}
wilcox.test.rr = matrix(0, lengthNs, 3)
# looping Monte-Carlo over samples sizes ]
# for (n in 1:lengthNs) {
#   z =replicate(B, simulation(Ns[n]), simplify = T)
#   wilcox.test.rr[n,] = rowMeans(z)
# }
xx =cbind(wilcox.test.rr, Ns)
qplot(xx[,4], xx[,3], ylab = "Wilcox test p-val", xlab = "proteins sampled, N", main = "this test doesn't make sense - \n why would we do bootstrap rather than \n just to measure how likely is that we get the result \n as extreme if we just sample two groups from general population \n which is exatly what permutation test does?")
# permutations - wilcox test
proteome_vs_imex_details_f_shuffle = as.data.table(proteome_vs_imex_details_f[,c("Mass","whole_proteome_Uniprot_IMEx")])
proteome_vs_imex_details_f_shuffle[,Mass := log10(Mass)]
proteome_vs_imex_details_f_shuffle. = copy(proteome_vs_imex_details_f_shuffle)
set.seed(1)
wilcox.test.r10000 = replicate(10,{
proteome_vs_imex_details_f_shuffle.[,whole_proteome_Uniprot_IMEx := sample(whole_proteome_Uniprot_IMEx)]
wilcox.test.r = wilcox.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f_shuffle.)$statistic
},simplify = T)
# permutations - ttest
ttest.r10000 = replicate(10,{
proteome_vs_imex_details_f_shuffle.[,whole_proteome_Uniprot_IMEx := sample(whole_proteome_Uniprot_IMEx)]
t.test.r = t.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f_shuffle.)$statistic
},simplify = T)
## testing the difference in protein mass distributions
##of proteins absent/present in IMEx using Wilcox rank test
wilcox.test.r = wilcox.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f)
ttest_r = t.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f)
{
library(rafalib)
mypar(1,2)
hist(wilcox.test.r10000, xlim = c(min(wilcox.test.r10000),wilcox.test.r$statistic+wilcox.test.r$statistic/2))
abline(v = wilcox.test.r$statistic, col = "red")
hist(ttest.r10000, xlim = c(min(ttest.r10000),ttest_r$statistic+ttest_r$statistic/2))
abline(v = ttest_r$statistic, col = "red")
}
colnames(proteome_vs_imex_interaction_details_f_Percent_disorder)
Percent_disorder_types_for_plot = tidyr::gather(proteome_vs_imex_interaction_details_f_Percent_disorder,"disorder_pred_algorithm","percent disorder",c(IUPRED_PD,COILS_PD,HOTLOOPS_PD,REM465_PD,ICHR_consensus_PD))
colnames(Percent_disorder_types_for_plot)
Percent_disorder_types_for_plot = tidyr::gather(proteome_vs_imex_interaction_details_f_Percent_disorder,"disorder_pred_algorithm","percent_disorder",c(IUPRED_PD,COILS_PD,HOTLOOPS_PD,REM465_PD,ICHR_consensus_PD))
Percent_disorder_types_for_plot[,table(disorder_pred_algorithm)]
class(Percent_disorder_types_for_plot)
class(proteome_vs_imex_interaction_details_f_Percent_disorder)
?melt
Percent_disorder_types_for_plot = melt(data = proteome_vs_imex_interaction_details_f_Percent_disorder,variable.name ="disorder_pred_algorithm",value.name ="percent_disorder",measure.vars =c(IUPRED_PD,COILS_PD,HOTLOOPS_PD,REM465_PD,ICHR_consensus_PD))
Percent_disorder_types_for_plot = melt(data = proteome_vs_imex_interaction_details_f_Percent_disorder,variable.name ="disorder_pred_algorithm",value.name ="percent_disorder",measure.vars =.(IUPRED_PD,COILS_PD,HOTLOOPS_PD,REM465_PD,ICHR_consensus_PD))
Percent_disorder_types_for_plot = melt(data = proteome_vs_imex_interaction_details_f_Percent_disorder,variable.name ="disorder_pred_algorithm",value.name ="percent_disorder",measure.vars =c("IUPRED_PD","COILS_PD","HOTLOOPS_PD","REM465_PD","ICHR_consensus_PD"))
str(Percent_disorder_types_for_plot)
table(Percent_disorder_types_for_plot$disorder_pred_algorithm)
ggplot(Percent_disorder_types_for_plot, aes(x = IUPRED_PD, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, IUPRED_PD, log10 scale") + ggtitle("the distribution of the fraction of charged residues IUPRED_PD for proteins with \n and without interacting partners annotated in IMEx")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, IUPRED_PD, log10 scale") + ggtitle("the distribution of the fraction of charged residues IUPRED_PD for proteins with \n and without interacting partners annotated in IMEx")
```{r physical_properties_plot_disord_dom, fig.height=5, fig.width=12}
z = numeric(length(SPECIES_NAME))
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
Percent_disorder_types_for_plot = melt(data = proteome_vs_imex_interaction_details_f_Percent_disorder,variable.name ="disorder_pred_algorithm",value.name ="percent_disorder",measure.vars =c("IUPRED_PD","COILS_PD","HOTLOOPS_PD","REM465_PD","ICHR_consensus_PD"))
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, IUPRED_PD, log10 scale") + ggtitle("the distribution of the fraction of charged residues IUPRED_PD for proteins with \n and without interacting partners annotated in IMEx")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_density(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution density of the fraction of charged residues for proteins with \n and without interacting partners annotated in IMEx")
ggplot(Percent_disorder_types_for_plot, aes(x = interactor_total_PMID, y = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale") + ggtitle("the distribution of the fraction of disordered regions for proteins with \n and without interacting partners annotated in IMEx")
ggplot(Percent_disorder_types_for_plot, aes(x = interactor_total_PMID, y = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale") + ggtitle("the distribution of the fraction of disordered regions for proteins with \n and without interacting partners annotated in IMEx")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_x_log10() +geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the fraction of disordered regions vs the number of interations")
install.packages("gsEasy")
library(gsEasy)
gset(S=letters[1:3], r=letters)
gset(S=proteome_vs_imex_interaction_details_f_Percent_disorder[whole_proteome_Uniprot_IMEx==1,whole_proteome_IDs], r = proteome_vs_imex_interaction_details_f_Percent_disorder$whole_proteome_IDs)
gset(S=proteome_vs_imex_interaction_details_f_Percent_disorder[whole_proteome_Uniprot_IMEx==0,whole_proteome_IDs], r = proteome_vs_imex_interaction_details_f_Percent_disorder$whole_proteome_IDs)
?gset
get_GO_gene_sets()
gset(S=sort(proteome_vs_imex_interaction_details_f_Percent_disorder[whole_proteome_Uniprot_IMEx==0,whole_proteome_IDs]), r = sort(proteome_vs_imex_interaction_details_f_Percent_disorder$whole_proteome_IDs))
gset(S=sort(proteome_vs_imex_interaction_details_f_Percent_disorder[whole_proteome_Uniprot_IMEx==0,whole_proteome_IDs]), r = sort(proteome_vs_imex_interaction_details_f_Percent_disorder$whole_proteome_IDs, decreasing = T))
ggplot(Percent_disorder_types_for_plot, aes() x = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_quantile()+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes( x = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_quantile()+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes( y = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_quantile()+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes( y = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_qq()+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes( sample = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_qq()+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes( sample = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_qq()+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes( sample = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_qq()+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")+geom_abline(intercept = 0,slope = 1)
ggplot(Percent_disorder_types_for_plot, aes( sample = log10(percent_disorder),color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_qq()+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes( sample = log(percent_disorder),color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_qq()+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes( sample = sqrt(percent_disorder),color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_qq()+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes(x = interactor_total_PMID, y = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point()+ scale_x_sqrt() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes(x = interactor_total_PMID, y = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point()+ scale_y_sqrt() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes(x = interactor_total_PMID, y = percent_disorder,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point()+ scale_y_sqrt()+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100, log10 scale")+xlab("the number of studies")  + ggtitle("the number of studies vs the fraction of disordered regions")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_x_log10() + scale_y_log10()+geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the fraction of disordered regions vs the number of interations")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_x_sqrt() + scale_y_log10()+geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the fraction of disordered regions vs the number of interations")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_y_log10()+geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the fraction of disordered regions vs the number of interations")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_y_log10()+geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the fraction of disordered regions vs the number of interations")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_y_log10()+geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the fraction of disordered regions vs the number of interations")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_y_log10()+geom_smooth(method = "loess")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the fraction of disordered regions vs the number of interations")
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_y_log10()+geom_smooth(method = "loess")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the fraction of disordered regions vs the number of interations")
?cor
cor(Percent_disorder_types_for_plot$percent_disorder,Percent_disorder_types_for_plot$unique_interactions_per_interactor)
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_y_log10()+geom_smooth(method = "loess")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale")+ylab("the number of interacting partners")  + ggtitle("the number of interacting partners as a funcion of the fraction of disordered regions")
rm(list = ls())
