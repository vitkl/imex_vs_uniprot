SPECIES_NAME = n,
databases = databases, date,
detmethod = "%22MI:0090%22")
ap_ms_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID,
SPECIES_NAME = n,
databases = databases, date,
detmethod = "%22MI:0004%22",
pmethod = "%22MI:0433%22")
##=========================================================##
# extracting interactor ID-s from interactions (MI-TAB 2.7)
source("interactions_to_interactors.R")
twohybrids_all_interactors = interactions_to_interactors(twohybrids_all_interactions)
complementation_all_interactors = interactions_to_interactors(complementation_all_interactions)
ap_ms_all_interactors = interactions_to_interactors(ap_ms_all_interactions)
# filtering interactors for uniprotkb only indentifiers
# filtering for SPECIES_ID only proteins
source("uniprotkb_and_SPECIES_ID_interactor_selector.R")
twohybrids_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(twohybrids_all_interactors, SPECIES_ID)
complementation_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(complementation_all_interactors, SPECIES_ID)
ap_ms_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(ap_ms_all_interactors, SPECIES_ID)
# Removing all isoform IDs (XXXXXX-X+ => XXXXXX) from IDs
source("isoform_id_all_remover.R")
twohybrids_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(twohybrids_all_interactors_SPECIES_ID_only$interactor_IDs)
complementation_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(complementation_all_interactors_SPECIES_ID_only$interactor_IDs)
ap_ms_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(ap_ms_all_interactors_SPECIES_ID_only$interactor_IDs)
# preparing interaction detection method data for logic table: selecting unique proteins and adding the column of ones
unique_twohybrids_interactors_SPECIES_ID_only = unique(cbind(twohybrids_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1))
colnames(unique_twohybrids_interactors_SPECIES_ID_only)[2] = "two_hybrid"
unique_complementation_interactors_SPECIES_ID_only = unique(cbind(complementation_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1))
colnames(unique_complementation_interactors_SPECIES_ID_only)[2] = "all_protein_complementation"
unique_ap_ms_interactors_SPECIES_ID_only = unique(cbind(ap_ms_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1))
colnames(unique_ap_ms_interactors_SPECIES_ID_only)[2] = "AP_MS"
# loading logic table made by "swissprot_vs_imex_protein_properties" script or by
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
# merging new results with the logic table
proteome_vs_imex_interaction_details_t1 = merge(proteome_vs_imex_details_f,
unique_twohybrids_interactors_SPECIES_ID_only,
by.x = "whole_proteome_IDs",
by.y = "interactor_IDs",
all.x = T, all.y = F)
proteome_vs_imex_interaction_details_t2 = merge(proteome_vs_imex_interaction_details_t1,
unique_complementation_interactors_SPECIES_ID_only,
by.x = "whole_proteome_IDs",
by.y = "interactor_IDs",
all.x = T, all.y = F)
proteome_vs_imex_interaction_details_f = merge(proteome_vs_imex_interaction_details_t2,
unique_ap_ms_interactors_SPECIES_ID_only,
by.x = "whole_proteome_IDs",
by.y = "interactor_IDs",
all.x = T, all.y = F)
proteome_vs_imex_interaction_details_f[is.na(proteome_vs_imex_interaction_details_f)] = 0
# adding factor combination variable - two_hybrid and AP_MS
proteome_vs_imex_interaction_details_f[,length(proteome_vs_imex_interaction_details_f)+1] = interaction(proteome_vs_imex_interaction_details_f$two_hybrid, proteome_vs_imex_interaction_details_f$AP_MS, sep = "_")
colnames(proteome_vs_imex_interaction_details_f)[length(proteome_vs_imex_interaction_details_f)] = paste0("two_hybrid", "_vs_","AP_MS")
levels(proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS) = c("not two-hybrid, and not AP-MS", "two-hybrid, not AP-MS","not two-hybrid, AP-MS", "two-hybrid and AP-MS")
proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS = as.character(proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS)
proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS[proteome_vs_imex_interaction_details_f$IMEx!=1] = "not in IntAct"
# saving combined logic table with protein properties from Uniprot and interaction properties combined
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
write.table(proteome_vs_imex_interaction_details_f,filename,col.names=T,row.names=F,sep="\t",quote=F)
}
}
}
}
# read the table saved before
library(rafalib)
library(MASS)
library(RColorBrewer)
library(multcomp)
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
proteome_vs_imex_interaction_details_all = data.table()
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_interaction_details_f = as.data.table(fread(filename, header = T, stringsAsFactors = F,quote="", data.table = F))
n = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", n)
n = gsub("strain K12", "Escherichia coli, strain K12", n)
proteome_vs_imex_interaction_details_f[ , c("SPECIES_NAME","reviewed","isoforms", "SPECIES_ID") := list(n,r,i,SPECIES_ID)]
proteome_vs_imex_interaction_details_all = rbind(proteome_vs_imex_interaction_details_all,proteome_vs_imex_interaction_details_f, fill =T)
}}}
proteome_vs_imex_interaction_details_all$two_hybrid_vs_AP_MS = factor(proteome_vs_imex_interaction_details_all$two_hybrid_vs_AP_MS, levels = c("not in IntAct", "not two-hybrid, and not AP-MS", "two-hybrid, not AP-MS", "not two-hybrid, AP-MS", "two-hybrid and AP-MS"))
proteome_vs_imex_interaction_details_all[, Median_mass := median((Mass)), by = .(SPECIES_NAME,two_hybrid_vs_AP_MS)]
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),", (median mass: ", signif(Median_mass/1000,3)," kDa)"))]
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(signif(Median_mass/1000,3)," kDa)"))]
library(scales)
proteome_vs_imex_interaction_details_human = proteome_vs_imex_interaction_details_all[SPECIES_NAME == "Homo sapiens",]
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey'))
gc()
knitr::opts_chunk$set(echo = FALSE, results = "hide", warning = FALSE, message = FALSE, fig.keep = "all")
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(UniProt.ws)
library(PSICQUIC)
library(ggplot2)
library(clusterProfiler)
})
source("multiplot.R")
source("GO_analyse_simplify_plot.R")
# library(devtools)
# install_github("vitkl/clusterProfiler")
# install_github("vitkl/DOSE")
date = Sys.Date()
## Please specify the date for which you want to perform analysis (if not today)
date = as.Date("2017-04-24")
# git update-index --assume-unchanged .RData
# http://stackoverflow.com/questions/21043132/gitignore-just-doesnt-work-i-cant-get-it-to-ignore-ds-store-gitignore-fil
# read the table saved before
library(rafalib)
library(MASS)
library(RColorBrewer)
library(multcomp)
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
proteome_vs_imex_interaction_details_all = data.table()
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_interaction_details_f = as.data.table(fread(filename, header = T, stringsAsFactors = F,quote="", data.table = F))
n = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", n)
n = gsub("strain K12", "Escherichia coli, strain K12", n)
proteome_vs_imex_interaction_details_f[ , c("SPECIES_NAME","reviewed","isoforms", "SPECIES_ID") := list(n,r,i,SPECIES_ID)]
proteome_vs_imex_interaction_details_all = rbind(proteome_vs_imex_interaction_details_all,proteome_vs_imex_interaction_details_f, fill =T)
}}}
proteome_vs_imex_interaction_details_all$two_hybrid_vs_AP_MS = factor(proteome_vs_imex_interaction_details_all$two_hybrid_vs_AP_MS, levels = c("not in IntAct", "not two-hybrid, and not AP-MS", "two-hybrid, not AP-MS", "not two-hybrid, AP-MS", "two-hybrid and AP-MS"))
proteome_vs_imex_interaction_details_all[, Median_mass := median((Mass)), by = .(SPECIES_NAME,two_hybrid_vs_AP_MS)]
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),", (median mass: ", signif(Median_mass/1000,3)," kDa)"))]
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(signif(Median_mass/1000,3)," kDa)"))]
library(scales)
proteome_vs_imex_interaction_details_human = proteome_vs_imex_interaction_details_all[SPECIES_NAME == "Homo sapiens",]
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey'))
protein_mass = ggplot(proteome_vs_imex_details_f_minus_odor_olf.c_post, aes(x = Mass, color = in_IntAct, label = Organism)) +
geom_freqpoly(bins = 100)+ scale_x_log10() +
theme(strip.text.y = element_text(angle = 0)) +
xlab("protein mass, Da, log10 scale") +
ggtitle("Mass")+
facet_grid(Organism~.) +
geom_vline(aes(xintercept = 10^median_Mass_per_group, color = in_IntAct),alpha =0.7,size =1.5) +
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
protein_publ = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = whole_proteome_IDs_PMID, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the number of publications (PMIDs), log10 scale")+ ggtitle("Number of publications") +geom_vline(aes(xintercept = 10^median_studies_per_group, color = in_IntAct),alpha =0.7, size = 1.5)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
protein_charge = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = FCR, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("Fraction of charged residues") +geom_vline(aes(xintercept = 10^median_FCR, color = in_IntAct),alpha =0.7, size =1.5)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
protein_hydropathy = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = Hydropathy_m, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the mean hydropathy, log10 scale") + ggtitle("Mean hydropathy") +geom_vline(aes(xintercept = 10^median_Hydropathy_m, color = in_IntAct),alpha =0.7,size =1.5) +
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
multiplot(plotlist=list(protein_mass + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")),
protein_publ + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")),
protein_charge + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")),
protein_hydropathy + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm"))), cols = 2)
multiplot(plotlist=list(protein_mass + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")),
protein_publ + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")),
protein_charge + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")),
protein_hydropathy + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm"))), cols = 2)
protein_mass
# Reading SQL database for information about the disordered proteins
library(RSQLite)
library(data.table)
# connect to the sqlite file
disorder = dbConnect(SQLite(), db = "./Data/Vincent_and_Schnell_2016_v2.db")
# get a list of all tables
alltables = dbListTables(disorder)
# get the everything from CD_counts table as a data.frame
Percent_disorder = dbGetQuery( disorder,'select * from Percent_disorder')
Percent_disorder = as.data.table(Percent_disorder)
# count the areas in the SQLite table
CIDER_data = dbGetQuery( disorder,'select * from CIDER_data')
CIDER_data = as.data.table(CIDER_data)
dbDisconnect(disorder)
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis - "strain K12" Ecoli is not characterised in disorder study
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
proteome_vs_imex_interaction_details_all = data.table()
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_interaction_details_f = as.data.table(read.delim(filename, header = T, stringsAsFactors = F,quote=""))
n = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", n)
n = gsub("strain K12", "Escherichia coli, strain K12", n)
proteome_vs_imex_interaction_details_f[ , c("SPECIES_NAME","reviewed","isoforms", "SPECIES_ID") := list(n,r,i,SPECIES_ID)]
proteome_vs_imex_interaction_details_all = rbind(proteome_vs_imex_interaction_details_all,proteome_vs_imex_interaction_details_f, fill =T)
}}}
all.IntAct.protein_interaction_details_all = merge(x = proteome_vs_imex_interaction_details_all, y=all.IntAct.proteins, by.x = "whole_proteome_IDs", by.y = "IDs_interactor", all.x = T, all.y = F)
proteome_vs_imex_interaction_details_f_Percent_disorder.t = merge(x = all.IntAct.protein_interaction_details_all,
y = Percent_disorder,
by.x = "whole_proteome_IDs",
by.y = "UniProtKB_AC",
all.x = T,
all.y = F)
proteome_vs_imex_interaction_details_f_Percent_disorder = merge(x = proteome_vs_imex_interaction_details_f_Percent_disorder.t,
y = CIDER_data,
by.x = "whole_proteome_IDs",
by.y = "UniProtKB_AC",
all.x = T,
all.y = F)
proteome_vs_imex_interaction_details_f_Percent_disorder[is.na(proteome_vs_imex_interaction_details_f_Percent_disorder)] = 0
# re-map publication numbers: remap uniprotAC to geneID for proteins absent in IMEx and count publications
# reading files for uniprotAC to geneID mapping
uniprotAC2geneID = data.table()
for(i in 1:length(uniprotAC2geneID_filename.dat)){
temp = fread(uniprotAC2geneID_filename.dat[i], header = F)
temp = temp[V2 == "GeneID", .(V1, V3)]
uniprotAC2geneID = rbind(uniprotAC2geneID,temp)
rm(list = "temp")
}
## map GeneIDs for IDs_interactor_A
{
colnames(uniprotAC2geneID)[2] = "whole_proteome_IDs2GeneID"
proteome_vs_imex_interaction_details_f_Percent_disorder = merge(x=proteome_vs_imex_interaction_details_f_Percent_disorder, y=uniprotAC2geneID, by.x = "whole_proteome_IDs", by.y = "V1", all.x=TRUE, all.y = F)
}
rm(list = "uniprotAC2geneID")
## count the number of pubmed PMID per GeneIDs for IDs_interactor_A and B
{
geneID2pubmed_url = "ftp://ftp.ncbi.nih.gov/gene/DATA/gene2pubmed.gz"
geneID2pubmed_filename = paste0("./Data/geneID2pubmed_release_", format(Sys.Date(), "%m-%Y.gz"))
geneID2pubmed_filename_txt = substr(geneID2pubmed_filename, 1, nchar(geneID2pubmed_filename)-3)
geneID2pubmed = fread(geneID2pubmed_filename_txt, colClasses = c("character","character","character"))
geneID2pubmed = geneID2pubmed[,.(GeneID, PubMed_ID)]
# counting publications per GeneID
geneID2pubmed[, whole_proteome_IDs_PMID := length(PubMed_ID), by = GeneID]
# selecting only relevant columns
geneID2pubmed = geneID2pubmed[,unique(data.table(GeneID,whole_proteome_IDs_PMID))][,GeneID := as.character(GeneID)]
# merging N of PMID to all other data
proteome_vs_imex_interaction_details_f_Percent_disorder = merge(proteome_vs_imex_interaction_details_f_Percent_disorder, geneID2pubmed, by.x = "whole_proteome_IDs2GeneID", by.y = "GeneID", all.x=TRUE)
rm(list = "geneID2pubmed")
}
# delete GeneID column to remove many-GeneID-to-one-protein
proteome_vs_imex_interaction_details_f_Percent_disorder[,whole_proteome_IDs2GeneID := NULL]
proteome_vs_imex_interaction_details_f_Percent_disorder = unique(proteome_vs_imex_interaction_details_f_Percent_disorder)
# sum up publications for many-GeneID-to-one-protein cases
proteome_vs_imex_interaction_details_f_Percent_disorder[,whole_proteome_IDs_PMID := sum(whole_proteome_IDs_PMID), by = whole_proteome_IDs]
# return to one unique protein per row representation
proteome_vs_imex_interaction_details_f_Percent_disorder = unique(proteome_vs_imex_interaction_details_f_Percent_disorder)
proteome_vs_imex_interaction_details_f_Percent_disorder[, whole_proteome_Uniprot_IMEx_x_SPECIES_NAME := paste0(whole_proteome_Uniprot_IMEx,SPECIES_NAME)]
proteome_vs_imex_interaction_details_f_Percent_disorder[, median_studies_per_group := median(log10(whole_proteome_IDs_PMID), na.rm = T), by = whole_proteome_Uniprot_IMEx_x_SPECIES_NAME]
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = whole_proteome_IDs_PMID, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_freqpoly()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the number of studies , log10 scale")+ ggtitle("the distribution of the number of studies for proteins with \n and without interacting partners curated in IMEx") +geom_vline(aes(xintercept = 10^median_studies_per_group, color = whole_proteome_Uniprot_IMEx),alpha =0.7)
# for poster
proteome_vs_imex_interaction_details_f_Percent_disorder[, in_IntAct := ifelse(whole_proteome_Uniprot_IMEx == "SwissProt_and_IMEX", "yes", "no")]
protein_publ = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = whole_proteome_IDs_PMID, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the number of publications (PMIDs), log10 scale")+ ggtitle("Number of publications") +geom_vline(aes(xintercept = 10^median_studies_per_group, color = in_IntAct),alpha =0.7, size = 1.5)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
protein_publ
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
proteome_vs_imex_interaction_details_f_Percent_disorder[, median_FCR := median(log10(FCR), na.rm = T), by = whole_proteome_Uniprot_IMEx_x_SPECIES_NAME]
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution of the fraction of charged residues for proteins with \n and without interacting curated annotated in IMEx") +geom_vline(aes(xintercept = 10^median_FCR, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_density()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution density of the fraction of charged residues for proteins with \n and without interacting curated annotated in IMEx") +geom_vline(aes(xintercept = 10^median_FCR, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
# for poster
protein_charge = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = FCR, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("Fraction of charged residues") +geom_vline(aes(xintercept = 10^median_FCR, color = in_IntAct),alpha =0.7, size =1.5)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
proteome_vs_imex_interaction_details_f_Percent_disorder[, median_FCR := median(log10(FCR), na.rm = T), by = whole_proteome_Uniprot_IMEx_x_SPECIES_NAME]
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution of the fraction of charged residues for proteins with \n and without interacting curated annotated in IMEx") +geom_vline(aes(xintercept = 10^median_FCR, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_density()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution density of the fraction of charged residues for proteins with \n and without interacting curated annotated in IMEx") +geom_vline(aes(xintercept = 10^median_FCR, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
# for poster
protein_charge = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = FCR, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("Fraction of charged residues") +geom_vline(aes(xintercept = 10^median_FCR, color = in_IntAct),alpha =0.7, size =1.5)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
protein_charge
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
proteome_vs_imex_interaction_details_f_Percent_disorder[, median_Hydropathy_m := median(log10(Hydropathy_m), na.rm = T), by = whole_proteome_Uniprot_IMEx_x_SPECIES_NAME]
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = Hydropathy_m, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the mean hydropathy, log10 scale") + ggtitle("the distribution of the mean hydropathy for proteins with \n and without interacting partners curated in IMEx") +geom_vline(aes(xintercept = 10^median_Hydropathy_m, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = Hydropathy_m, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_density()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the mean hydropathy, log10 scale") + ggtitle("the distribution of the mean hydropathy for proteins with \n and without interacting partners curated in IMEx") +geom_vline(aes(xintercept = 10^median_Hydropathy_m, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
#for poster
protein_hydropathy = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = Hydropathy_m, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the mean hydropathy, log10 scale") + ggtitle("Mean hydropathy") +geom_vline(aes(xintercept = 10^median_Hydropathy_m, color = in_IntAct),alpha =0.7,size =1.5) +
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
multiplot(plotlist=list(protein_mass + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")),
protein_publ + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")),
protein_charge + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")),
protein_hydropathy + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm"))), cols = 2)
?theme
multiplot(plotlist=list(protein_mass + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")) + theme(plot.title = element_text(size = 15)),
protein_publ + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")),
protein_charge + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")),
protein_hydropathy + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm"))), cols = 2)
multiplot(plotlist=list(protein_mass + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")) + theme(plot.title = element_text(size = 20)),
protein_publ + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")),
protein_charge + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")),
protein_hydropathy + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm"))), cols = 2)
multiplot(plotlist=list(protein_mass + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_publ + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_charge + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_hydropathy + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")) + theme(plot.title = element_text(size = 18))), cols = 2)
multiplot(plotlist=list(protein_mass + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_publ + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_charge + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_hydropathy + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")) + theme(plot.title = element_text(size = 18))), cols = 2)
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method") +facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey'))
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method")+
ggtitle("protein mass by interaction detection method?")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey'))
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method")+
ggtitle("protein mass by interaction detection method")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) + theme(plot.title = element_text(size = 18))
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method",)+
ggtitle("protein mass by interaction detection method")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-25))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) + theme(plot.title = element_text(size = 18))
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method",)+
ggtitle("protein mass by interaction detection method")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-25))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) + theme(plot.title = element_text(size = 18))
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method")+
ggtitle("protein mass by interaction detection method")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-25))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) + theme(plot.title = element_text(size = 18))
?vjust
?xlab
ggplot(proteome_vs_imex_interaction_details_human, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("in IntAct, interaction detection method")+
ggtitle("protein mass by interaction detection method")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-25))+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) + theme(plot.title = element_text(size = 18))
## Analysis
# read the saved table
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
## plotting the distribution of mass
library(ggplot2)
# ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_density()+ scale_x_log10()
# ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) + scale_x_log10() + geom_histogram(position = "identity", bins = 50)
## removing olfactory receptors:
{proteome_vs_imex_details_f_minus_odor = proteome_vs_imex_details_f[-grep("Odor",
proteome_vs_imex_details_f$Protein.names),]
proteome_vs_imex_details_f_minus_odor_olf = proteome_vs_imex_details_f_minus_odor[-grep("Olfactory",
proteome_vs_imex_details_f_minus_odor$Protein.names),]
proteome_vs_imex_details_f_minus_odor_olf.c = rbind(cbind(proteome_vs_imex_details_f, olfac =
rep("all SwissProt", nrow(proteome_vs_imex_details_f))),
cbind(proteome_vs_imex_details_f_minus_odor_olf, olfac = rep("SwissProt excluding \n olfactory receptors",nrow(proteome_vs_imex_details_f_minus_odor_olf))))}
# the number of odor receptors excluded
n_odor_receptors = length(unique(grep("Odor", proteome_vs_imex_details_f$Protein.names, value = F))) + length(unique(grep("Olfactory", proteome_vs_imex_details_f_minus_odor$Protein.names, value = F)))
# calculating median per group
proteome_vs_imex_details_f_minus_odor_olf.c = as.data.table(proteome_vs_imex_details_f_minus_odor_olf.c)
proteome_vs_imex_details_f_minus_odor_olf.c[, whole_proteome_Uniprot_IMEx_x_olfac := paste0(whole_proteome_Uniprot_IMEx,olfac)]
proteome_vs_imex_details_f_minus_odor_olf.c[, median_Mass_per_group := median(log10(Mass)), by = whole_proteome_Uniprot_IMEx_x_olfac]
proteome_vs_imex_details_f_minus_odor_olf.c[, in_IntAct := ifelse(whole_proteome_Uniprot_IMEx == "SwissProt_and_IMEX", "yes", "no")]
## histogram with and without olfactory receptors:
ggplot(proteome_vs_imex_details_f_minus_odor_olf.c, aes(x = Mass, color = in_IntAct, label = olfac)) +geom_freqpoly(bins = 100)+ scale_x_log10() + theme(strip.text.y = element_text(angle = 0)) +xlab("protein mass, Da, log10 scale") + ggtitle("The distribution of protein mass for proteins with and \n without interacting partners curated in IMEx")+geom_vline(aes(xintercept = 10^median_Mass_per_group, color = in_IntAct),alpha =0.7)  + facet_grid(olfac~.)+
theme(panel.background = element_rect(fill = '#FFFFFF', colour = 'grey'))
# for poster
proteome_vs_imex_details_f_minus_odor_olf.c_post = proteome_vs_imex_details_f_minus_odor_olf.c[olfac == "all SwissProt",]
proteome_vs_imex_details_f_minus_odor_olf.c_post[,Organism := gsub(" \\(Human\\)","",Organism)]
protein_mass = ggplot(proteome_vs_imex_details_f_minus_odor_olf.c_post, aes(x = Mass, color = in_IntAct, label = Organism)) +
geom_freqpoly(bins = 100)+ scale_x_log10() +
theme(strip.text.y = element_text(angle = 0)) +
xlab("protein mass, Da, log10 scale") +
ggtitle("Mass")+
facet_grid(Organism~.) +
geom_vline(aes(xintercept = 10^median_Mass_per_group, color = in_IntAct),alpha =0.7,size =1.5) +
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
protein_mass = ggplot(proteome_vs_imex_details_f_minus_odor_olf.c_post, aes(x = Mass, color = in_IntAct, label = Organism)) +
geom_freqpoly(bins = 100)+ scale_x_log10() +
theme(strip.text.y = element_text(angle = 0)) +
xlab("protein mass, Da, log10 scale") +
ggtitle("Mass")+
facet_grid(Organism~.) +
geom_vline(aes(xintercept = 10^median_Mass_per_group, color = in_IntAct),alpha =0.7,size =1.5) +
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +theme(legend.text = element_text(size=18))
protein_mass
protein_mass = ggplot(proteome_vs_imex_details_f_minus_odor_olf.c_post, aes(x = Mass, color = in_IntAct, label = Organism)) +
geom_freqpoly(bins = 100)+ scale_x_log10() +
theme(strip.text.y = element_text(angle = 0)) +
xlab("protein mass, Da, log10 scale") +
ggtitle("Mass")+
facet_grid(Organism~.) +
geom_vline(aes(xintercept = 10^median_Mass_per_group, color = in_IntAct),alpha =0.7,size =1.5) +
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +theme(legend.text = element_text(size=18), legend.title = element_text(size=18))
protein_mass
