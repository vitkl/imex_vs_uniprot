ggtitle("the number of interactions (interaction IDs) associated with the number of times interaction was reported, the protein detection method and the scale of the study", subtitle = "all UniprotAC were coerced to generic UniprotAC, \n divided by interaction detection method (colour), \n large and small scale experiments")+
ylab("the number of interacting partners") + xlab("interaction detection method") +
facet_grid(SPECIES_NAME.x~large_small_scale, scales = "free") + geom_point(alpha =0.7)+scale_y_log10()+scale_x_log10()+geom_smooth(method = "rlm")+
theme(strip.text.y = element_text(angle = 0), axis.text.x = element_text(angle = -35,vjust = 0.65))
# Reading SQL database for information about the disordered proteins
library(RSQLite)
library(data.table)
# connect to the sqlite file
disorder = dbConnect(SQLite(), db = "./Data/Vincent_and_Schnell_2016_v2.db")
# get a list of all tables
alltables = dbListTables(disorder)
# get the everything from CD_counts table as a data.frame
Percent_disorder = dbGetQuery( disorder,'select * from Percent_disorder')
Percent_disorder = as.data.table(Percent_disorder)
# count the areas in the SQLite table
CIDER_data = dbGetQuery( disorder,'select * from CIDER_data')
CIDER_data = as.data.table(CIDER_data)
dbDisconnect(disorder)
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis - "strain K12" Ecoli is not characterised in disorder study
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
proteome_vs_imex_interaction_details_all = data.table()
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_interaction_details_f = as.data.table(read.delim(filename, header = T, stringsAsFactors = F,quote=""))
n = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", n)
n = gsub("strain K12", "Escherichia coli, strain K12", n)
proteome_vs_imex_interaction_details_f[ , c("SPECIES_NAME","reviewed","isoforms", "SPECIES_ID") := list(n,r,i,SPECIES_ID)]
proteome_vs_imex_interaction_details_all = rbind(proteome_vs_imex_interaction_details_all,proteome_vs_imex_interaction_details_f, fill =T)
}}}
all.IntAct.protein_interaction_details_all = merge(x = proteome_vs_imex_interaction_details_all, y=all.IntAct.proteins, by.x = "whole_proteome_IDs", by.y = "IDs_interactor", all.x = T, all.y = F)
proteome_vs_imex_interaction_details_f_Percent_disorder.t = merge(x = all.IntAct.protein_interaction_details_all,
y = Percent_disorder,
by.x = "whole_proteome_IDs",
by.y = "UniProtKB_AC",
all.x = T,
all.y = F)
proteome_vs_imex_interaction_details_f_Percent_disorder = merge(x = proteome_vs_imex_interaction_details_f_Percent_disorder.t,
y = CIDER_data,
by.x = "whole_proteome_IDs",
by.y = "UniProtKB_AC",
all.x = T,
all.y = F)
proteome_vs_imex_interaction_details_f_Percent_disorder[is.na(proteome_vs_imex_interaction_details_f_Percent_disorder)] = 0
# re-map publication numbers: remap uniprotAC to geneID for proteins absent in IMEx and count publications
# reading files for uniprotAC to geneID mapping
uniprotAC2geneID = data.table()
for(i in 1:length(uniprotAC2geneID_filename.dat)){
temp = fread(uniprotAC2geneID_filename.dat[i], header = F)
temp = temp[V2 == "GeneID", .(V1, V3)]
uniprotAC2geneID = rbind(uniprotAC2geneID,temp)
rm(list = "temp")
}
## map GeneIDs for IDs_interactor_A
{
colnames(uniprotAC2geneID)[2] = "whole_proteome_IDs2GeneID"
proteome_vs_imex_interaction_details_f_Percent_disorder = merge(x=proteome_vs_imex_interaction_details_f_Percent_disorder, y=uniprotAC2geneID, by.x = "whole_proteome_IDs", by.y = "V1", all.x=TRUE, all.y = F)
}
rm(list = "uniprotAC2geneID")
## count the number of pubmed PMID per GeneIDs for IDs_interactor_A and B
{
geneID2pubmed_url = "ftp://ftp.ncbi.nih.gov/gene/DATA/gene2pubmed.gz"
geneID2pubmed_filename = paste0("./Data/geneID2pubmed_release_", format(Sys.Date(), "%m-%Y.gz"))
geneID2pubmed_filename_txt = substr(geneID2pubmed_filename, 1, nchar(geneID2pubmed_filename)-3)
geneID2pubmed = fread(geneID2pubmed_filename_txt, colClasses = c("character","character","character"))
geneID2pubmed = geneID2pubmed[,.(GeneID, PubMed_ID)]
# counting publications per GeneID
geneID2pubmed[, whole_proteome_IDs_PMID := length(PubMed_ID), by = GeneID]
# selecting only relevant columns
geneID2pubmed = geneID2pubmed[,unique(data.table(GeneID,whole_proteome_IDs_PMID))][,GeneID := as.character(GeneID)]
# merging N of PMID to all other data
proteome_vs_imex_interaction_details_f_Percent_disorder = merge(proteome_vs_imex_interaction_details_f_Percent_disorder, geneID2pubmed, by.x = "whole_proteome_IDs2GeneID", by.y = "GeneID", all.x=TRUE)
rm(list = "geneID2pubmed")
}
# delete GeneID column to remove many-GeneID-to-one-protein
proteome_vs_imex_interaction_details_f_Percent_disorder[,whole_proteome_IDs2GeneID := NULL]
proteome_vs_imex_interaction_details_f_Percent_disorder = unique(proteome_vs_imex_interaction_details_f_Percent_disorder)
# sum up publications for many-GeneID-to-one-protein cases
proteome_vs_imex_interaction_details_f_Percent_disorder[,whole_proteome_IDs_PMID := sum(whole_proteome_IDs_PMID), by = whole_proteome_IDs]
# return to one unique protein per row representation
proteome_vs_imex_interaction_details_f_Percent_disorder = unique(proteome_vs_imex_interaction_details_f_Percent_disorder)
proteome_vs_imex_interaction_details_f_Percent_disorder[, whole_proteome_Uniprot_IMEx_x_SPECIES_NAME := paste0(whole_proteome_Uniprot_IMEx,SPECIES_NAME)]
proteome_vs_imex_interaction_details_f_Percent_disorder[, median_studies_per_group := median(log10(whole_proteome_IDs_PMID), na.rm = T), by = whole_proteome_Uniprot_IMEx_x_SPECIES_NAME]
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = whole_proteome_IDs_PMID, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_freqpoly()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the number of studies , log10 scale")+ ggtitle("the distribution of the number of studies for proteins with \n and without interacting partners curated in IMEx") +geom_vline(aes(xintercept = 10^median_studies_per_group, color = whole_proteome_Uniprot_IMEx),alpha =0.7)
# for poster
proteome_vs_imex_interaction_details_f_Percent_disorder[, in_IntAct := ifelse(whole_proteome_Uniprot_IMEx == "SwissProt_and_IMEX", "yes", "no")]
protein_publ = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = whole_proteome_IDs_PMID, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the number of publications (PMIDs), log10 scale")+ ggtitle("Number of publications") +geom_vline(aes(xintercept = 10^median_studies_per_group, color = in_IntAct),alpha =0.7, size = 1.5)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
Percent_disorder_types_for_plot = melt(data = proteome_vs_imex_interaction_details_f_Percent_disorder,variable.name ="disorder_pred_algorithm",value.name ="percent_disorder",measure.vars =c("IUPRED_PD","COILS_PD","HOTLOOPS_PD","REM465_PD","ICHR_consensus_PD"))
Percent_disorder_types_for_plot[, whole_proteome_Uniprot_IMEx_x_disorder_pred_algorithm_SPECIES_NAME := paste0(whole_proteome_Uniprot_IMEx,disorder_pred_algorithm,SPECIES_NAME)]
Percent_disorder_types_for_plot[, median_percent_disorder:= median(log10(percent_disorder), na.rm = T), by = whole_proteome_Uniprot_IMEx_x_disorder_pred_algorithm_SPECIES_NAME]
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+  facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale") + ggtitle("the distribution of the fraction of disordered regions for proteins with \n and without interacting partners annotated in IMEx")+scale_x_log10() +geom_vline(aes(xintercept = 10^median_percent_disorder, color = whole_proteome_Uniprot_IMEx),alpha =0.7)
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_density()+  facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100, log10 scale") + ggtitle("the distribution density of the fraction of disordered regions for proteins with \n and without interacting partners annotated in IMEx")+scale_x_log10() +geom_vline(aes(xintercept = 10^median_percent_disorder, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
proteome_vs_imex_interaction_details_f_Percent_disorder[, median_FCR := median(log10(FCR), na.rm = T), by = whole_proteome_Uniprot_IMEx_x_SPECIES_NAME]
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution of the fraction of charged residues for proteins with \n and without interacting curated annotated in IMEx") +geom_vline(aes(xintercept = 10^median_FCR, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = FCR, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_density()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("the distribution density of the fraction of charged residues for proteins with \n and without interacting curated annotated in IMEx") +geom_vline(aes(xintercept = 10^median_FCR, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
# for poster
protein_charge = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = FCR, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of charged residues, 0...1, log10 scale") + ggtitle("Fraction of charged residues") +geom_vline(aes(xintercept = 10^median_FCR, color = in_IntAct),alpha =0.7, size =1.5)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
z = numeric(length(SPECIES_NAME))
for(i in 1:length(SPECIES_NAME)){
sp = proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == SPECIES_NAME[i],]
z[i] =wilcox.test(Hydropathy_m~whole_proteome_Uniprot_IMEx, data = sp)$p.value
}
proteome_vs_imex_interaction_details_f_Percent_disorder[, median_Hydropathy_m := median(log10(Hydropathy_m), na.rm = T), by = whole_proteome_Uniprot_IMEx_x_SPECIES_NAME]
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = Hydropathy_m, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the mean hydropathy, log10 scale") + ggtitle("the distribution of the mean hydropathy for proteins with \n and without interacting partners curated in IMEx") +geom_vline(aes(xintercept = 10^median_Hydropathy_m, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = Hydropathy_m, color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_density()+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the mean hydropathy, log10 scale") + ggtitle("the distribution of the mean hydropathy for proteins with \n and without interacting partners curated in IMEx") +geom_vline(aes(xintercept = 10^median_Hydropathy_m, color = whole_proteome_Uniprot_IMEx),alpha =0.7)+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
#for poster
protein_hydropathy = ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder[SPECIES_NAME == "Homo sapiens",], aes(x = Hydropathy_m, color = in_IntAct, label = SPECIES_NAME)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the mean hydropathy, log10 scale") + ggtitle("Mean hydropathy") +geom_vline(aes(xintercept = 10^median_Hydropathy_m, color = in_IntAct),alpha =0.7,size =1.5) +
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggplot(Percent_disorder_types_for_plot, aes(x = whole_proteome_IDs_PMID, y = percent_disorder, label = SPECIES_NAME)) +geom_point(size = 0.05)+ scale_x_log10() + facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +ylab("fraction of disordered regions, 0...100")+xlab("the number of studies, log10 scale")  + ggtitle("the number of studies vs the fraction of disordered regions") +geom_smooth(method = "rlm", color = "blue")+geom_smooth(method = "loess", color = "red")+
theme(panel.grid.major =  element_line(color = 'grey', size = 0.2, linetype = 'solid'),
panel.background = element_rect(fill = '#FFFFFF', colour = 'grey')) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggplot(Percent_disorder_types_for_plot, aes( sample = percent_disorder,color = whole_proteome_Uniprot_IMEx, label = SPECIES_NAME)) +geom_qq()+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) + ggtitle("QQ-plot: the fraction of disordered regions")
# Percent_disorder_types_for_plot has disorder prediction algorithms and the results in rows(melted form) - only for disorder graphs
ggplot(Percent_disorder_types_for_plot, aes(x = percent_disorder, y = unique_interactions_per_interactor,alpha =0.7, label = SPECIES_NAME)) +geom_point(bins = 100)+ scale_y_log10()+geom_smooth(method = "rlm", color = "blue")+geom_smooth(method = "loess", color = "red")+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) +xlab("fraction of disordered regions, 0...100")+ylab("the number of interacting partners")  + ggtitle("the number of interacting partners as a function of the fraction of disordered regions  \n line fitted using rlm ")
cor(Percent_disorder_types_for_plot$percent_disorder,Percent_disorder_types_for_plot$unique_interactions_per_interactor)
# proteome_vs_imex_interaction_details_f_Percent_disorder has disorder prediction algorithms and the results in columns (spread form)
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder, aes(x = Length, y = unique_interactions_per_interactor, label = SPECIES_NAME)) +geom_point(bins = 100)+scale_x_log10()+ scale_y_log10()+geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("protein length, N amino acid residues, log10 scale")+ylab("the number of interacting partners, log10 scale")  + ggtitle("the number of interacting partners as a function of the protein length \n line fitted using rlm")
# Percent_disorder_types_for_plot has disorder prediction algorithms and the results in rows(melted form) - only for disorder graphs
Percent_disorder_types_for_plot[, length_disorder := percent_disorder*Length/100]
ggplot(Percent_disorder_types_for_plot, aes(x = length_disorder, y = unique_interactions_per_interactor, label = SPECIES_NAME)) +geom_point(alpha =0.7)+ scale_y_log10()+geom_smooth(method = "rlm", color = "blue")+geom_smooth(method = "loess", color = "red")+ scale_x_log10()+ facet_grid(SPECIES_NAME~disorder_pred_algorithm) + theme(strip.text.y = element_text(angle = 0)) + xlab("the length of disordered regions, N amino acid residues, log10 scale")+ ylab("the number of interacting partners, log10 scale")  + ggtitle("the number of interacting partners as a function of the length of disordered regions \n line fitted using rlm")
get_interpro = function(){
# Downloading UniprotID to InterPro, gz-unzipping, splitting file into many small files
url_interpro = "ftp://ftp.ebi.ac.uk/pub/databases/interpro/protein2ipr.dat.gz"
filename_interpro = paste0("./Data/protein2ipr_release_", format(Sys.Date(), "%m-%Y.dat.gz"))
filename_interpro1 = substr(filename_interpro, 1, nchar(filename_interpro)-3)
filename_interpro2 = substr(filename_interpro, 1, nchar(filename_interpro)-7)
#
if(!(length(list.files(filename_interpro2)) > 0)) {
# Downloading UniprotID to InterPro
downloader::download(url_interpro, filename_interpro)
# gz-unzipping UniprotID to InterPro
system(paste("gunzip", filename_interpro))
# splitting file into many 5-million-line files
system(paste("mkdir", filename_interpro2))
system(paste0("split -l 5000000 ",
filename_interpro1," ",
filename_interpro2,"/"))
}
filename_interpro3 = list.files(filename_interpro2)
# returns the vector of paths to interpro files
return(paste0(filename_interpro2, "/",filename_interpro3))
}
proteins2domains = function(proteins, interpro_files){
domains = data.table::data.table()
for(file in interpro_files){
interpro = data.table::fread(file = file, stringsAsFactors = F, header = F, sep = "\t")
domains = rbind(domains, interpro[V1 %in% proteins,])
}
setnames(domains, names(domains), c("UniprotID", "InterProID", "Description", "DomainID", "start", "stop"))
return(domains)
}
filename.int = paste("./analysis/","proteome_vs_imex_interaction_details_f_Percent_disorder.interpro", date,".txt", sep = "")
filename.dom = paste("./analysis/","proteome_vs_imex_interpro_domains", date,".txt", sep = "")
if(!(file.exists(filename.int) & file.exists(filename.dom))){
interpro_files = get_interpro()
proteins = proteome_vs_imex_interaction_details_f_Percent_disorder$whole_proteome_IDs
domains = proteins2domains(proteins, interpro_files)
domains = unique(domains)
domains[, domains_per_protein := .N, by = UniprotID]
proteome_vs_imex_interaction_details_f_Percent_disorder.interpro = merge(proteome_vs_imex_interaction_details_f_Percent_disorder, domains[,unique(data.table(UniprotID = UniprotID, domains_per_protein = domains_per_protein))], by.x = "whole_proteome_IDs", by.y = "UniprotID", all = T)
write.table(proteome_vs_imex_interaction_details_f_Percent_disorder.interpro, filename.int, col.names=T,row.names=F,sep="\t",quote=F)
write.table(domains, filename.dom, col.names=T,row.names=F,sep="\t",quote=F)
}
if(file.exists(filename.int) & file.exists(filename.dom)){
proteome_vs_imex_interaction_details_f_Percent_disorder.interpro = fread(filename.int)
domains = fread(filename.dom)
}
# proteome_vs_imex_interaction_details_f_Percent_disorder has disorder prediction algorithms and the results in columns (spread form)
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder.interpro, aes(x = whole_proteome_IDs_PMID  , y = domains_per_protein, label = SPECIES_NAME)) +geom_point()+scale_x_log10()+ scale_y_log10()+geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +ylab("the number of protein domains, log10 scale")+xlab("the number of studies, log10 scale")  + ggtitle("the number of studies vs the number of protein domains \n line fitted using rlm, curve using loess")
# proteome_vs_imex_interaction_details_f_Percent_disorder has disorder prediction algorithms and the results in columns (spread form)
ggplot(proteome_vs_imex_interaction_details_f_Percent_disorder.interpro, aes(x = domains_per_protein, y = unique_interactions_per_interactor, label = SPECIES_NAME)) +geom_point()+scale_x_log10()+ scale_y_log10()+geom_smooth(method = "rlm")+ facet_grid(SPECIES_NAME~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("the number of protein domains, log10 scale")+ylab("the number of interacting partners, log10 scale")  + ggtitle("the number of protein domains vs the number of interacting partners \n line fitted using rlm, curve using loess")
filename.summary.all = paste("./results/","proteome_vs_interactome_summary_",date,".txt", sep = "")
{
if(file.exists(filename.summary.all)) proteome_vs_interactome_summary.all = fread(filename.summary.all, sep = "\t", stringsAsFactors = F, data.table = F)
}
## Plotting with venn.diagram - Uniprot vs IMEx (or IntAct)
# code to be modified for different graphs
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12", "Drosophila melanogaster", "Caenorhabditis elegans", "Arabidopsis thaliana")
reviewed_venn = 1                 # 1 or 2
IMExdatabase = "IMEx"    # "X0469.IntAct." or "IMEx"
### ======================================================================== ###
# non-modifyable code
proteome_vs_interactome_summary.all$species.name = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", proteome_vs_interactome_summary.all$species.name)
proteome_vs_interactome_summary.all$species.name = gsub("strain K12", "Escherichia coli, strain K12", proteome_vs_interactome_summary.all$species.name)
SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", SPECIES_NAME)
SPECIES_NAME = gsub("strain K12", "Escherichia coli, strain K12", SPECIES_NAME)
library(dplyr)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, isoforms == TRUE)
proteome_vs_interactome_summary.all_isof = filter(proteome_vs_interactome_summary.all_isof, database == IMExdatabase)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all, reviewed == reviewed_venn)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, isoforms == FALSE)
proteome_vs_interactome_summary.all_noisof = filter(proteome_vs_interactome_summary.all_noisof, database == IMExdatabase)
library(VennDiagram)
{
grid.newpage()
if(reviewed_venn == 2){plotname = paste0("Proteome (SwissProt) coverage by interaction databases(",IMExdatabase,")")
databasename = "SwissProt"}
if(reviewed_venn == 1){plotname = paste0("Proteome (all UniprotKB) coverage by interaction databases(",IMExdatabase,")")
databasename = "UniprotKB"}
pushViewport(viewport(layout=grid.layout(nrow = length(SPECIES_NAME)+2, ncol=4, widths = unit(c(2/7,2/7,2/7,1/7), "npc"),
heights = unit(c(1/((length(SPECIES_NAME)+1)*4),1/((length(SPECIES_NAME)+1)*4),rep(1/(length(SPECIES_NAME)+1/2),length(SPECIES_NAME))), "npc"))))
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 1))
x =grid.text(plotname, x = unit(0.7, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = 2))
x =grid.text("isoforms included", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = 2))
x =grid.text("isoforms excluded", x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
for (i in 1:length(SPECIES_NAME)) {
pushViewport(viewport(layout.pos.col=1, layout.pos.row = i+2))
x =grid.text(SPECIES_NAME[i], x = unit(0.5, "npc"),y= unit(0.5, "npc"))
popViewport()
pushViewport(viewport(layout.pos.col=2, layout.pos.row = i+2))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_isof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
pushViewport(viewport(layout.pos.col=3, layout.pos.row = i+2))
source("double.venn.prot.R")
venn = double.venn.prot(proteome_vs_interactome_summary.all_noisof[i,], scaled = FALSE, IMExdatabase = IMExdatabase)
popViewport()
}
popViewport()
}
### combine the summaries for multiple species of how many interactors have non-uniprot identifiers
interactome_identifiers_summary.all = data.frame()
for (i in isoforms) {
for(n in SPECIES_NAME) {
filename.summary = paste("./summaries/","uniprotKB_IDs_and_",n,"_biogrid_from_mentha_interactors_summary", "_isoforms_",i,"_", date,".txt", sep = "")
if(!file.exists(filename.summary)) {
interactome_identifiers_summary.all
}
if(file.exists(filename.summary)) {
interactome_identifiers_summary.o = as.data.frame(read.delim(filename.summary, stringsAsFactors = F))
interactome_identifiers_summary.all = rbind(interactome_identifiers_summary.all, interactome_identifiers_summary.o)
}
}
}
interactome_identifiers_summary.all = unique(interactome_identifiers_summary.all)
## save all species summary
filename.summary.all = paste("./results/","interactome_identifiers_BioGRID_summary_",date,".txt", sep = "")
write.table(interactome_identifiers_summary.all, filename.summary.all, col.names=T,row.names=F,sep="\t",quote=F)
#################
interactome_identifiers_summary.all.s = interactome_identifiers_summary.all[,c(3,4,5,6,7)]
## Transform table for plotting with ggplot2
library(reshape2)
interactome_identifiers_summary.all.s.m= melt(data = interactome_identifiers_summary.all.s,
id.vars = c("SPECIES_NAME", "SPECIES_ID"),
variable.name = "decription",
value.name = "number")
interactome_identifiers_summary.all.s.m=unique(interactome_identifiers_summary.all.s.m)
## rename yeast and E.coli
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("strain K12", "E. coli, strain K12", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("Caenorhabditis elegans", "C. elegans", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
interactome_identifiers_summary.all.s.m$SPECIES_NAME = gsub("Drosophila melanogaster", "D. melanogaster", interactome_identifiers_summary.all.s.m$SPECIES_NAME)
# filter out non-uniprot identifiers to make picture clearer
interactome_identifiers_summary.all.s.m$decription = gsub("\\.", " ", interactome_identifiers_summary.all.s.m$decription)
ind = interactome_identifiers_summary.all.s.m$decription != "interacting partners with the other identifier"
interactome_identifiers_summary.all.s.m = interactome_identifiers_summary.all.s.m[ind,]
# plot
library(ggplot2)
library(dplyr)
proteome_vs_interactome_plot <- ggplot(interactome_identifiers_summary.all.s.m, aes(x=SPECIES_NAME, y=number, fill=decription,label=number)) + geom_bar(width = 0.9, stat = "identity", position = "stack") + geom_label(position = "stack", size = 4, label.padding = unit(0.08, "lines")) +
ggtitle("The number of interacting partners which have UniprotKB identifiers \n and belong to the species of interest") + theme(axis.text.x=element_text(angle = 20), axis.title.x = element_text(size = 0)) + ylab("number of proteins")
proteome_vs_interactome_plot
# save plot
# filename=paste("./results/", "interactome_identifiers_summary_plot_SMALL",date,".png", sep = "")
# ggsave(filename, proteome_vs_interactome_plot, width = 12, height = 12)
### ======================================================================== ###
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
proteome_vs_imex_details_f_minus_odor = proteome_vs_imex_details_f[-grep("Odor",
proteome_vs_imex_details_f$Protein.names),]
proteome_vs_imex_details_f_minus_odor_olf = proteome_vs_imex_details_f_minus_odor[-grep("Olfactory",
proteome_vs_imex_details_f_minus_odor$Protein.names),]
SwissProt_not_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx=="SwissProt_not_IMEX"]
SwissProt_and_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx=="SwissProt_and_IMEX"]
## is the distibution of mass or log(mass) normal?
library(rafalib)
mypar(2,2)
popsd(log10(SwissProt_not_IMEX))
median(log10(SwissProt_not_IMEX))
mad(log10(SwissProt_not_IMEX))
{
qqnorm(log10(SwissProt_not_IMEX), main = "SwissProt_not_IMEX, log(protein mass)")
qqline(log10(SwissProt_not_IMEX))
qqnorm(log10(SwissProt_and_IMEX), main = "SwissProt_and_IMEX, log(protein mass)")
qqline(log10(SwissProt_and_IMEX))
qqnorm((SwissProt_not_IMEX), main = "SwissProt_not_IMEX, protein mass")
qqline((SwissProt_not_IMEX))
qqnorm((SwissProt_and_IMEX), main = "SwissProt_and_IMEX, protein mass")
qqline((SwissProt_and_IMEX))
}
## it indeed is
## Monte-Carlo simulation
## is there a significant difference in protein mass?
# code can be used for things other than mass
set.seed(1)
# sample size
Ns <- seq(5, 350, 20)
lengthNs = length(Ns)
# number of simulations
B = 1000
# function which takes samples and does Wilcox test
simulation = function(n){
# x = cbind( matrix(sample(SwissProt_not_IMEX, B*n),B,n)
# y = matrix(sample(SwissProt_and_IMEX, B*n),B,n)
# genefilter::rowttests()
wilcox.test.rr = matrix(0, 1, 3)
x = sample(SwissProt_not_IMEX, n)
y = sample(SwissProt_and_IMEX, n)
wilcox.test.rr[1,c(1,2)] = wilcox.test(x, y, conf.int = T)$conf.int
wilcox.test.rr[1,3] = wilcox.test(x, y, conf.int = T)$p.value
return(wilcox.test.rr)
}
wilcox.test.rr = matrix(0, lengthNs, 3)
# looping Monte-Carlo over samples sizes ]
# for (n in 1:lengthNs) {
#   z =replicate(B, simulation(Ns[n]), simplify = T)
#   wilcox.test.rr[n,] = rowMeans(z)
# }
xx =cbind(wilcox.test.rr, Ns)
qplot(xx[,4], xx[,3], ylab = "Wilcox test p-val", xlab = "proteins sampled, N", main = "this test doesn't make sense - \n why would we do bootstrap rather than \n just to measure how likely is that we get the result \n as extreme if we just sample two groups from general population \n which is exatly what permutation test does?")
# permutations - wilcox test
proteome_vs_imex_details_f_shuffle = as.data.table(proteome_vs_imex_details_f[,c("Mass","whole_proteome_Uniprot_IMEx")])
proteome_vs_imex_details_f_shuffle[,Mass := log10(Mass)]
proteome_vs_imex_details_f_shuffle. = copy(proteome_vs_imex_details_f_shuffle)
set.seed(1)
wilcox.test.r10000 = replicate(10,{
proteome_vs_imex_details_f_shuffle.[,whole_proteome_Uniprot_IMEx := sample(whole_proteome_Uniprot_IMEx)]
wilcox.test.r = wilcox.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f_shuffle.)$statistic
},simplify = T)
# permutations - ttest
ttest.r10000 = replicate(10,{
proteome_vs_imex_details_f_shuffle.[,whole_proteome_Uniprot_IMEx := sample(whole_proteome_Uniprot_IMEx)]
t.test.r = t.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f_shuffle.)$statistic
},simplify = T)
## testing the difference in protein mass distributions
##of proteins absent/present in IMEx using Wilcox rank test
wilcox.test.r = wilcox.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f)
ttest_r = t.test(Mass~whole_proteome_Uniprot_IMEx,proteome_vs_imex_details_f)
{
library(rafalib)
mypar(1,2)
hist(wilcox.test.r10000, xlim = c(min(wilcox.test.r10000),wilcox.test.r$statistic+wilcox.test.r$statistic/2))
abline(v = wilcox.test.r$statistic, col = "red")
hist(ttest.r10000, xlim = c(min(ttest.r10000),ttest_r$statistic+ttest_r$statistic/2))
abline(v = ttest_r$statistic, col = "red")
}
multiplot(plotlist=list(protein_mass + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_publ + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_charge + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0.5, 0.5), "cm")) + theme(plot.title = element_text(size = 18)),
protein_hydropathy + theme(legend.position = "none") + theme(plot.margin = unit(c(0, 0.5, 0, 0.5), "cm")) + theme(plot.title = element_text(size = 18))), cols = 2)
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
##============================================================================##
## querying Uniprot for the list of proteins (only mapped to Uniprot)
## downolading length, mass, SNPs, isoforms, annotation score, existence attribute
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
## reading logic table and getting list of proteins
if(n != "strain K12"){
filename_vs_3 = paste("./analysis/","proteome_vs_interactome_vs_BioGRID_f_", SPECIES_ID,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")}
if(n == "strain K12"){
filename_vs_3 = paste("./analysis/","proteome_vs_interactome_f_", SPECIES_ID,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")}
biogrid_from_mentha_vs_proteome_vs_imex_f = as.data.frame(read.delim(filename_vs_3, stringsAsFactors = F))
source("download_whole_proteome.R")
whole_proteome_query = download_whole_proteome(SPECIES_ID, date = date)
colnames(whole_proteome_query)[2] = "Status"
uniprot_query = dplyr::filter(whole_proteome_query, Status == "reviewed")
##============================================================================##
## merging information from Uniprot to the logic table
proteome_vs_imex_details_f = merge(filter(biogrid_from_mentha_vs_proteome_vs_imex_f, whole_proteome_Uniprot==1),
uniprot_query,
by.x = "whole_proteome_IDs",
by.y = "Entry")
proteome_vs_imex_details_f$Mass = gsub(",","",proteome_vs_imex_details_f$Mass)
proteome_vs_imex_details_f$Mass = as.numeric(proteome_vs_imex_details_f$Mass)
## creating a factor variable for presence_in_Uniprot.presence_in_IMEx (1_0/1_1)
proteome_vs_imex_details_f[,length(proteome_vs_imex_details_f)+1] = interaction(proteome_vs_imex_details_f$whole_proteome_Uniprot, proteome_vs_imex_details_f$IMEx, sep = "_")
colnames(proteome_vs_imex_details_f)[length(proteome_vs_imex_details_f)] = paste0(colnames(proteome_vs_imex_details_f)[2], "_","IMEx")
levels(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx) = c("SwissProt_not_IMEX", "SwissProt_and_IMEX")
##============================================================================##
## saving combined logic table + protein properties from Uniprot
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
write.table(proteome_vs_imex_details_f,filename_vs_2,col.names=T,row.names=F,sep="\t",quote=F)
}
}
}
##====================================================================
suppressPackageStartupMessages({
library(data.table)
library(qvalue)
library(ggplot2)
})
##====================================================================
# read the saved table
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = fread(filename_vs_2, header = T, stringsAsFactors = F,quote="")
##====================================================================
not_in_IMEx_BP = GO_enrich_simplify_plot_bioc(protein_set = unique(proteome_vs_imex_details_f[whole_proteome_Uniprot == 1 & IMEx == 0,whole_proteome_IDs]),
reference_protein_set = unique(proteome_vs_imex_details_f[whole_proteome_Uniprot == 1,whole_proteome_IDs]),
identifier_type = "UNIPROT", ontology = "BP",
pAdjustMethod_ = "BH",
minSetSize = 40, maxSetSize = Inf,
simplify_by = "GeneRatio",
simplify_fun = "function (x) x[which.max(eval(parse(text = paste0(\"c(\",paste0(x, collapse = \",\"),\")\"))))]",
similarity_calc_method = "Wang",
similarity_cutoff = 0.7,
visualize_result = "dotplot",
above_corrected_pval = 0.05,
use_bioc_annotationdbi = T,
plot_title = "biological function of proteins with no available interactions in IMEx",
xlabel = "the fraction of proteins with biological function among proteins without interactions")
print(not_in_IMEx_BP$plot + theme(plot.title = element_text(hjust = 0.8)))
rm(list=ls())
##====================================================================
suppressPackageStartupMessages({
library(data.table)
library(qvalue)
library(ggplot2)
})
##====================================================================
# read the saved table
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
rm(list = ls()
)
gc()
