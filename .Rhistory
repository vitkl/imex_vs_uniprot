whole_proteome_query = download_whole_proteome(SPECIES_ID, date = date)
uniprot_query = dplyr::filter(whole_proteome_query, Status == "reviewed")
##============================================================================##
## merging information from Uniprot to the logic table
proteome_vs_imex_details_f = merge(filter(biogrid_from_mentha_vs_proteome_vs_imex_f, whole_proteome_Uniprot==1),
uniprot_query,
by.x = "whole_proteome_IDs",
by.y = "Entry")
proteome_vs_imex_details_f$Mass = gsub(",","",proteome_vs_imex_details_f$Mass)
proteome_vs_imex_details_f$Mass = as.numeric(proteome_vs_imex_details_f$Mass)
## creating a factor variable for presence_in_Uniprot.presence_in_IMEx (1_0/1_1)
proteome_vs_imex_details_f[,length(proteome_vs_imex_details_f)+1] = interaction(proteome_vs_imex_details_f$whole_proteome_Uniprot, proteome_vs_imex_details_f$IMEx, sep = "_")
colnames(proteome_vs_imex_details_f)[length(proteome_vs_imex_details_f)] = paste0(colnames(proteome_vs_imex_details_f)[2], "_","IMEx")
levels(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx) = c("SwissProt_not_IMEX", "SwissProt_and_IMEX")
##============================================================================##
## saving combined logic table + protein properties from Uniprot
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
write.table(proteome_vs_imex_details_f,filename_vs_2,col.names=T,row.names=F,sep="\t",quote=F)
}
}
}
##============================================================================##
## Analysis
# read the saved table
SPECIES_NAME = "Homo sapiens"
n = SPECIES_NAME
## only reviewed = 2 is relevant for this analysis
reviewed = 2
r = reviewed
isoforms = FALSE
i = isoforms
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
## plotting the distribution of mass
library(ggplot2)
# ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) +geom_density()+ scale_x_log10()
# ggplot(proteome_vs_imex_details_f, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.5)) + scale_x_log10() + geom_histogram(position = "identity", bins = 50)
## removing olfactory receptors:
{proteome_vs_imex_details_f_minus_odor = proteome_vs_imex_details_f[-grep("Odor",
proteome_vs_imex_details_f$Protein.names),]
proteome_vs_imex_details_f_minus_odor_olf = proteome_vs_imex_details_f_minus_odor[-grep("Olfactory",
proteome_vs_imex_details_f$Protein.names),]
proteome_vs_imex_details_f_minus_odor_olf.c = rbind(cbind(proteome_vs_imex_details_f, olfac =
rep("all SwissProt", nrow(proteome_vs_imex_details_f))),
cbind(proteome_vs_imex_details_f_minus_odor_olf, olfac = rep("SwissProt excluding \n olfactory receptors",nrow(proteome_vs_imex_details_f_minus_odor_olf))))}
## density with and without olfactory receptors:
ggplot(proteome_vs_imex_details_f_minus_odor_olf.c, aes(x = Mass, color = whole_proteome_Uniprot_IMEx, alpha =0.7, label = olfac)) +geom_freqpoly(bins = 100)+ scale_x_log10() + facet_grid(olfac~.) + theme(strip.text.y = element_text(angle = 0)) +xlab("protein mass, Da, log10 scale") + ggtitle("the distribution of protein mass for proteins with and without interaction evidence")
## testing the difference in protein mass distributions
##of proteins absent/present in IMEx using Wilcox rank test
SwissProt_not_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx=="SwissProt_not_IMEX"]
SwissProt_and_IMEX = proteome_vs_imex_details_f$Mass[proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx=="SwissProt_and_IMEX"]
wilcox.test.r = wilcox.test(SwissProt_not_IMEX, SwissProt_and_IMEX, conf.int = T)
wilcox.test.r
## testing the difference in protein mass distributions
##of proteins absent/present in IMEx using Wilcox rank test excluding olfactory receptors
SwissProt_not_IMEX = proteome_vs_imex_details_f_minus_odor_olf$Mass[proteome_vs_imex_details_f_minus_odor_olf$whole_proteome_Uniprot_IMEx=="SwissProt_not_IMEX"]
SwissProt_and_IMEX = proteome_vs_imex_details_f_minus_odor_olf$Mass[proteome_vs_imex_details_f_minus_odor_olf$whole_proteome_Uniprot_IMEx=="SwissProt_and_IMEX"]
wilcox.test.r = wilcox.test(SwissProt_not_IMEX, SwissProt_and_IMEX, conf.int = T)
wilcox.test.r
## is the distibution of mass or log(mass) normal?
library(rafalib)
mypar(2,2)
popsd(log10(SwissProt_not_IMEX))
median(log10(SwissProt_not_IMEX))
mad(log10(SwissProt_not_IMEX))
{
qqnorm(log10(SwissProt_not_IMEX), main = "SwissProt_not_IMEX, log(protein mass)")
qqline(log10(SwissProt_not_IMEX))
qqnorm(log10(SwissProt_and_IMEX), main = "SwissProt_and_IMEX, log(protein mass)")
qqline(log10(SwissProt_and_IMEX))
qqnorm((SwissProt_not_IMEX), main = "SwissProt_not_IMEX, protein mass")
qqline((SwissProt_not_IMEX))
qqnorm((SwissProt_and_IMEX), main = "SwissProt_and_IMEX, protein mass")
qqline((SwissProt_and_IMEX))
}
## it indeed is
## Monte-Carlo simulation
## is there a significant difference in protein mass?
# code can be used for things other than mass
set.seed(1)
# sample size
Ns <- seq(5, 350, 20)
lengthNs = length(Ns)
# number of simulations
B = 1000
# function which takes samples and does Wilcox test
simulation = function(n){
# x = cbind( matrix(sample(SwissProt_not_IMEX, B*n),B,n)
# y = matrix(sample(SwissProt_and_IMEX, B*n),B,n)
# genefilter::rowttests()
wilcox.test.rr = matrix(0, 1, 3)
x = sample(SwissProt_not_IMEX, n)
y = sample(SwissProt_and_IMEX, n)
wilcox.test.rr[1,c(1,2)] = wilcox.test(x, y, conf.int = T)$conf.int
wilcox.test.rr[1,3] = wilcox.test(x, y, conf.int = T)$p.value
return(wilcox.test.rr)
}
wilcox.test.rr = matrix(0, lengthNs, 3)
# looping Monte-Carlo over samples sizes ]
# for (n in 1:lengthNs) {
#   z =replicate(B, simulation(Ns[n]), simplify = T)
#   wilcox.test.rr[n,] = rowMeans(z)
# }
xx =cbind(wilcox.test.rr, Ns)
qplot(xx[,4], xx[,3], ylab = "Wilcox test p-val", xlab = "proteins sampled, N")
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
databases <- c("IntAct", "MINT", "bhf-ucl", "MPIDB", "MatrixDB",
"HPIDb","I2D-IMEx","InnateDB-IMEx", "MolCon", "UniProt", "MBInfo")
source("query_PSICQUIC_for_interactions.R")
twohybrids_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID,
SPECIES_NAME = n,
databases = databases, date,
detmethod = "transcriptional complementation assay")
complementation_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID,
SPECIES_NAME = n,
databases = databases, date,
detmethod = "protein complementation assay")
ap_ms_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID,
SPECIES_NAME = n,
databases = databases, date,
detmethod = "affinity chromatography technology",
pmethod = "partial identification of protein sequence")
##=========================================================##
# extracting interactor ID-s from interactions (MI-TAB 2.5)
source("interactions_to_interactors.R")
twohybrids_all_interactors = interactions_to_interactors(twohybrids_all_interactions)
complementation_all_interactors = interactions_to_interactors(complementation_all_interactions)
ap_ms_all_interactors = interactions_to_interactors(ap_ms_all_interactions)
# filtering interactors for uniprotkb only indentifiers
# filtering for SPECIES_ID only proteins
source("uniprotkb_and_SPECIES_ID_interactor_selector.R")
twohybrids_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(twohybrids_all_interactors, SPECIES_ID)
complementation_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(complementation_all_interactors, SPECIES_ID)
ap_ms_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(ap_ms_all_interactors, SPECIES_ID)
# Removing all isoform IDs (XXXXXX-X+ => XXXXXX) from IDs
source("isoform_id_all_remover.R")
twohybrids_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(twohybrids_all_interactors_SPECIES_ID_only$interactor_IDs)
complementation_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(complementation_all_interactors_SPECIES_ID_only$interactor_IDs)
ap_ms_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(ap_ms_all_interactors_SPECIES_ID_only$interactor_IDs)
# preparing interaction detection method data for logic table: selecting unique proteins and adding the column of ones
unique_twohybrids_interactors_SPECIES_ID_only = unique(cbind(twohybrids_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1))
colnames(unique_twohybrids_interactors_SPECIES_ID_only)[2] = "two_hybrid"
unique_complementation_interactors_SPECIES_ID_only = unique(cbind(complementation_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1))
colnames(unique_complementation_interactors_SPECIES_ID_only)[2] = "all_protein_complementation"
unique_ap_ms_interactors_SPECIES_ID_only = unique(cbind(ap_ms_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1))
colnames(unique_ap_ms_interactors_SPECIES_ID_only)[2] = "AP_MS"
# loading logic table made by "swissprot_vs_imex_protein_properties" script or by
filename_vs_2 = paste("./analysis/","proteome_vs_interactome_protein_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_details_f = as.data.frame(read.delim(filename_vs_2, header = T, stringsAsFactors = F,quote=""))
proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx = factor(proteome_vs_imex_details_f$whole_proteome_Uniprot_IMEx, ordered =F)
# merging new results with the logic table
proteome_vs_imex_interaction_details_t1 = merge(proteome_vs_imex_details_f,
unique_twohybrids_interactors_SPECIES_ID_only,
by.x = "whole_proteome_IDs",
by.y = "interactor_IDs",
all.x = T, all.y = F)
proteome_vs_imex_interaction_details_t2 = merge(proteome_vs_imex_interaction_details_t1,
unique_complementation_interactors_SPECIES_ID_only,
by.x = "whole_proteome_IDs",
by.y = "interactor_IDs",
all.x = T, all.y = F)
proteome_vs_imex_interaction_details_f = merge(proteome_vs_imex_interaction_details_t2,
unique_ap_ms_interactors_SPECIES_ID_only,
by.x = "whole_proteome_IDs",
by.y = "interactor_IDs",
all.x = T, all.y = F)
proteome_vs_imex_interaction_details_f[is.na(proteome_vs_imex_interaction_details_f)] = 0
# adding factor combination variable - two_hybrid and AP_MS
proteome_vs_imex_interaction_details_f[,length(proteome_vs_imex_interaction_details_f)+1] = interaction(proteome_vs_imex_interaction_details_f$two_hybrid, proteome_vs_imex_interaction_details_f$AP_MS, sep = "_")
colnames(proteome_vs_imex_interaction_details_f)[length(proteome_vs_imex_interaction_details_f)] = paste0("two_hybrid", "_vs_","AP_MS")
levels(proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS) = c("not two-hybrid, and not AP-MS", "two-hybrid, not AP-MS","not two-hybrid, AP-MS", "two-hybrid and AP-MS")
proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS = as.character(proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS)
proteome_vs_imex_interaction_details_f$two_hybrid_vs_AP_MS[proteome_vs_imex_interaction_details_f$IMEx!=1] = "not in IMEx"
# saving combined logic table with protein properties from Uniprot and interaction properties combined
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
write.table(proteome_vs_imex_interaction_details_f,filename,col.names=T,row.names=F,sep="\t",quote=F)
}
}
}
# read the table saved before
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
proteome_vs_imex_interaction_details_all = data.table()
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
filename = paste("./analysis/","proteome_vs_interactome_interaction_properties_f_", n,"_reviewed_",r,"_isoforms_",i,"_", date,".txt", sep = "")
proteome_vs_imex_interaction_details_f = as.data.table(read.delim(filename, header = T, stringsAsFactors = F,quote=""))
n = gsub("strain ATCC 204508", "S. cerevisiae, strain S288c", n)
n = gsub("strain K12", "Escherichia coli, strain K12", n)
proteome_vs_imex_interaction_details_f[ , c("SPECIES_NAME","reviewed","isoforms", "SPECIES_ID") := list(n,r,i,SPECIES_ID)]
proteome_vs_imex_interaction_details_all = rbind(proteome_vs_imex_interaction_details_all,proteome_vs_imex_interaction_details_f, fill =T)
}}}
colnames(proteome_vs_imex_interaction_details_all)
proteome_vs_imex_interaction_details_all[, Median_mass := median((Mass)), by = .(SPECIES_NAME,two_hybrid_vs_AP_MS)]
library(ggplot2)
ggplot(proteome_vs_imex_interaction_details_all, aes(x = Mass, color =two_hybrid_vs_AP_MS)) +
geom_density(alpha =0.2) + scale_x_log10() +
xlab("protein mass, Da, log10 scale")+
ggtitle("density plot of the protein mass (overlay for different detection methods)") +
facet_grid(SPECIES_NAME~., scales = "free_y")+theme(strip.text.y = element_text(angle = 0))+geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass))
ggplot(proteome_vs_imex_interaction_details_all, aes(x = Mass,color = two_hybrid_vs_AP_MS)) +
scale_x_log10() + geom_freqpoly(position = "identity", bins = 50,alpha =0.8) +
xlab("protein mass, Da, log10 scale")+
ggtitle("density plot of the protein mass (overlay for different detection methods)") +
facet_grid(SPECIES_NAME~., scales = "free_y")+theme(strip.text.y = element_text(angle = 0))+geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass))
library(dplyr)
library(scales)
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),", \n (median mass: ", signif(Median_mass,3)," kDa)"))]
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_x_discrete(labels = plot_labels)+geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_x_discrete(aes(labels = plot_labels))+geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =45))
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),", \n (median mass: ", signif(Median_mass,3)," kDa)"))]
proteome_vs_imex_interaction_details_all[100,plot_labels]
proteome_vs_imex_interaction_details_all[,unique(plot_labels)]
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),", \n (median mass: ", signif(Median_mass/1000,3)," kDa)"))]
proteome_vs_imex_interaction_details_all[,unique(plot_labels)]
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_x_discrete(aes(labels = plot_labels))+geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =45))
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),",  (median mass: ", signif(Median_mass/1000,3)," kDa)"))]
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),", (median mass: ", signif(Median_mass/1000,3)," kDa)"))]
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_x_discrete(aes(labels = plot_labels))+geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =45))
proteome_vs_imex_interaction_details_all[,unique(plot_labels)]
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_x_discrete(aes(labels = plot_labels))+geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0("(median mass: ", signif(Median_mass/1000,3)," kDa)"))]
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_x_discrete(aes(labels = plot_labels))+geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_text(aes(0,Median_mass,label = plot_labels, vjust = -1)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_text(aes(0,Median_mass,label = plot_labels, vjust = -1)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(signif(Median_mass/1000,3)," kDa)"))]
?geom_text
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),", (median mass: ", signif(Median_mass/1000,3)," kDa)"))]
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(signif(Median_mass/1000,3)," kDa)"))]
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_text(aes(0,Median_mass,label = plot_labels, vjust = -1)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_text(aes(0,Median_mass,label = plot_labels, vjust = -1,hjust = label)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_text(aes(0,label = plot_labels, vjust = -1,hjust = label)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_text(aes(0,label = plot_labels, vjust = -1)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_text(aes(0,label = plot_labels, vjust = -1)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_text(aes(label = plot_labels, vjust = -1)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_label(aes(label = plot_labels, vjust = -1)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_label(aes(label = plot_labels, vjust = -1)) +geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-45))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(gsub("_"," ",two_hybrid_vs_AP_MS),", (median mass: ", signif(Median_mass/1000,3)," kDa)"))]
proteome_vs_imex_interaction_details_all[,plot_labels := (paste0(signif(Median_mass/1000,3)," kDa)"))]
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
annotate("text", unique(proteome_vs_imex_interaction_details_all[,plot_labels]))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
annotate("text", unique(proteome_vs_imex_interaction_details_all[,plot_labels], x = 1:20, y = proteome_vs_imex_interaction_details_all[,.(Median_mass,plot_labels)][,Median_mass]))
unique(proteome_vs_imex_interaction_details_all[,plot_labels]
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
annotate("text", label = unique(proteome_vs_imex_interaction_details_all[,plot_labels]), x = 1:20, y = unique( proteome_vs_imex_interaction_details_all[,.(Median_mass,plot_labels)][,Median_mass]))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))+
annotate("text", label = unique(proteome_vs_imex_interaction_details_all[,plot_labels]), x = 1:20, y = unique( proteome_vs_imex_interaction_details_all[,unique(Median_mass,plot_labels)][,Median_mass]))
ggplot(proteome_vs_imex_interaction_details_all, aes(y = Mass, x =two_hybrid_vs_AP_MS, fill = two_hybrid_vs_AP_MS)) +
geom_violin(draw_quantiles = c(0.05,0.25,0.495,0.5,0.505,0.75,0.95),scale = "area", alpha =0.7) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + geom_vline(aes(colour = two_hybrid_vs_AP_MS,xintercept = Median_mass)) +
ylab("Mass, Da, log10 scale")+
xlab("presence in IMEx, detection method")+
ggtitle("How does protein interaction detection method depend on the protein length?",
subtitle = "all violins have the same area")+facet_grid(.~SPECIES_NAME)+theme(axis.text.x = element_text(angle =-35))
?merge
SPECIES_NAME = c("Homo sapiens", "Mus musculus", "strain ATCC 204508", "strain K12", "Drosophila melanogaster", "Caenorhabditis elegans", "Arabidopsis thaliana")
## only reviewed = 2 and isoforms = FALSE is relevant for this analysis
reviewed = 2
isoforms = FALSE
##============================================================================##
source("SPECIES_NAME_TO_ID.R")
library(dplyr)
for (r in reviewed) {
for (i in isoforms) {
for (n in SPECIES_NAME) {
SPECIES_IDs = SPECIES_NAME_TO_ID(n)
SPECIES_ID = SPECIES_IDs$SPECIES_ID
databases <- c("IntAct", "MINT", "bhf-ucl", "MPIDB", "MatrixDB",
"HPIDb","I2D-IMEx","InnateDB-IMEx", "MolCon", "UniProt", "MBInfo")
source("query_PSICQUIC_for_interactions.R")
twohybrids_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID,
SPECIES_NAME = n,
databases = databases, date,
detmethod = "transcriptional complementation assay")
complementation_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID,
SPECIES_NAME = n,
databases = databases, date,
detmethod = "protein complementation assay")
ap_ms_all_interactions = query_PSICQUIC_for_interactions(SPECIES_ID = SPECIES_ID,
SPECIES_NAME = n,
databases = databases, date,
detmethod = "affinity chromatography technology",
pmethod = "partial identification of protein sequence")
##=========================================================##
# extracting interactor ID-s from interactions (MI-TAB 2.5)
source("interactions_to_interactors.R")
twohybrids_all_interactors = interactions_to_interactors(twohybrids_all_interactions)
complementation_all_interactors = interactions_to_interactors(complementation_all_interactions)
ap_ms_all_interactors = interactions_to_interactors(ap_ms_all_interactions)
# filtering interactors for uniprotkb only indentifiers
# filtering for SPECIES_ID only proteins
source("uniprotkb_and_SPECIES_ID_interactor_selector.R")
twohybrids_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(twohybrids_all_interactors, SPECIES_ID)
complementation_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(complementation_all_interactors, SPECIES_ID)
ap_ms_all_interactors_SPECIES_ID_only = uniprotkb_and_SPECIES_ID_interactor_selector(ap_ms_all_interactors, SPECIES_ID)
# Removing all isoform IDs (XXXXXX-X+ => XXXXXX) from IDs
source("isoform_id_all_remover.R")
twohybrids_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(twohybrids_all_interactors_SPECIES_ID_only$interactor_IDs)
complementation_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(complementation_all_interactors_SPECIES_ID_only$interactor_IDs)
ap_ms_all_interactors_SPECIES_ID_only$interactor_IDs = isoform_id_all_remover(ap_ms_all_interactors_SPECIES_ID_only$interactor_IDs)
# preparing interaction detection method data for logic table: selecting unique proteins and adding the column of ones
unique_twohybrids_interactors_SPECIES_ID_only = as.data.table(unique(cbind(twohybrids_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1)))
colnames(unique_twohybrids_interactors_SPECIES_ID_only)[2] = "two_hybrid"
unique_complementation_interactors_SPECIES_ID_only = as.data.table(unique(cbind(complementation_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1)))
colnames(unique_complementation_interactors_SPECIES_ID_only)[2] = "all_protein_complementation"
unique_ap_ms_interactors_SPECIES_ID_only = as.data.table(unique(cbind(ap_ms_all_interactors_SPECIES_ID_only[c("interactor_IDs")], 1)))
colnames(unique_ap_ms_interactors_SPECIES_ID_only)[2] = "AP_MS"
)
